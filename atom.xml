<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MakeItPossible16</title>
  <subtitle>寻找实习单位,个人简介:https://makeitpossible16.github.io/about/</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://makeitpossible16.github.io/"/>
  <updated>2017-01-07T04:58:14.773Z</updated>
  <id>https://makeitpossible16.github.io/</id>
  
  <author>
    <name>MakeItPossible16</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件系统(seaweedfs)与关系型数据库优劣势分析</title>
    <link href="https://makeitpossible16.github.io/2017/01/06/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F(seaweedfs)%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8A%A3%E5%8A%BF%E5%88%86%E6%9E%90/"/>
    <id>https://makeitpossible16.github.io/2017/01/06/文件系统(seaweedfs)与关系型数据库优劣势分析/</id>
    <published>2017-01-06T00:00:00.000Z</published>
    <updated>2017-01-07T04:58:14.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>在学习ELKStack过程中,想用seaweedfs作为ELKStack的后端存储系统,突然想知道,数据库的搜索与文件系统(主要围绕seaweedfs)的数据搜索,哪个更有优势. 作为数据相对较小,但数量多,并不断持续增长,到底该使用数据库还是使用seaweedfs. 本文以数据搜索为切入点进行展开.</p>
<h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><h3 id="seaweedfs"><a href="#seaweedfs" class="headerlink" title="seaweedfs"></a>seaweedfs</h3><p>seaweedsfs可用k-v型数据库进行数据检索,比如redis,Leveldb,据我所知,Leveldb采用<a href="http://www.cnblogs.com/aspnethot/articles/3442813.html" target="_blank" rel="external">布隆过滤算法</a>判断key是否存在,若存在,定位到相应的inode及文件偏移量进行读取,读取文件的耗时基本可以忽略,不算入比较范围.所以seaweedfs的搜索关键在于k-v型数据库的搜索速度.当数据量变大时,seaweedfs占用的内存呈现出线性增长的变化过程,具体分析及优化参考文章<a href="https://gold.xitu.io/entry/57d0b42d128fe1005509321b" target="_blank" rel="external">Facebook Haystack: 小文件解决方案</a></p>
<h4 id="seaweedfs实现内容搜索的构想"><a href="#seaweedfs实现内容搜索的构想" class="headerlink" title="seaweedfs实现内容搜索的构想"></a>seaweedfs实现内容搜索的构想</h4><p>借助elasticsearch,建立索引,或借助Apache Lucene建立全文索引</p>
<h3 id="关系型数据库-mysql"><a href="#关系型数据库-mysql" class="headerlink" title="关系型数据库(mysql)"></a>关系型数据库(mysql)</h3><p>参考文章<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a><br><a href="http://jm.taobao.org/2013/08/26/2988/" target="_blank" rel="external">从外部查询看数据库的内部实现机制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h2&gt;&lt;p&gt;在学习ELKStack过程中,想用seaweedfs作为ELKStack的后端存储系统,突然想知道,数据库的搜索与文件系统(
    
    </summary>
    
      <category term="文件系统与数据库优劣势分析" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8A%A3%E5%8A%BF%E5%88%86%E6%9E%90/"/>
    
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
      <category term="文件系统" scheme="https://makeitpossible16.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据库" scheme="https://makeitpossible16.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>linux内核学习-数据结构</title>
    <link href="https://makeitpossible16.github.io/2017/01/04/linux%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://makeitpossible16.github.io/2017/01/04/linux内核学习-数据结构/</id>
    <published>2017-01-04T00:00:00.000Z</published>
    <updated>2017-01-05T12:18:54.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="container-of"><a href="#container-of" class="headerlink" title="container_of"></a>container_of</h2><p>用于从包含在某个结构中的指针获得结构本身的指针，通俗地讲就是通过结构体变量中某个成员的首地址进而获得整个结构体变量的首地址。<br><a href="http://blog.csdn.net/npy_lp/article/details/7010752" target="_blank" rel="external">Linux内核中的常用宏container_of其实很简单</a></p>
<h2 id="linux内核Hash-链表"><a href="#linux内核Hash-链表" class="headerlink" title="linux内核Hash 链表"></a>linux内核Hash 链表</h2><p><a href="http://blog.csdn.net/tigerjibo/article/details/8450995" target="_blank" rel="external">Linux内核哈希表分析与应用</a></p>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>应用:<br>有一个庞大的字符串数组，然后给你一个单独的字符串，让你从这个数组中查找是否有这个字符串并找到它<br><a href="http://blog.csdn.net/shanzhizi/article/details/7736526#comments" target="_blank" rel="external">暴雪公司关于字符串匹配的hash算法</a></p>
<p>典型的应用场景(Hbase，Accumulo，Leveldb)：<br>某些存储系统的设计中，会存在空查询缺陷：当查询一个不存在的key时，需要访问慢设备，导致效率低下。<br>比如一个前端页面的缓存系统，可能这样设计：先查询某个页面在本地是否存在，如果存在就直接返回，如果不存在，就从后端获取。但是当频繁从缓存系统查询一个页面时，缓存系统将会频繁请求后端，把压力导入后端。<br>这是只要增加一个bloom算法的服务，后端插入一个key时，在这个服务中设置一次<br>需要查询后端时，先判断key在后端是否存在，这样就能避免后端的压力。<br><a href="http://www.cnblogs.com/liyulong1982/p/6013002.html" target="_blank" rel="external">布隆过滤器(Bloom Filter)详解</a><br><a href="http://blog.csdn.net/alps1992/article/details/44610587" target="_blank" rel="external">算法学习 - Bloom Filter(布隆过滤器)学习实现(C++实现)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;container-of&quot;&gt;&lt;a href=&quot;#container-of&quot; class=&quot;headerlink&quot; title=&quot;container_of&quot;&gt;&lt;/a&gt;container_of&lt;/h2&gt;&lt;p&gt;用于从包含在某个结构中的指针获得结构本身的指针，通俗地讲就是
    
    </summary>
    
      <category term="linux内核" scheme="https://makeitpossible16.github.io/categories/linux%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="linux" scheme="https://makeitpossible16.github.io/tags/linux/"/>
    
      <category term="内核" scheme="https://makeitpossible16.github.io/tags/%E5%86%85%E6%A0%B8/"/>
    
      <category term="数据结构" scheme="https://makeitpossible16.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>linux命令学习</title>
    <link href="https://makeitpossible16.github.io/2017/01/02/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>https://makeitpossible16.github.io/2017/01/02/linux命令学习/</id>
    <published>2017-01-02T00:00:00.000Z</published>
    <updated>2017-01-03T12:52:27.902Z</updated>
    
    <content type="html"><![CDATA[<p>虽然使用linux有很长一段时间,但对于一些平时用不到的命令,还是比较生疏,记录一下</p>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。<br><a href="http://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="external">awk使用介绍</a><br><a href="http://blog.csdn.net/andyxm/article/details/5964071" target="_blank" rel="external">awk print 学习</a></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>用于排序<br><a href="http://www.cnblogs.com/dong008259/archive/2011/12/08/2281214.html" target="_blank" rel="external">linux之sort用法</a></p>
<h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>报告或删除文件中重复的行。<br><a href="http://blog.csdn.net/jesseen/article/details/8005056" target="_blank" rel="external">linux uniq 命令详解</a></p>
<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>读取标准输入的数据，并将其内容输出成文件<br><a href="http://liubin.blog.51cto.com/282313/131298" target="_blank" rel="external">linux tee 命令详解</a></p>
<h2 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h2><p>可以把/dev/null看作一个”黑洞”，它非常等价于一个只写文件，所有写入它的内容都会永远丢失。<br><a href="http://www.2cto.com/os/201412/361275.html" target="_blank" rel="external">linux下/dev/null的用途</a><br><a href="http://blog.csdn.net/sunrier/article/details/7695839/" target="_blank" rel="external">Linux下” &gt;/dev/null 2&gt;&amp;1 “相关知识说明</a></p>
<h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>程序后台运行,如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令.<br>命令格式 : nohup command &amp;<br><a href="http://www.2cto.com/os/201301/185701.html" target="_blank" rel="external">linux nohup命令详解</a></p>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>screen 算是 linux 运维一个中高级技巧。通过 screen 命令创建的环境下运行的终端命令，其父进程不是 sshd 登录会话，而是 screen 。这样就可以即避免用户退出进程消失的问题，又随时能重新接管回终端继续操作。<br>创建独立的 screen 命令如下：<br>screen -dmS elkscreen_1<br>接管连入创建的 elkscreen_1 命令如下：<br>screen -r elkscreen_1<br>然后你可以看到一个一模一样的终端，运行 logstash 之后，不要按 Ctrl+C，而是按 Ctrl+A+D 键，断开环境。想重新接管，依然 screen -r elkscreen_1 即可。<br>如果创建了多个 screen，查看列表命令如下：<br>screen -list<br><a href="http://kibana.logstash.es/content/logstash/get-start/daemon.html" target="_blank" rel="external">需要长期后台运行的大量程序</a>,使用daemontools</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然使用linux有很长一段时间,但对于一些平时用不到的命令,还是比较生疏,记录一下&lt;/p&gt;
&lt;h2 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h2&gt;&lt;p&gt;AWK是一种处理文本文件的语言，
    
    </summary>
    
      <category term="linux命令" scheme="https://makeitpossible16.github.io/categories/linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux" scheme="https://makeitpossible16.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ELKStack搭建问题总结</title>
    <link href="https://makeitpossible16.github.io/2017/01/02/ELKStack%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://makeitpossible16.github.io/2017/01/02/ELKStack搭建问题总结/</id>
    <published>2017-01-02T00:00:00.000Z</published>
    <updated>2017-01-02T15:58:17.559Z</updated>
    
    <content type="html"><![CDATA[<p>使用Docker搭建ELKStack时,elasticsearch自动退出,使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs [dockerName]</div></pre></td></tr></table></figure></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>查看日志, 日志输出为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR: bootstrap checks failed</div><div class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</div></pre></td></tr></table></figure></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]">Elasticsearch5.0 安装问题集锦</a></p>
<p>切换到root用户修改配置sysctl.conf</p>
<p>vi /etc/sysctl.conf</p>
<p>添加下面配置：</p>
<p>vm.max_map_count=655360</p>
<p>并执行命令：</p>
<p>sysctl -p</p>
<p>然后，重新启动elasticsearch，即可启动成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Docker搭建ELKStack时,elasticsearch自动退出,使用&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/
    
    </summary>
    
      <category term="ELKStack" scheme="https://makeitpossible16.github.io/categories/ELKStack/"/>
    
    
      <category term="ELKStack" scheme="https://makeitpossible16.github.io/tags/ELKStack/"/>
    
      <category term="日志分析" scheme="https://makeitpossible16.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
      <category term="流处理" scheme="https://makeitpossible16.github.io/tags/%E6%B5%81%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>linux学习-linux文件存储</title>
    <link href="https://makeitpossible16.github.io/2017/01/01/linux%E5%AD%A6%E4%B9%A0-linux%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>https://makeitpossible16.github.io/2017/01/01/linux学习-linux文件存储/</id>
    <published>2017-01-01T00:00:00.000Z</published>
    <updated>2017-01-01T15:55:22.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux文件存储"><a href="#linux文件存储" class="headerlink" title="linux文件存储"></a>linux文件存储</h2><p>一直对文件存储过程不太理解,估计是操作系统没学好,今天看了这篇文章<a href="http://c.biancheng.net/cpp/html/2780.html" target="_blank" rel="external">Linux文件存储结构，包括目录项、inode、数据块</a>,感觉思路一下子清晰了. 根据linux一切皆文件的思想,目录项也作为一个文件存储,存储的内容为inode和文件名.</p>
<h2 id="linux文件查找"><a href="#linux文件查找" class="headerlink" title="linux文件查找"></a>linux文件查找</h2><p><a href="http://www.cnblogs.com/cobbliu/p/4888751.html" target="_blank" rel="external">文件系统中的目录查找</a><br><a href="http://alanwu.blog.51cto.com/3652632/1120652" target="_blank" rel="external">Linux中文件名解析处理源码分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux文件存储&quot;&gt;&lt;a href=&quot;#linux文件存储&quot; class=&quot;headerlink&quot; title=&quot;linux文件存储&quot;&gt;&lt;/a&gt;linux文件存储&lt;/h2&gt;&lt;p&gt;一直对文件存储过程不太理解,估计是操作系统没学好,今天看了这篇文章&lt;a href=&quot;
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="linux" scheme="https://makeitpossible16.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读记录9-生成fid过程</title>
    <link href="https://makeitpossible16.github.io/2016/12/16/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%959-%E7%94%9F%E6%88%90fid%E8%BF%87%E7%A8%8B/"/>
    <id>https://makeitpossible16.github.io/2016/12/16/seaweedfs源码阅读记录9-生成fid过程/</id>
    <published>2016-12-16T00:00:00.000Z</published>
    <updated>2016-12-16T14:27:23.010Z</updated>
    
    <content type="html"><![CDATA[<p>使用命令 : curl -X POST <a href="http://localhost:9333/dir/assign" target="_blank" rel="external">http://localhost:9333/dir/assign</a></p>
<p>在topology.go 中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Topology)</span> <span class="title">PickForWrite</span><span class="params">(count <span class="keyword">uint64</span>, option *VolumeGrowOption)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">uint64</span>, *DataNode, error)</span></span> &#123;</div><div class="line">	vid, count, datanodes, err := t.GetVolumeLayout(option.Collection, option.ReplicaPlacement, option.Ttl).PickForWrite(count, option)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> || datanodes.Length() == <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>, <span class="number">0</span>, <span class="literal">nil</span>, errors.New(<span class="string">"No writable volumes available!"</span>)</div><div class="line">	&#125;</div><div class="line">	fileId, count := t.Sequence.NextFileId(count)   <span class="comment">// fileId = 1050682, count = 1</span></div><div class="line">	<span class="keyword">return</span> storage.NewFileId(*vid, fileId, rand.Uint32()).String(), count, datanodes.Head(), <span class="literal">nil</span>  <span class="comment">//调用file_id.go中的NewFileId函数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在file_id.go 中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> FileId <span class="keyword">struct</span> &#123;</div><div class="line">	VolumeId VolumeId</div><div class="line">	Key      <span class="keyword">uint64</span> <span class="comment">// fileId = 1050682</span></div><div class="line">	Hashcode <span class="keyword">uint32</span> <span class="comment">// rand.Uint32()</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFileId</span><span class="params">(VolumeId VolumeId, Key <span class="keyword">uint64</span>, Hashcode <span class="keyword">uint32</span>)</span> *<span class="title">FileId</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;FileId&#123;VolumeId: VolumeId, Key: Key, Hashcode: Hashcode&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用memory_sequencer.go中的函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MemorySequencer)</span> <span class="title">NextFileId</span><span class="params">(count <span class="keyword">uint64</span>)</span> <span class="params">(<span class="keyword">uint64</span>, <span class="keyword">uint64</span>)</span></span> &#123;  <span class="comment">// count = 1</span></div><div class="line">	m.sequenceLock.Lock()</div><div class="line">	<span class="keyword">defer</span> m.sequenceLock.Unlock()</div><div class="line">	ret := m.counter</div><div class="line">	m.counter += <span class="keyword">uint64</span>(count)</div><div class="line">	<span class="keyword">return</span> ret, count</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调试信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(dlv) p m</div><div class="line">*github.com/chrislusf/seaweedfs/weed/sequence.MemorySequencer &#123;</div><div class="line">	counter: 1050683,</div><div class="line">	sequenceLock: sync.Mutex &#123;state: 1, sema: 0&#125;,&#125;</div></pre></td></tr></table></figure></p>
<p>在 master_server_handlers.go 中封装信息<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fid, count, dn, err := ms.Topo.PickForWrite(requestedCount, option)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		writeJsonQuiet(w, r, http.StatusOK, operation.AssignResult&#123;Fid: fid, Url: dn.Url(), PublicUrl: dn.PublicUrl, Count: count&#125;)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		writeJsonQuiet(w, r, http.StatusNotAcceptable, operation.AssignResult&#123;Error: err.Error()&#125;)</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用命令 : curl -X POST &lt;a href=&quot;http://localhost:9333/dir/assign&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:9333/dir/assign&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读8-GET&amp;HEAD获取文件过程</title>
    <link href="https://makeitpossible16.github.io/2016/12/15/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB8-GET&amp;HEAD%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E8%BF%87%E7%A8%8B/"/>
    <id>https://makeitpossible16.github.io/2016/12/15/seaweedfs源码阅读8-GET&amp;HEAD获取文件过程/</id>
    <published>2016-12-15T00:00:00.000Z</published>
    <updated>2016-12-15T12:08:29.759Z</updated>
    
    <content type="html"><![CDATA[<p>GET 文件请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:8080/27542,10088ee11dccb9</div></pre></td></tr></table></figure></p>
<p>先生成一个新的needle,然后根据fid:10088ee11dccb9 , 其中,前8位使用16进制转换为uint64 ==&gt; key, 后6位使用16进制转换为uint32 ==&gt; hash,解析结果给新生成的needle赋值,n.Id=key, n.Cookie=hash</p>
<p>如果当前的volumeServer没有找到请求的volumeId<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> !vs.store.HasVolume(volumeId) &#123;</div><div class="line">		<span class="keyword">if</span> !vs.ReadRedirect &#123;</div><div class="line">			glog.V(<span class="number">2</span>).Infoln(<span class="string">"volume is not local:"</span>, err, r.URL.Path)</div><div class="line">			w.WriteHeader(http.StatusNotFound)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		lookupResult, err := operation.Lookup(vs.GetMasterNode(), volumeId.String())</div><div class="line">		glog.V(<span class="number">2</span>).Infoln(<span class="string">"volume"</span>, volumeId, <span class="string">"found on"</span>, lookupResult, <span class="string">"error"</span>, err)</div><div class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(lookupResult.Locations) &gt; <span class="number">0</span> &#123;</div><div class="line">			u, _ := url.Parse(util.NormalizeUrl(lookupResult.Locations[<span class="number">0</span>].PublicUrl))</div><div class="line">			u.Path = r.URL.Path</div><div class="line">			arg := url.Values&#123;&#125;</div><div class="line">			<span class="keyword">if</span> c := r.FormValue(<span class="string">"collection"</span>); c != <span class="string">""</span> &#123;</div><div class="line">				arg.Set(<span class="string">"collection"</span>, c)</div><div class="line">			&#125;</div><div class="line">			u.RawQuery = arg.Encode()</div><div class="line">			http.Redirect(w, r, u.String(), http.StatusMovedPermanently)</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			glog.V(<span class="number">2</span>).Infoln(<span class="string">"lookup error:"</span>, err, r.URL.Path)</div><div class="line">			w.WriteHeader(http.StatusNotFound)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>在volume_read_write.go 中,调用readNeedle,通过已知的n.Id ,获取存储的needle信息,操作在needle_map_memory.go 中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nm *NeedleMap)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">uint64</span>)</span> <span class="params">(element *NeedleValue, ok <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	element, ok = nm.m.Get(Key(key))</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(dlv) p element</div><div class="line">*github.com/chrislusf/seaweedfs/weed/storage.NeedleValue &#123;Key: 1050766, Offset: 1, Size: 529810&#125;</div></pre></td></tr></table></figure>
<p>与上传信息对比<br>上传时返回信息:<br>{“fid”:”27542,10088ee11dccb9”,”fileName”:”raft.pdf”,”fileUrl”:”127.0.0.1:8080/27542,10088ee11dccb9”,”size”:529766}<br>此时信息<br>{Key: 1050766, Offset: 1, Size: 529810}<br>存储时以needle为单位,增加的大小为needle中其他数据的大小,如n.Id,n.Cookie</p>
<p>获取数据<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Needle)</span> <span class="title">ReadData</span><span class="params">(r *os.File, offset <span class="keyword">int64</span>, size <span class="keyword">uint32</span>, version Version)</span> <span class="params">(err error)</span></span> &#123;</div><div class="line">	bytes, block, err := ReadNeedleBlob(r, offset, size)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	n.rawBlock = block</div><div class="line">	n.ParseNeedleHeader(bytes)</div><div class="line">	<span class="keyword">if</span> n.Size != size &#123;</div><div class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"File Entry Not Found. Needle %d Memory %d"</span>, n.Size, size)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span> version &#123;</div><div class="line">	<span class="keyword">case</span> Version1:</div><div class="line">		n.Data = bytes[NeedleHeaderSize : NeedleHeaderSize+size]</div><div class="line">	<span class="keyword">case</span> Version2:</div><div class="line">		n.readNeedleDataVersion2(bytes[NeedleHeaderSize : NeedleHeaderSize+<span class="keyword">int</span>(n.Size)])  <span class="comment">// 从bytes中读取存储数据,并设置needle的属性</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> size == <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">	checksum := util.BytesToUint32(bytes[NeedleHeaderSize+size : NeedleHeaderSize+size+NeedleChecksumSize])</div><div class="line">	newChecksum := NewCRC(n.Data)</div><div class="line">	<span class="keyword">if</span> checksum != newChecksum.Value() &#123;</div><div class="line">		<span class="keyword">return</span> errors.New(<span class="string">"CRC error! Data On Disk Corrupted"</span>)</div><div class="line">	&#125;</div><div class="line">	n.Checksum = newChecksum</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Needle)</span> <span class="title">readNeedleDataVersion2</span><span class="params">(bytes []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">	index, lenBytes := <span class="number">0</span>, <span class="built_in">len</span>(bytes)</div><div class="line">	<span class="keyword">if</span> index &lt; lenBytes &#123;</div><div class="line">		n.DataSize = util.BytesToUint32(bytes[index : index+<span class="number">4</span>])</div><div class="line">		index = index + <span class="number">4</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(n.DataSize)+index &gt; lenBytes &#123;</div><div class="line">			<span class="comment">// this if clause is due to bug #87 and #93, fixed in v0.69</span></div><div class="line">			<span class="comment">// remove this clause later</span></div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		n.Data = bytes[index : index+<span class="keyword">int</span>(n.DataSize)]</div><div class="line">		index = index + <span class="keyword">int</span>(n.DataSize)</div><div class="line">		n.Flags = bytes[index]</div><div class="line">		index = index + <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> index &lt; lenBytes &amp;&amp; n.HasName() &#123;</div><div class="line">		n.NameSize = <span class="keyword">uint8</span>(bytes[index])</div><div class="line">		index = index + <span class="number">1</span></div><div class="line">		n.Name = bytes[index : index+<span class="keyword">int</span>(n.NameSize)]</div><div class="line">		index = index + <span class="keyword">int</span>(n.NameSize)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> index &lt; lenBytes &amp;&amp; n.HasMime() &#123;</div><div class="line">		n.MimeSize = <span class="keyword">uint8</span>(bytes[index])</div><div class="line">		index = index + <span class="number">1</span></div><div class="line">		n.Mime = bytes[index : index+<span class="keyword">int</span>(n.MimeSize)]</div><div class="line">		index = index + <span class="keyword">int</span>(n.MimeSize)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> index &lt; lenBytes &amp;&amp; n.HasLastModifiedDate() &#123;</div><div class="line">		n.LastModified = util.BytesToUint64(bytes[index : index+LastModifiedBytesLength])</div><div class="line">		index = index + LastModifiedBytesLength</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> index &lt; lenBytes &amp;&amp; n.HasTtl() &#123;</div><div class="line">		n.Ttl = LoadTTLFromBytes(bytes[index : index+TtlBytesLength])</div><div class="line">		index = index + TtlBytesLength</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据请求URL中带有的fid, 解析,得到n.Id, n.Cookie,其中,n.Id 作为needle的唯一标识,在NeedleMapper中找到存储的needle信息,n.Cookie 作为数据验证信息,若找到的needle中的cookie于URL中的cookie不一致,返回错误信息.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GET 文件请求&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读7-文件存储过程</title>
    <link href="https://makeitpossible16.github.io/2016/12/13/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB7-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://makeitpossible16.github.io/2016/12/13/seaweedfs源码阅读7-文件存储过程/</id>
    <published>2016-12-13T00:00:00.000Z</published>
    <updated>2016-12-15T03:13:10.345Z</updated>
    
    <content type="html"><![CDATA[<p>文件在volume_server_handlers_write.go 中的topology.ReplicatedWrite中以needle的形式存储,在store.go 的Write方法中调用writeNeedle写入文件.<br>写入时使用append的方法,在文件中追加<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// needle_read_write.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Needle)</span> <span class="title">Append</span><span class="params">(w io.Writer, version Version)</span> <span class="params">(size <span class="keyword">uint32</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> s, ok := w.(io.Seeker); ok &#123;</div><div class="line">		<span class="keyword">if</span> end, e := s.Seek(<span class="number">0</span>, <span class="number">1</span>); e == <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(s io.Seeker, off <span class="keyword">int64</span>)</span></span> &#123;</div><div class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">if</span> _, e = s.Seek(off, <span class="number">0</span>); e != <span class="literal">nil</span> &#123;</div><div class="line">						glog.V(<span class="number">0</span>).Infof(<span class="string">"Failed to seek %s back to %d with error: %v"</span>, w, off, e)</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;(s, end)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			err = fmt.Errorf(<span class="string">"Cannot Read Current Volume Position: %v"</span>, e)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">switch</span> version &#123;</div><div class="line">	<span class="keyword">case</span> Version1:</div><div class="line">		header := <span class="built_in">make</span>([]<span class="keyword">byte</span>, NeedleHeaderSize)</div><div class="line">		util.Uint32toBytes(header[<span class="number">0</span>:<span class="number">4</span>], n.Cookie)</div><div class="line">		util.Uint64toBytes(header[<span class="number">4</span>:<span class="number">12</span>], n.Id)</div><div class="line">		n.Size = <span class="keyword">uint32</span>(<span class="built_in">len</span>(n.Data))</div><div class="line">		size = n.Size</div><div class="line">		util.Uint32toBytes(header[<span class="number">12</span>:<span class="number">16</span>], n.Size)</div><div class="line">		<span class="keyword">if</span> _, err = w.Write(header); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> _, err = w.Write(n.Data); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		padding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)</div><div class="line">		util.Uint32toBytes(header[<span class="number">0</span>:NeedleChecksumSize], n.Checksum.Value())</div><div class="line">		_, err = w.Write(header[<span class="number">0</span> : NeedleChecksumSize+padding])</div><div class="line">		<span class="keyword">return</span></div><div class="line">	<span class="keyword">case</span> Version2:</div><div class="line">		header := <span class="built_in">make</span>([]<span class="keyword">byte</span>, NeedleHeaderSize)</div><div class="line">		util.Uint32toBytes(header[<span class="number">0</span>:<span class="number">4</span>], n.Cookie)</div><div class="line">		util.Uint64toBytes(header[<span class="number">4</span>:<span class="number">12</span>], n.Id)</div><div class="line">		n.DataSize, n.NameSize, n.MimeSize = <span class="keyword">uint32</span>(<span class="built_in">len</span>(n.Data)), <span class="keyword">uint8</span>(<span class="built_in">len</span>(n.Name)), <span class="keyword">uint8</span>(<span class="built_in">len</span>(n.Mime))</div><div class="line">		<span class="keyword">if</span> n.DataSize &gt; <span class="number">0</span> &#123;</div><div class="line">			n.Size = <span class="number">4</span> + n.DataSize + <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> n.HasName() &#123;</div><div class="line">				n.Size = n.Size + <span class="number">1</span> + <span class="keyword">uint32</span>(n.NameSize)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasMime() &#123;</div><div class="line">				n.Size = n.Size + <span class="number">1</span> + <span class="keyword">uint32</span>(n.MimeSize)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasLastModifiedDate() &#123;</div><div class="line">				n.Size = n.Size + LastModifiedBytesLength</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasTtl() &#123;</div><div class="line">				n.Size = n.Size + TtlBytesLength</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			n.Size = <span class="number">0</span></div><div class="line">		&#125;</div><div class="line">		size = n.DataSize</div><div class="line">		util.Uint32toBytes(header[<span class="number">12</span>:<span class="number">16</span>], n.Size)</div><div class="line">		<span class="keyword">if</span> _, err = w.Write(header); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> n.DataSize &gt; <span class="number">0</span> &#123;</div><div class="line">			util.Uint32toBytes(header[<span class="number">0</span>:<span class="number">4</span>], n.DataSize)</div><div class="line">			<span class="keyword">if</span> _, err = w.Write(header[<span class="number">0</span>:<span class="number">4</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> _, err = w.Write(n.Data); err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">			util.Uint8toBytes(header[<span class="number">0</span>:<span class="number">1</span>], n.Flags)</div><div class="line">			<span class="keyword">if</span> _, err = w.Write(header[<span class="number">0</span>:<span class="number">1</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasName() &#123;</div><div class="line">				util.Uint8toBytes(header[<span class="number">0</span>:<span class="number">1</span>], n.NameSize)</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(header[<span class="number">0</span>:<span class="number">1</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(n.Name); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasMime() &#123;</div><div class="line">				util.Uint8toBytes(header[<span class="number">0</span>:<span class="number">1</span>], n.MimeSize)</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(header[<span class="number">0</span>:<span class="number">1</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(n.Mime); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasLastModifiedDate() &#123;</div><div class="line">				util.Uint64toBytes(header[<span class="number">0</span>:<span class="number">8</span>], n.LastModified)</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(header[<span class="number">8</span>-LastModifiedBytesLength : <span class="number">8</span>]); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> n.HasTtl() &amp;&amp; n.Ttl != <span class="literal">nil</span> &#123;</div><div class="line">				n.Ttl.ToBytes(header[<span class="number">0</span>:TtlBytesLength])</div><div class="line">				<span class="keyword">if</span> _, err = w.Write(header[<span class="number">0</span>:TtlBytesLength]); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		padding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)</div><div class="line">		util.Uint32toBytes(header[<span class="number">0</span>:NeedleChecksumSize], n.Checksum.Value())</div><div class="line">		_, err = w.Write(header[<span class="number">0</span> : NeedleChecksumSize+padding])</div><div class="line">		<span class="keyword">return</span> n.DataSize, err</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"Unsupported Version! (%d)"</span>, version)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件在volume_server_handlers_write.go 中的topology.ReplicatedWrite中以needle的形式存储,在store.go 的Write方法中调用writeNeedle写入文件.&lt;br&gt;写入时使用append的方法,在文件中追加
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读6-文件存储格式</title>
    <link href="https://makeitpossible16.github.io/2016/12/12/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB6-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"/>
    <id>https://makeitpossible16.github.io/2016/12/12/seaweedfs源码阅读6-文件存储格式/</id>
    <published>2016-12-12T00:00:00.000Z</published>
    <updated>2016-12-13T03:26:44.809Z</updated>
    
    <content type="html"><![CDATA[<p>使用put 上传文件到seaweedfs , 具体显示结果<br><img src="http://oh56h8a9l.bkt.clouddn.com/seaweedfs源码阅读6-20161212.png" alt="seaweedfs源码阅读6-20161212"></p>
<p>上传的所有文件都以单个文件进行存储,后缀为 .dat 和 .idx<br><img src="http://oh56h8a9l.bkt.clouddn.com/seaweefs源码阅读6-2-20161212.png" alt="seaweefs源码阅读6-2-20161212"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用put 上传文件到seaweedfs , 具体显示结果&lt;br&gt;&lt;img src=&quot;http://oh56h8a9l.bkt.clouddn.com/seaweedfs源码阅读6-20161212.png&quot; alt=&quot;seaweedfs源码阅读6-20161212&quot;&gt;&lt;/
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读5-文件PUT过程</title>
    <link href="https://makeitpossible16.github.io/2016/12/11/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB5-%E6%96%87%E4%BB%B6PUT%E8%BF%87%E7%A8%8B/"/>
    <id>https://makeitpossible16.github.io/2016/12/11/seaweedfs源码阅读5-文件PUT过程/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2016-12-11T13:30:05.384Z</updated>
    
    <content type="html"><![CDATA[<p>使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; curl -X POST http://localhost:9333/dir/assign</div><div class="line">&#123;<span class="string">"count"</span>:1,<span class="string">"fid"</span>:<span class="string">"3,01637037d6"</span>,<span class="string">"url"</span>:<span class="string">"127.0.0.1:8080"</span>,<span class="string">"publicUrl"</span>:<span class="string">"localhost:8080"</span>&#125;</div><div class="line">&gt; curl -X PUT -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6</div><div class="line">&#123;<span class="string">"size"</span>: 43234&#125;</div></pre></td></tr></table></figure></p>
<p>上传文件,程序调用volume_server_handlers_write.go 中的PostHandler进行处理,根据URL,提取vid,生成新的volumeId<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vid, _, _, _, _ := parseURLPath(r.URL.Path) <span class="comment">//vid 为3</span></div><div class="line">volumeId, ve := storage.NewVolumeId(vid) <span class="comment">// volumeId : 7</span></div></pre></td></tr></table></figure></p>
<p>根据请求参数,生成needle<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">needle, ne := storage.NewNeedle(r, vs.FixJpgOrientation)</div></pre></td></tr></table></figure></p>
<p>使用multipartReader读取请求中的数据,有关multipart的介绍: <a href="http://wanlitian.github.io/2014/11/16/multipart_with_golang/" target="_blank" rel="external">golang的multipart包</a><br>使用needle.go 中的ParseUpload方法解析请求,得到上传的文件名和数据;<br>如果上传的数据类型是JPG或jpeg,调用 images.FixJpgOrientation(n.Data)对数据进行处理<br>生成needle过程<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewNeedle</span><span class="params">(r *http.Request, fixJpgOrientation <span class="keyword">bool</span>)</span> <span class="params">(n *Needle, e error)</span></span> &#123;</div><div class="line">	fname, mimeType, isGzipped, isChunkedFile := <span class="string">""</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="literal">false</span></div><div class="line">	n = <span class="built_in">new</span>(Needle)</div><div class="line">	fname, n.Data, mimeType, isGzipped, n.LastModified, n.Ttl, isChunkedFile, e = ParseUpload(r)</div><div class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(fname) &lt; <span class="number">256</span> &#123;</div><div class="line">		n.Name = []<span class="keyword">byte</span>(fname)</div><div class="line">		n.SetHasName()</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mimeType) &lt; <span class="number">256</span> &#123;</div><div class="line">		n.Mime = []<span class="keyword">byte</span>(mimeType)</div><div class="line">		n.SetHasMime()</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> isGzipped &#123;</div><div class="line">		n.SetGzipped()</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> n.LastModified == <span class="number">0</span> &#123;</div><div class="line">		n.LastModified = <span class="keyword">uint64</span>(time.Now().Unix())</div><div class="line">	&#125;</div><div class="line">	n.SetHasLastModifiedDate()</div><div class="line">	<span class="keyword">if</span> n.Ttl != EMPTY_TTL &#123;</div><div class="line">		n.SetHasTtl()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> isChunkedFile &#123;</div><div class="line">		n.SetIsChunkManifest()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> fixJpgOrientation &#123;</div><div class="line">		loweredName := strings.ToLower(fname)</div><div class="line">		<span class="keyword">if</span> mimeType == <span class="string">"image/jpeg"</span> || strings.HasSuffix(loweredName, <span class="string">".jpg"</span>) || strings.HasSuffix(loweredName, <span class="string">".jpeg"</span>) &#123;</div><div class="line">			n.Data = images.FixJpgOrientation(n.Data)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	n.Checksum = NewCRC(n.Data)</div><div class="line"></div><div class="line">	commaSep := strings.LastIndex(r.URL.Path, <span class="string">","</span>)</div><div class="line">	dotSep := strings.LastIndex(r.URL.Path, <span class="string">"."</span>)</div><div class="line">	fid := r.URL.Path[commaSep+<span class="number">1</span>:]</div><div class="line">	<span class="keyword">if</span> dotSep &gt; <span class="number">0</span> &#123;</div><div class="line">		fid = r.URL.Path[commaSep+<span class="number">1</span> : dotSep]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	e = n.ParsePath(fid)</div><div class="line"></div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把数据及needle相关属性填充完成后,同步到其他volumeServer中,已needle作为传输载体<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">size, errorStatus := topology.ReplicatedWrite(vs.GetMasterNode(),vs.store, volumeId, needle, r)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读4-volume启动过程</title>
    <link href="https://makeitpossible16.github.io/2016/12/11/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB4-volume%E5%90%AF%E5%8A%A8/"/>
    <id>https://makeitpossible16.github.io/2016/12/11/seaweedfs源码阅读4-volume启动/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2016-12-11T04:47:50.162Z</updated>
    
    <content type="html"><![CDATA[<p>根据文章<a href="http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">使用delve调试Golang程序技巧</a><br>使用go install -gcflags “-N -l” weed.go 对程序进行重新编译,方便调试</p>
<p>通过weed.go 调用volume.go ,参数处理完成后,生成一个ServeMux实例,有关<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/03.4.md" target="_blank" rel="external">go http ServeMux介绍</a>,<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">volumeMux := http.NewServeMux()</div><div class="line">publicVolumeMux := volumeMux</div><div class="line"><span class="keyword">if</span> isSeperatedPublicPort &#123;</div><div class="line">	publicVolumeMux = http.NewServeMux()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据参数VolumeServerOptions 中的 indexType,选择volume Needle Map 的存储位置,默认使用内存<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">volumeNeedleMapKind := storage.NeedleMapInMemory</div><div class="line"><span class="keyword">switch</span> *v.indexType &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"leveldb"</span>:</div><div class="line">  volumeNeedleMapKind = storage.NeedleMapLevelDb</div><div class="line"><span class="keyword">case</span> <span class="string">"boltdb"</span>:</div><div class="line">  volumeNeedleMapKind = storage.NeedleMapBoltDb</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调试信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(dlv) p *v.indexType</div><div class="line"><span class="string">"memory"</span></div></pre></td></tr></table></figure></p>
<p>根据参数生成volumeServer,使用volume_server.go 中的NewVolumeServer 生成volumeServer<br>在volume_server.go 中,设置masterNode ,store, guard<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vs.SetMasterNode(masterNode)</div><div class="line">vs.store = storage.NewStore(port, ip, publicUrl, folders, maxCounts, vs.needleMapKind)</div><div class="line"></div><div class="line">vs.guard = security.NewGuard(whiteList, <span class="string">""</span>)</div></pre></td></tr></table></figure></p>
<p>生成store时会加载已有的volume<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// store.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStore</span><span class="params">(port <span class="keyword">int</span>, ip, publicUrl <span class="keyword">string</span>, dirnames []<span class="keyword">string</span>, maxVolumeCounts []<span class="keyword">int</span>, needleMapKind NeedleMapType)</span> <span class="params">(s *Store)</span></span> &#123;</div><div class="line">	s = &amp;Store&#123;Port: port, Ip: ip, PublicUrl: publicUrl&#125;</div><div class="line">	s.Locations = <span class="built_in">make</span>([]*DiskLocation, <span class="number">0</span>)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(dirnames); i++ &#123;</div><div class="line">		location := NewDiskLocation(dirnames[i], maxVolumeCounts[i])</div><div class="line">		location.loadExistingVolumes(needleMapKind)</div><div class="line">		s.Locations = <span class="built_in">append</span>(s.Locations, location)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据文章&lt;a href=&quot;http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>golang调试技巧</title>
    <link href="https://makeitpossible16.github.io/2016/12/10/golang%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://makeitpossible16.github.io/2016/12/10/golang调试技巧/</id>
    <published>2016-12-10T00:00:00.000Z</published>
    <updated>2016-12-11T02:52:49.574Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读seaweedfs过程中,发现对于复杂程序,跟踪调试相当困难,不过,在看了<a href="http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">使用delve调试Golang程序技巧</a>这篇文章后,调试问题得到很好的改善.</p>
<p>首先,liteIDE简直让人眼前一亮,使用它并结合delve实现图形化界面调试,使用命令行多少有点不太方便,特别是当你想在源码中加入注释的时候.</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ol>
<li><p>安装delve,liteIDE</p>
</li>
<li><p>加入参数关闭编译器优化,如 go install -gcflags “-N -l” 程序名称</p>
</li>
<li><p>按照文章<a href="http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">使用delve调试Golang程序技巧</a>, 调试外部程序</p>
</li>
<li><p>调试启动后,可在Console设置断点, 命令为 : b packageName.functionName 或 b lineNum</p>
</li>
<li><p>使用命令c ,运行到断点停止,进行操作,具体命令可参照delve</p>
</li>
</ol>
<p>还不清楚liteIDE能不能使用delve 进行图形化attach,如果可以就非常完美</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读seaweedfs过程中,发现对于复杂程序,跟踪调试相当困难,不过,在看了&lt;a href=&quot;http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;amp;u
    
    </summary>
    
      <category term="go" scheme="https://makeitpossible16.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 反射机制</title>
    <link href="https://makeitpossible16.github.io/2016/12/02/golang%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://makeitpossible16.github.io/2016/12/02/golang 反射机制/</id>
    <published>2016-12-02T00:00:00.000Z</published>
    <updated>2016-12-04T07:55:20.022Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读seaweedfs过程中,当程序在运行过程中,想要进行跟踪调试不好实现,目前也没找到很好的解决方案,只能跟踪程序的启动过程.不过回归最原始的方法,使用printf倒是可以查看变量的值,因此打算编写程序,把struct中的变量转化为json,发送给搭建的服务器,实现查看struct变量的方法.其中就了解到go的反射机制.</p>
<p><a href="https://blog.golang.org/laws-of-reflection" target="_blank" rel="external">laws-of-reflection</a><br><a href="http://blog.csdn.net/liuxinmingcode/article/details/50480097" target="_blank" rel="external">Golang之反射reflect包</a></p>
<p>使用反射可以得到struct中的变量及变量的值,前提是该变量是export的,即首字母大写,类似java中的public.    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读seaweedfs过程中,当程序在运行过程中,想要进行跟踪调试不好实现,目前也没找到很好的解决方案,只能跟踪程序的启动过程.不过回归最原始的方法,使用printf倒是可以查看变量的值,因此打算编写程序,把struct中的变量转化为json,发送给搭建的服务器,实现查看
    
    </summary>
    
      <category term="go" scheme="https://makeitpossible16.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang学习</title>
    <link href="https://makeitpossible16.github.io/2016/11/29/golang%E5%AD%A6%E4%B9%A0/"/>
    <id>https://makeitpossible16.github.io/2016/11/29/golang学习/</id>
    <published>2016-11-29T00:00:00.000Z</published>
    <updated>2016-12-15T03:15:17.470Z</updated>
    
    <content type="html"><![CDATA[<p>在看seaweedfs过程中遇到的go 语法,不会的记录一下.</p>
<h2 id="interface-是一组method的组合-通过interface来定义对象的一组行为"><a href="#interface-是一组method的组合-通过interface来定义对象的一组行为" class="headerlink" title="interface: 是一组method的组合,通过interface来定义对象的一组行为."></a>interface: 是一组method的组合,通过interface来定义对象的一组行为.</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Sequencer <span class="keyword">interface</span> &#123;</div><div class="line">	NextFileId(count <span class="keyword">uint64</span>) (<span class="keyword">uint64</span>, <span class="keyword">uint64</span>)</div><div class="line">	SetMax(<span class="keyword">uint64</span>)</div><div class="line">	Peek() <span class="keyword">uint64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="go-map"><a href="#go-map" class="headerlink" title="go map"></a>go map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t.children = <span class="built_in">make</span>(<span class="keyword">map</span>[NodeId]Node)  <span class="comment">// NodeId --&gt; Node</span></div></pre></td></tr></table></figure>
<h2 id="go-sync-RWMutex和sync-Mutex"><a href="#go-sync-RWMutex和sync-Mutex" class="headerlink" title="go sync.RWMutex和sync.Mutex"></a>go <a href="http://studygolang.com/articles/3373" target="_blank" rel="external">sync.RWMutex和sync.Mutex</a></h2><p>golang中sync包实现了两种锁Mutex （互斥锁）和RWMutex（读写锁），其中RWMutex是基于Mutex实现的，只读锁的实现使用类似引用计数器的功能．<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Mutex</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">Lock</span><span class="params">()</span></span></div><div class="line">    <span class="title">func</span> <span class="params">(m *Mutex)</span> <span class="title">Unlock</span><span class="params">()</span></div></pre></td></tr></table></figure></p>
<p>Mutex为互斥锁，Lock()加锁，Unlock()解锁，使用Lock()加锁后，便不能再次对其进行加锁，直到利用Unlock()解锁对其解锁后，才能再次加锁．适用于读写不确定场景，即读写次数没有明显的区别，并且只允许只有一个读或者写的场景，所以该锁也叫做全局锁．</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> RWMutex</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span><span class="params">()</span></span></div><div class="line">    <span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span><span class="params">()</span></div><div class="line">    <span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLocker</span><span class="params">()</span> <span class="title">Locker</span></div><div class="line">    <span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span><span class="params">()</span></div><div class="line">    <span class="title">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span><span class="params">()</span></div></pre></td></tr></table></figure>
<p>func (rw <em>RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定<br> func (rw </em>RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误．<br> func (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</p>
<p>func (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次 RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。</p>
<h2 id="go-Routine和Channel"><a href="#go-Routine和Channel" class="headerlink" title="go Routine和Channel"></a>go Routine和Channel</h2><p><a href="http://blog.csdn.net/colouful987/article/details/45190319" target="_blank" rel="external">go学习笔记_Routine和Channel上</a></p>
<p>goroutine 类似开辟进程、线程做法<br>语法：</p>
<pre><code>1. 定义一个函数functionName，要异步调用时使用语句go functionName即可。

2. 使用匿名函数，用法为go func(参数列表){函数执行体}()，说明最后一个()作用就是让该函数执行。
</code></pre><p>代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/////////第一种示例代码：///////////</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</div><div class="line">    fmt.Println(<span class="string">"hello"</span>+name)</div><div class="line">&#125;</div><div class="line"><span class="comment">//主程序入口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">go</span> sayHello(<span class="string">"PMST"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">/////////第二种示例代码：//////////</span></div><div class="line"><span class="comment">//主程序入口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">        fmt.Println(<span class="string">"hello world"</span>)</div><div class="line">    &#125;()     <span class="comment">//别忘记这里的()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦将go放在函数之前，意味分配一个子routine让这个函数自个玩去(有点自身自灭的感觉),而主routine则继续该干嘛干嘛。</p>
<p>channel<br>goroutine 之间进行数据通信方式：</p>
<ol>
<li>共用内存内存空间。</li>
<li>Go语言推荐的通信机制channel。</li>
</ol>
<p>通过make来创建channel,例如<br>无缓存ci := make(chan int),<br>指定缓存cib := make(chan int,2)。给这个通道分类了2个缓存空间</p>
<p>通道的接收和发送都是阻塞的，除非与之对应的一端已经准备好<br>阻塞状态：</p>
<ol>
<li>数据写入channel（或缓存已满）却没读出</li>
<li>channel中没有数据，读channel会阻塞。</li>
</ol>
<h2 id="go反引号"><a href="#go反引号" class="headerlink" title="go反引号"></a>go反引号</h2><p>参考文章:<a href="http://studygolang.com/articles/2553" target="_blank" rel="external">GoLang获取struct的tag</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> AppendEntriesRequest <span class="keyword">struct</span> &#123;</div><div class="line">	Term             *<span class="keyword">uint64</span>     <span class="string">`protobuf:"varint,1,req" json:"Term,omitempty"`</span></div><div class="line">	PrevLogIndex     *<span class="keyword">uint64</span>     <span class="string">`protobuf:"varint,2,req" json:"PrevLogIndex,omitempty"`</span></div><div class="line">	PrevLogTerm      *<span class="keyword">uint64</span>     <span class="string">`protobuf:"varint,3,req" json:"PrevLogTerm,omitempty"`</span></div><div class="line">	CommitIndex      *<span class="keyword">uint64</span>     <span class="string">`protobuf:"varint,4,req" json:"CommitIndex,omitempty"`</span></div><div class="line">	LeaderName       *<span class="keyword">string</span>     <span class="string">`protobuf:"bytes,5,req" json:"LeaderName,omitempty"`</span></div><div class="line">	Entries          []*LogEntry <span class="string">`protobuf:"bytes,6,rep" json:"Entries,omitempty"`</span></div><div class="line">	XXX_unrecognized []<span class="keyword">byte</span>      <span class="string">`json:"-"`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中,反引号表示字符串,struct后面的字符串用于reflect,具体用法<br>s := AppendEntriesRequest{}<br>st := reflect.TypeOf(s)<br>field := st.Field(0)<br>field.Tag.Get(“protobuf”) // varint,1,req<br>field.Tag.Get(“json”) // Term,omitempty</p>
<h2 id="go-get-安装程序错误"><a href="#go-get-安装程序错误" class="headerlink" title="go get 安装程序错误"></a>go get 安装程序错误</h2><p>错误提示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unrecognized import path <span class="string">"code.google.com/p/goprotobuf/proto"</span></div><div class="line"></div><div class="line">parse https://code.google.com/p/goprotobuf?go-get=1: no go-import meta tags</div></pre></td></tr></table></figure></p>
<p>错误原因:依赖包已从code.google.com移除, 已重定向到github.com/golang/protobuf/proto,修改程序中的代码即可</p>
<h2 id="strconv-ParseInt-s-string-base-int-bitSize-int-i-int64-err-error-或strconv-ParseUint"><a href="#strconv-ParseInt-s-string-base-int-bitSize-int-i-int64-err-error-或strconv-ParseUint" class="headerlink" title="strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)  或strconv.ParseUint"></a>strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)  或strconv.ParseUint</h2><p>把字符串转换为整数,<br>参数1 数字的字符串形式</p>
<p>参数2 数字字符串的进制 比如二进制 八进制 十进制 十六进制</p>
<p>参数3 返回结果的bit大小 也就是int8 int16 int32 int64</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看seaweedfs过程中遇到的go 语法,不会的记录一下.&lt;/p&gt;
&lt;h2 id=&quot;interface-是一组method的组合-通过interface来定义对象的一组行为&quot;&gt;&lt;a href=&quot;#interface-是一组method的组合-通过interface来定义
    
    </summary>
    
      <category term="go" scheme="https://makeitpossible16.github.io/categories/go/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读记录3-raft协议理解</title>
    <link href="https://makeitpossible16.github.io/2016/11/28/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%953-raft%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3/"/>
    <id>https://makeitpossible16.github.io/2016/11/28/seaweedfs源码阅读记录3-raft协议理解/</id>
    <published>2016-11-28T00:00:00.000Z</published>
    <updated>2016-12-03T15:29:42.344Z</updated>
    
    <content type="html"><![CDATA[<p>raft用于seaweedfs的多个master server间进行leader选举,选出leader对其他master server进行管理.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/cszhouwei/article/details/38374603" target="_blank" rel="external">Raft一致性算法</a><br><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="external">raft动画演示</a><br><a href="https://raft.github.io/" target="_blank" rel="external">raft介绍</a><br><a href="https://ayende.com/blog/165858/reviewing-go-raft-part-i" target="_blank" rel="external">go-raft源码解析</a><br><a href="https://godoc.org/github.com/coreos/etcd/raft" target="_blank" rel="external">go-raft文档</a><br><a href="https://github.com/goraft/raftd" target="_blank" rel="external">goraft的简单实现</a></p>
<h2 id="阅读记录"><a href="#阅读记录" class="headerlink" title="阅读记录"></a>阅读记录</h2><p>本文按照参考文章中的go-raft源码解析中的文章阅读,记录阅读过程.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The request sent to a server to append entries to the log.</span></div><div class="line"><span class="keyword">type</span> AppendEntriesRequest <span class="keyword">struct</span> &#123;</div><div class="line">	Term         <span class="keyword">uint64</span></div><div class="line">	PrevLogIndex <span class="keyword">uint64</span></div><div class="line">	PrevLogTerm  <span class="keyword">uint64</span></div><div class="line">	CommitIndex  <span class="keyword">uint64</span></div><div class="line">	LeaderName   <span class="keyword">string</span></div><div class="line">	Entries      []*protobuf.LogEntry  <span class="comment">// 定义在protobuf中的LogEntry</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The response returned from a server appending entries to the log.</span></div><div class="line"><span class="keyword">type</span> AppendEntriesResponse <span class="keyword">struct</span> &#123;</div><div class="line">	pb     *protobuf.AppendEntriesResponse</div><div class="line">	peer   <span class="keyword">string</span></div><div class="line">	<span class="built_in">append</span> <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;raft用于seaweedfs的多个master server间进行leader选举,选出leader对其他master server进行管理.&lt;/p&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
      <category term="raft" scheme="https://makeitpossible16.github.io/tags/raft/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读记录1</title>
    <link href="https://makeitpossible16.github.io/2016/11/22/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://makeitpossible16.github.io/2016/11/22/seaweedfs源码阅读记录/</id>
    <published>2016-11-22T00:00:00.000Z</published>
    <updated>2016-12-26T14:43:32.666Z</updated>
    
    <content type="html"><![CDATA[<p>接下来的日子都会抽出部分时间学习文件存储,目标是修改openstack-swift的源码,通过源码学习文件存储知识.目前学习对象:<a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="external">seaweedfs</a>.</p>
<h2 id="目标-学习seaweedfs-的文件合并存储"><a href="#目标-学习seaweedfs-的文件合并存储" class="headerlink" title="目标:学习seaweedfs 的文件合并存储"></a>目标:学习seaweedfs 的文件合并存储</h2><p>文件合并后必然会带来的一堆问题待解决,比如文件索引,响应速率等.</p>
<h2 id="学习方式-google-调试"><a href="#学习方式-google-调试" class="headerlink" title="学习方式: google + 调试"></a>学习方式: google + 调试</h2><p>github 上能找到项目的wiki文档,会介绍简单的使用.调试方案: IDEA/pycharm , 需要结合atom/vscode 的delve调试go程序,各有利弊,结合使用.</p>
<h2 id="测试用命令"><a href="#测试用命令" class="headerlink" title="测试用命令"></a>测试用命令</h2><p>启动:<br>master : weed master -mdir=/home/ubuntu/weedfs<br>volume : weed volume -dir=”/home/ubuntu/weedfs/data1” -mserver=”localhost:9333”  -port=8080<br>使用:<br>curl -X POST <a href="http://localhost:9333/dir/assign" target="_blank" rel="external">http://localhost:9333/dir/assign</a> 获取fid</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://yanyiwu.com/work/2015/01/09/weed-fs-source-analysis.html" target="_blank" rel="external">分布式存储Seaweedfs源码分析</a></p>
<p><a href="http://tonybai.com/2015/08/22/intro-of-using-weedfs/" target="_blank" rel="external">tonybai的个人blog</a></p>
<p><a href="http://www.tuicool.com/articles/yyUr2e" target="_blank" rel="external">weed-fs 源码解读—分布式处理过程</a></p>
<p><a href="http://blog.csdn.net/baogang409/article/details/42105367" target="_blank" rel="external">weed-fs 源码解读</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来的日子都会抽出部分时间学习文件存储,目标是修改openstack-swift的源码,通过源码学习文件存储知识.目前学习对象:&lt;a href=&quot;https://github.com/chrislusf/seaweedfs&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>seaweedfs源码阅读记录2</title>
    <link href="https://makeitpossible16.github.io/2016/11/22/seaweedfs%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%952/"/>
    <id>https://makeitpossible16.github.io/2016/11/22/seaweedfs源码阅读记录2/</id>
    <published>2016-11-22T00:00:00.000Z</published>
    <updated>2016-11-28T11:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="master启动过程"><a href="#master启动过程" class="headerlink" title="master启动过程"></a>master启动过程</h2><p>使用pycharm , 入口为weed.go, 根据参数调用command文件夹下的文件.<br>opology 核心模块，主要包括 【DataCenter, Rack, DataNode】 三层拓扑结构,<br>参考文章： <a href="http://blog.csdn.net/baogang409/article/details/42105367" target="_blank" rel="external">weed-fs 源码解读</a></p>
<p><img src="http://oh56h8a9l.bkt.clouddn.com/master启动-20161128.svg" alt="master启动-20161128"><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Sequencer <span class="keyword">interface</span> &#123;</div><div class="line">	NextFileId(count <span class="keyword">uint64</span>) (<span class="keyword">uint64</span>, <span class="keyword">uint64</span>)</div><div class="line">	SetMax(<span class="keyword">uint64</span>)</div><div class="line">	Peek() <span class="keyword">uint64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>topology中包含Sequencer , sequence 负责FileID的全局有序生成</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Topology <span class="keyword">struct</span> &#123;</div><div class="line">	NodeImpl   <span class="comment">//指向NodeImpl对象，即Topology和node相互指向</span></div><div class="line"></div><div class="line">	collectionMap *util.ConcurrentReadMap</div><div class="line"></div><div class="line">	pulse <span class="keyword">int64</span></div><div class="line"></div><div class="line">	volumeSizeLimit <span class="keyword">uint64</span></div><div class="line"></div><div class="line">	Sequence sequence.Sequencer</div><div class="line"></div><div class="line">	chanDeadDataNodes      <span class="keyword">chan</span> *DataNode</div><div class="line">	chanRecoveredDataNodes <span class="keyword">chan</span> *DataNode</div><div class="line">	chanFullVolumes        <span class="keyword">chan</span> storage.VolumeInfo</div><div class="line"></div><div class="line">	configuration *Configuration</div><div class="line"></div><div class="line">	RaftServer raft.Server</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NodeImpl结构<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> NodeImpl <span class="keyword">struct</span> &#123;</div><div class="line">	id                NodeId</div><div class="line">	volumeCount       <span class="keyword">int</span></div><div class="line">	activeVolumeCount <span class="keyword">int</span></div><div class="line">	maxVolumeCount    <span class="keyword">int</span></div><div class="line">	parent            Node</div><div class="line">	sync.RWMutex      <span class="comment">// lock children</span></div><div class="line">	children          <span class="keyword">map</span>[NodeId]Node</div><div class="line">	maxVolumeId       storage.VolumeId</div><div class="line"></div><div class="line">	<span class="comment">//for rack, data center, topology</span></div><div class="line">	nodeType <span class="keyword">string</span></div><div class="line">	value    <span class="keyword">interface</span>&#123;&#125;  <span class="comment">//指向Topology对象，即Topology和node相互指向</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DataNode数据结构<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> DataNode <span class="keyword">struct</span> &#123;</div><div class="line">	NodeImpl</div><div class="line">	volumes   <span class="keyword">map</span>[storage.VolumeId]storage.VolumeInfo</div><div class="line">	Ip        <span class="keyword">string</span></div><div class="line">	Port      <span class="keyword">int</span></div><div class="line">	PublicUrl <span class="keyword">string</span></div><div class="line">	LastSeen  <span class="keyword">int64</span> <span class="comment">// unix time in seconds</span></div><div class="line">	Dead      <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> VolumeInfo <span class="keyword">struct</span> &#123;</div><div class="line">	Id               VolumeId</div><div class="line">	Size             <span class="keyword">uint64</span></div><div class="line">	ReplicaPlacement *ReplicaPlacement</div><div class="line">	Ttl              *TTL</div><div class="line">	Collection       <span class="keyword">string</span></div><div class="line">	Version          Version</div><div class="line">	FileCount        <span class="keyword">int</span></div><div class="line">	DeleteCount      <span class="keyword">int</span></div><div class="line">	DeletedByteCount <span class="keyword">uint64</span></div><div class="line">	ReadOnly         <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过RaftServer的raft协议，完成多个weedmaster间投票选leader的事情,<br>当启动多个ServerMaster时，它们之间会进行通信，通过raft协议选举出一个Leader，对所有的master进行管理。<br>weed-fs中，通过使用raftServer完成上述选举过程；而raftServer则是用到了第三方资源，即goRaft（参照<a href="http://ayende.com/blog/165858/reviewing-go-raft-part-i）。" target="_blank" rel="external">http://ayende.com/blog/165858/reviewing-go-raft-part-i）。</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> RaftServer <span class="keyword">struct</span> &#123;</div><div class="line">	peers      []<span class="keyword">string</span> <span class="comment">// initial peers to join with</span></div><div class="line">	raftServer raft.Server  <span class="comment">//使用goraft //type Server interface 包含实现raft的方法</span></div><div class="line">	dataDir    <span class="keyword">string</span></div><div class="line">	httpAddr   <span class="keyword">string</span></div><div class="line">	router     *mux.Router</div><div class="line">	topo       *topology.Topology</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;master启动过程&quot;&gt;&lt;a href=&quot;#master启动过程&quot; class=&quot;headerlink&quot; title=&quot;master启动过程&quot;&gt;&lt;/a&gt;master启动过程&lt;/h2&gt;&lt;p&gt;使用pycharm , 入口为weed.go, 根据参数调用command文
    
    </summary>
    
      <category term="文件存储" scheme="https://makeitpossible16.github.io/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="go" scheme="https://makeitpossible16.github.io/tags/go/"/>
    
      <category term="seaweedfs" scheme="https://makeitpossible16.github.io/tags/seaweedfs/"/>
    
  </entry>
  
  <entry>
    <title>nodeJS入门总结</title>
    <link href="https://makeitpossible16.github.io/2016/11/20/nodeJS%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://makeitpossible16.github.io/2016/11/20/nodeJS入门总结/</id>
    <published>2016-11-20T00:00:00.000Z</published>
    <updated>2016-11-24T14:55:44.836Z</updated>
    
    <content type="html"><![CDATA[<p>刚做完nodeJS的课设,写了个小程序,总结一下</p>
<h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><p>实现简单的电商网站,能登陆,注册,浏览商品,购物车操作.</p>
<h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><ol>
<li>nodeJS + Express + ejs</li>
<li>mongoDB + mongoose</li>
<li>bootstrap + jquery (前端页面是在网上找的,随便改了一下)</li>
</ol>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p><a href="https://github.com/MakeItPossible16/washingMachine.git" target="_blank" rel="external">github</a></p>
<h2 id="有关mongoose"><a href="#有关mongoose" class="headerlink" title="有关mongoose"></a>有关mongoose</h2><p>mongoose实现了把mongodb中的数据进行映射,可以直接使用mongoose对数据库进行操作,比较方便.使用嵌套document时,需要创建多个Schema(类似于Java中的POJO吧).<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> contactInformationSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">address</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">phone</span>: <span class="built_in">String</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> alreadyPaidSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">productID</span>: Schema.Types.ObjectId,</div><div class="line">    <span class="attr">price</span>: <span class="built_in">Number</span>,</div><div class="line">    <span class="attr">address</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">phone</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">userName</span>: <span class="built_in">String</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> unpaidSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">productID</span>: Schema.Types.ObjectId,</div><div class="line">    <span class="attr">price</span>: <span class="built_in">Number</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">username</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">password</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">contactInformation</span>: [contactInformationSchema],</div><div class="line">    <span class="attr">alreadyPaid</span>: [alreadyPaidSchema],</div><div class="line">    <span class="attr">unpaid</span>: [unpaidSchema]</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="有关nodeJS"><a href="#有关nodeJS" class="headerlink" title="有关nodeJS"></a>有关nodeJS</h2><p>最大的优点就是回调,实现网站的并发访问. 不过缺点也不少,可能是我经验不足,记录一下掉过的坑.</p>
<h3 id="1-回调-感觉就像是不负责任地甩锅"><a href="#1-回调-感觉就像是不负责任地甩锅" class="headerlink" title="1. 回调,感觉就像是不负责任地甩锅."></a>1. 回调,感觉就像是不负责任地甩锅.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">  test = array[i];</div><div class="line">  mongooseModel.find(&#123;<span class="string">"something"</span>:test&#125;).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,document</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> test1 = test; <span class="comment">//此时的test可能已经是下一循环的值</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-回调-导致代码层层嵌套"><a href="#2-回调-导致代码层层嵌套" class="headerlink" title="2. 回调,导致代码层层嵌套"></a>2. 回调,导致代码层层嵌套</h3><h3 id="3-单进程-一旦进程发生阻塞-这个程序都会阻塞"><a href="#3-单进程-一旦进程发生阻塞-这个程序都会阻塞" class="headerlink" title="3. 单进程,一旦进程发生阻塞,这个程序都会阻塞"></a>3. 单进程,一旦进程发生阻塞,这个程序都会阻塞</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">//整个程序陷入死循环</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-还是回调-导致数据库跨collection查询困难"><a href="#4-还是回调-导致数据库跨collection查询困难" class="headerlink" title="4. 还是回调,导致数据库跨collection查询困难"></a>4. 还是回调,导致数据库跨collection查询困难</h3><h3 id="5-Express-中的模板应谨慎使用"><a href="#5-Express-中的模板应谨慎使用" class="headerlink" title="5. Express 中的模板应谨慎使用."></a>5. Express 中的模板应谨慎使用.</h3><p>我在项目中大量使用了ejs模板,当初就是为了图方便,直接使用ejs,实际上模板只应在静态文件中使用,也就是能保证模板中的内容在多个页面中同时适用,对于内容变化比较的页面,还是乖乖地写接口,返回JSON数据比较靠谱.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>项目总体还是比较失败,不过也能学点东西. 比如 nodeJS , mongodb, 还有一点前端知识</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚做完nodeJS的课设,写了个小程序,总结一下&lt;/p&gt;
&lt;h2 id=&quot;程序功能&quot;&gt;&lt;a href=&quot;#程序功能&quot; class=&quot;headerlink&quot; title=&quot;程序功能&quot;&gt;&lt;/a&gt;程序功能&lt;/h2&gt;&lt;p&gt;实现简单的电商网站,能登陆,注册,浏览商品,购物车操作.&lt;/
    
    </summary>
    
      <category term="网站相关" scheme="https://makeitpossible16.github.io/categories/%E7%BD%91%E7%AB%99%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="nodeJS" scheme="https://makeitpossible16.github.io/tags/nodeJS/"/>
    
      <category term="mongodb" scheme="https://makeitpossible16.github.io/tags/mongodb/"/>
    
      <category term="Express" scheme="https://makeitpossible16.github.io/tags/Express/"/>
    
      <category term="mongoose" scheme="https://makeitpossible16.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>cloudstack 搭建总结</title>
    <link href="https://makeitpossible16.github.io/2016/11/20/cloudstack%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://makeitpossible16.github.io/2016/11/20/cloudstack搭建总结/</id>
    <published>2016-11-20T00:00:00.000Z</published>
    <updated>2016-11-23T04:37:32.945Z</updated>
    
    <content type="html"><![CDATA[<p>按照官网的教程搭建<a href="http://docs.cloudstack.apache.org/projects/cloudstack-installation/en/4.8/overview/index.html" target="_blank" rel="external">cloudstack</a>,稍不注意,就出现错误.总结一下.</p>
<h2 id="子节点状态不对"><a href="#子节点状态不对" class="headerlink" title="子节点状态不对"></a>子节点状态不对</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node3 ~]<span class="comment"># service cloudstack-agent status</span></div><div class="line"></div><div class="line">cloudstack-agent dead but subsys locked</div></pre></td></tr></table></figure>
<p>解决：管理节点防火墙问题，正常状态下计算节点应通过NFS挂载主存储,管理节点应开放8250端口</p>
<p>执行完后把cloudstack-agent 重启一下，其状态应为running</p>
<h2 id="系统VM-状态为Starting"><a href="#系统VM-状态为Starting" class="headerlink" title="系统VM 状态为Starting"></a>系统VM 状态为Starting</h2><p>解决：在数据库中将这个虚拟机的状态由“Starting”更改成“Stopped”，重新启动虚拟机即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MySQL -uroot -p -e "<span class="keyword">update</span> cloud.vm_instance <span class="keyword">set</span> state=<span class="string">'Stopped'</span> <span class="keyword">where</span> <span class="keyword">name</span>=VMNAME</div></pre></td></tr></table></figure>
<h2 id="系统VM-状态为Running-代理状态为空（centos6-5-图形化界面下的防火墙重启会清空iptables-文件下的规则）"><a href="#系统VM-状态为Running-代理状态为空（centos6-5-图形化界面下的防火墙重启会清空iptables-文件下的规则）" class="headerlink" title="系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）"></a>系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）</h2><p>防火墙问题</p>
<p>管理节点也用作计算节点，防火墙状态应为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Thu Jun  2 13:23:26 2016</span></div><div class="line">*nat</div><div class="line">:PREROUTING ACCEPT [187042:40599771]</div><div class="line">:POSTROUTING ACCEPT [36644:2281945]</div><div class="line">:OUTPUT ACCEPT [36644:2281945]</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Thu Jun  2 13:23:26 2016</span></div><div class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Thu Jun  2 13:23:26 2016</span></div><div class="line">*filter</div><div class="line">:INPUT ACCEPT [0:0]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [13422:54204084]</div><div class="line">:BF-cloud0 - [0:0]</div><div class="line">:BF-cloud0-IN - [0:0]</div><div class="line">:BF-cloud0-OUT - [0:0]</div><div class="line">-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</div><div class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A INPUT -p icmp -j ACCEPT</div><div class="line">-A INPUT -i lo -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5900 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5902 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 111 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 111 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 2049 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 32803 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 32769 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 892 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 892 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 875 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 875 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 662 -j ACCEPT</div><div class="line">-A INPUT <span class="_">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 662 -j ACCEPT</div><div class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A FORWARD -o cloud0 -m physdev --physdev-is-bridged -j BF-cloud0</div><div class="line">-A FORWARD -i cloud0 -m physdev --physdev-is-bridged -j BF-cloud0</div><div class="line">-A FORWARD -o cloud0 -j DROP</div><div class="line">-A FORWARD -i cloud0 -j DROP</div><div class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A BF-cloud0 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A BF-cloud0 -m physdev --physdev-is-in --physdev-is-bridged -j BF-cloud0-IN</div><div class="line">-A BF-cloud0 -m physdev --physdev-is-out --physdev-is-bridged -j BF-cloud0-OUT</div><div class="line">-A BF-cloud0 -m physdev --physdev-out vnet0 --physdev-is-bridged -j ACCEPT</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Thu Jun  2 13:23:26 2016</span></div></pre></td></tr></table></figure>
<p>计算节点防火墙状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class="line">*mangle</div><div class="line">:PREROUTING ACCEPT [654:130068]</div><div class="line">:INPUT ACCEPT [210:107800]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [143:8276]</div><div class="line">:POSTROUTING ACCEPT [143:8276]</div><div class="line">-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill</div><div class="line">-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Wed Jun  1 19:37:24 2016</span></div><div class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class="line">*nat</div><div class="line">:PREROUTING ACCEPT [0:0]</div><div class="line">:POSTROUTING ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [0:0]</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Wed Jun  1 19:37:24 2016</span></div><div class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class="line">*filter</div><div class="line">:INPUT ACCEPT [0:0]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [0:0]</div><div class="line">-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class="line">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</div><div class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A INPUT -p icmp -j ACCEPT</div><div class="line">-A INPUT -i lo -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</div><div class="line">-A INPUT -p udp -m state --state NEW -m udp --dport 5900 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT</div><div class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A FORWARD -i virbr0 -o virbr0 -j ACCEPT</div><div class="line">-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable</div><div class="line">-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable</div><div class="line">COMMIT</div><div class="line"><span class="comment"># Completed on Wed Jun  1 19:37:24 2016</span></div></pre></td></tr></table></figure>
<h2 id="二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件"><a href="#二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件" class="headerlink" title="二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件"></a>二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件</h2><h2 id="注意看日志文件，里面有详细的输出说明"><a href="#注意看日志文件，里面有详细的输出说明" class="headerlink" title="注意看日志文件，里面有详细的输出说明"></a>注意看日志文件，里面有详细的输出说明</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照官网的教程搭建&lt;a href=&quot;http://docs.cloudstack.apache.org/projects/cloudstack-installation/en/4.8/overview/index.html&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="cloudsatck搭建" scheme="https://makeitpossible16.github.io/categories/cloudsatck%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="cloudsatck" scheme="https://makeitpossible16.github.io/tags/cloudsatck/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下如何优雅地使用翻译</title>
    <link href="https://makeitpossible16.github.io/2016/10/26/ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8%E7%BF%BB%E8%AF%91/"/>
    <id>https://makeitpossible16.github.io/2016/10/26/ubuntu下如何优雅地使用翻译/</id>
    <published>2016-10-26T00:00:00.000Z</published>
    <updated>2016-11-26T15:39:42.885Z</updated>
    
    <content type="html"><![CDATA[<p>最近看英文文档比较多，但英语水平不咋地，需要借助翻译工具。在ubuntu下，有startdict、goldendict等字典，但字典毕竟是字典，解释太多，用着不太爽。平时喜欢用谷歌翻译，最近谷歌翻译的水平也的确提升了不少，可惜没有客户端，平时看个PDF啥的也用不了，github 上的发现mtranslate模块，把网址改为中国的网址，得到结果还挺快.</p>
<p>本来想写个接口封装一下，直接用goldendict显示的，无奈网络延迟太大，谷歌翻译都没出结果，字典的弹框就出来了，能找到goldendict的源码，但看到那一坨代码，实在没有修改的欲望。偶然的机会，发现了某道有ubuntu的客户端，解压出来，居然是python的代码，还是python大法好，这样就来优雅地改一下代码吧。<br>最后实现功能：<br>在弹框中显示调用mtranslate模块显示的翻译信息</p>
<p><img src="http://store-10069044.cos.myqcloud.com/myblogImage/20161017145304097youdao.png" alt=""></p>
<p>点击保存，将所翻译的单词保存到指定目录的translate.csv文件中</p>
<p><img src="http://store-10069044.cos.myqcloud.com/myblogImage/20161017145415567youdaoSave.png" alt=""></p>
<p>调整弹框显示，解决翻译文本过长导致弹框显示不全的问题</p>
<h1 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h1><h2 id="下载mtranslate模块"><a href="#下载mtranslate模块" class="headerlink" title="下载mtranslate模块"></a>下载<a href="https://github.com/mouuff/mtranslate" target="_blank" rel="external">mtranslate</a>模块</h2><h2 id="使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。"><a href="#使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。" class="headerlink" title="使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。"></a>使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。</h2><h2 id="下载-deb包，解压，参考文章http-www-cnblogs-com-scplee-archive-2016-05-13-5489024-html"><a href="#下载-deb包，解压，参考文章http-www-cnblogs-com-scplee-archive-2016-05-13-5489024-html" class="headerlink" title="下载.deb包，解压，参考文章http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html"></a>下载.deb包，解压，参考文章<a href="http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html" target="_blank" rel="external">http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html</a></h2><h2 id="在dae-utils-py增加代码"><a href="#在dae-utils-py增加代码" class="headerlink" title="在dae/utils.py增加代码"></a>在dae/utils.py增加代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conf</span><span class="params">()</span>:</span>  </div><div class="line">    <span class="keyword">import</span>  json  </div><div class="line">    <span class="keyword">import</span> os  </div><div class="line">    <span class="keyword">with</span> open(<span class="string">'configuration.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:  </div><div class="line">        conf = json.load(f)  </div><div class="line">    <span class="keyword">return</span> conf</div></pre></td></tr></table></figure>
<h2 id="修改translate-py文件"><a href="#修改translate-py文件" class="headerlink" title="修改translate.py文件"></a>修改translate.py文件</h2><p>修改get_translate方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_translate</span><span class="params">(self, text)</span>:</span>  </div><div class="line">    data = &#123; <span class="string">"keyfrom"</span> : <span class="string">"deskdict.linux"</span>, <span class="string">"q"</span> : text.encode(<span class="string">"utf-8"</span>), <span class="string">"doctype"</span> : <span class="string">"xml"</span>, <span class="string">"xmlVersion"</span> : <span class="number">8.2</span>,  </div><div class="line">             <span class="string">"client"</span> : const.client, <span class="string">"id"</span> : <span class="string">"cee84504d9984f1b2"</span>, <span class="string">"vendor"</span>: <span class="string">"deskdict.linux"</span>,  </div><div class="line">             <span class="string">"in"</span> : <span class="string">"YoudaoDict"</span>, <span class="string">"appVer"</span> : <span class="string">"5.4.46.5554"</span>, <span class="string">"appZengqiang"</span> : <span class="number">0</span>, <span class="string">"le"</span> : <span class="string">"eng"</span>, <span class="string">"LTH"</span> : <span class="number">40</span>&#125;  </div><div class="line">    <span class="comment"># self.clear_translate()  </span></div><div class="line">    <span class="comment"># try:  </span></div><div class="line">    ret = requests.get(<span class="string">"http://dict.youdao.com/search"</span>, params=data).text  </div><div class="line">    ret = ret.encode(<span class="string">'utf-8'</span>)  </div><div class="line">    pq = PyQuery(ret, parser=<span class="string">"xml"</span>)  </div><div class="line">    test_data = &#123;<span class="string">"q"</span>: text, <span class="string">"type"</span>: <span class="number">1</span>, <span class="string">"pos"</span>: <span class="number">-1</span>, <span class="string">"client"</span>: const.client&#125;  </div><div class="line">    test_ret = json.loads(requests.get(<span class="string">"http://dict.youdao.com/jsonresult"</span>, params=test_data).text)  </div><div class="line">    self.translate_info.text = text  </div><div class="line">    text = str(text).replace(<span class="string">'\n'</span>,<span class="string">' '</span>)  </div><div class="line">    <span class="keyword">from</span> dae.utils <span class="keyword">import</span> get_conf  </div><div class="line">    conf = get_conf()  </div><div class="line">    self.translate_info.webtrans = <span class="string">"谷歌翻译:\n"</span>  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (str(conf[<span class="string">'useTranslateModule'</span>]).upper() == <span class="string">'TRUE'</span> ):  </div><div class="line">        self.translate_info.webtrans = self.translate_info.webtrans + useTranslateComponent(text) + <span class="string">"\n"</span>  </div><div class="line">    <span class="comment"># if self.translate_info.webtrans:  </span></div><div class="line">    self.translate_info.webtrans =self.translate_info.webtrans + <span class="string">"有道:\n"</span>  </div><div class="line">    self.translate_info.trans = <span class="string">'\n'</span>.join([PyQuery(l)(<span class="string">"i"</span>).text() <span class="keyword">for</span> l <span class="keyword">in</span> pq(<span class="string">'trs l'</span>)])  </div><div class="line">    self.translate_info.phonetic = test_ret.get(<span class="string">"ussm"</span>, <span class="string">""</span>)  </div><div class="line">    self.translate_info.webtrans = self.translate_info.webtrans + self.wrap_web_trans(pq)  </div><div class="line"></div><div class="line">    <span class="comment">#     self.translate_info.lang = test_ret.get("lang", "")  </span></div><div class="line">    <span class="comment">#  </span></div><div class="line">    <span class="comment"># except:  </span></div><div class="line">    <span class="comment">#     with open_offline_dict() as obj:  </span></div><div class="line">    <span class="comment">#         ret = obj.query(text)  </span></div><div class="line">    <span class="comment">#         if ret:  </span></div><div class="line">    <span class="comment">#             self.translate_info.text = text  </span></div><div class="line">    <span class="comment">#             self.translate_info.trans = ret[1].replace("\\n", "\n")  </span></div><div class="line">    <span class="comment">#             self.translate_info.phonetic = ret[0][1:-1]  </span></div><div class="line">    <span class="comment">#             self.translate_info.webtrans = "抱歉，从网络获取结果失败，请检测网络重试"  </span></div><div class="line">    <span class="comment">#             self.translate_info.lang = "eng"  </span></div><div class="line">    <span class="comment"># self.translate_info.voices = get_voice_simple(text)  </span></div><div class="line">    <span class="comment"># if not text:  </span></div><div class="line">    <span class="comment">#     return  </span></div><div class="line">    <span class="comment">#self.clear_translate()  </span></div><div class="line"></div><div class="line">    <span class="comment">#self.translate_info.text = text  </span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.translate_info.webtrans:  </div><div class="line">        self.translate_info.webtrans = <span class="string">"查询失败"</span>  </div><div class="line">    <span class="keyword">if</span> self.translate_info.webtrans:  </div><div class="line">        self.translateFinished.emit()</div></pre></td></tr></table></figure></p>
<h2 id="在translate-py中添加代码："><a href="#在translate-py中添加代码：" class="headerlink" title="在translate.py中添加代码："></a>在translate.py中添加代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">useTranslateComponent</span><span class="params">(text)</span>:</span>  </div><div class="line">    <span class="keyword">import</span> os</div><div class="line">    <span class="keyword">from</span> dae.utils <span class="keyword">import</span> get_conf</div><div class="line">    conf = get_conf()</div><div class="line">    toLang = conf[<span class="string">'toLang'</span>]</div><div class="line">    <span class="keyword">from</span> mtranslate <span class="keyword">import</span> translate</div><div class="line">    translation = translate(text,toLang)</div><div class="line">    <span class="keyword">return</span> translation</div></pre></td></tr></table></figure>
<h2 id="在windows-py添加类："><a href="#在windows-py添加类：" class="headerlink" title="在windows.py添加类："></a>在windows.py添加类：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@ 保存到文件  </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">saveToFile</span><span class="params">(QtCore.QObject)</span>:</span>  </div><div class="line"><span class="meta">    @QtCore.pyqtSlot(str, str)  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveToFile</span><span class="params">(self,fromText,toText)</span>:</span>  </div><div class="line">        <span class="keyword">import</span> os  </div><div class="line">        <span class="keyword">import</span> csv  </div><div class="line">        <span class="keyword">from</span> dae.utils <span class="keyword">import</span> get_conf  </div><div class="line">        toText = str(toText).replace(<span class="string">'谷歌翻译:'</span>,<span class="string">''</span>)  </div><div class="line">        toText = toText.split(<span class="string">'有道:'</span>)  </div><div class="line">        firstText = <span class="string">''</span>  </div><div class="line">        <span class="keyword">if</span> toText[<span class="number">0</span>]:  </div><div class="line">            firstText = toText[<span class="number">0</span>].strip(<span class="string">'\n'</span>)  </div><div class="line">        lastText = toText[<span class="number">1</span>].replace(<span class="string">'有道:'</span>,<span class="string">''</span>).strip(<span class="string">'\n'</span>).lstrip(<span class="string">'w. '</span>)  </div><div class="line">        <span class="keyword">if</span> (firstText <span class="keyword">or</span> lastText):  </div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstText:  </div><div class="line">                firstText = <span class="string">' '</span>  </div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lastText:  </div><div class="line">                lastText = <span class="string">' '</span>  </div><div class="line">            conf = get_conf()  </div><div class="line">            savePath = str(conf[<span class="string">'savePath'</span>]).rstrip(<span class="string">'/'</span>) + <span class="string">'/translate.csv'</span>  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savePath):  </div><div class="line">                <span class="keyword">with</span> open(savePath,<span class="string">'a+'</span>) <span class="keyword">as</span> f:  </div><div class="line">                    writer = csv.writer(f)  </div><div class="line">                    writer.writerow([<span class="string">'翻译内容'</span>,<span class="string">'谷歌翻译'</span>,<span class="string">'有道词典'</span>])  </div><div class="line">                    writeData = [  </div><div class="line">                        fromText, firstText, lastText  </div><div class="line">                    ]  </div><div class="line">                    writer.writerow(writeData)  </div><div class="line">                    f.close()  </div><div class="line">                <span class="keyword">return</span>  </div><div class="line">            <span class="keyword">with</span> open(savePath,<span class="string">'a+'</span>) <span class="keyword">as</span> f:  </div><div class="line">                writer = csv.writer(f)  </div><div class="line">                writeData = [  </div><div class="line">                    fromText, firstText, lastText  </div><div class="line">                ]  </div><div class="line">                writer.writerow(writeData)  </div><div class="line">                f.close()  </div><div class="line">            <span class="keyword">return</span>  </div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure>
<h2 id="在window-py-的init-方法中添加代码"><a href="#在window-py-的init-方法中添加代码" class="headerlink" title="在window.py 的init()方法中添加代码"></a>在window.py 的<strong>init</strong>()方法中添加代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@ 单词保存到文件  </span></div><div class="line">        self.saveToFile = saveToFile()  </div><div class="line">        self.qml_context.setContextProperty(<span class="string">"saveToFile"</span>, self.saveToFile) <span class="comment">#把saveToFile类暴露给qml文件</span></div></pre></td></tr></table></figure>
<h2 id="在TranslateContent-qml-添加TextEdit，位置自己看着办就行"><a href="#在TranslateContent-qml-添加TextEdit，位置自己看着办就行" class="headerlink" title="在TranslateContent.qml 添加TextEdit，位置自己看着办就行"></a>在TranslateContent.qml 添加TextEdit，位置自己看着办就行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">TextEdit&#123;  </div><div class="line">            <span class="attr">color</span>: <span class="string">"#ff0000"</span>  </div><div class="line">            anchors.verticalCenter: parent.verticalCenter  </div><div class="line">            text: <span class="string">" 保存"</span>  </div><div class="line">            selectByMouse: <span class="literal">true</span>  </div><div class="line">            readOnly: <span class="literal">true</span>  </div><div class="line">            font.pixelSize: <span class="number">15</span>  </div><div class="line">            MouseArea &#123;  </div><div class="line">                anchors.fill: parent  </div><div class="line">                hoverEnabled: <span class="literal">true</span>  </div><div class="line">                onExited: &#123;  </div><div class="line">                    cursorShape = Qt.ArrowCursor  </div><div class="line">                &#125;  </div><div class="line">                onClicked: &#123;  </div><div class="line">                    saveToFile.saveToFile(translateInfo.text, translateInfo.webtrans)  </div><div class="line">                    <span class="keyword">if</span> (parent.color == <span class="string">"#2699eb"</span>)&#123;  </div><div class="line">                        parent.color = <span class="string">"#ff0000"</span>;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="keyword">else</span>&#123;  </div><div class="line">                        <span class="keyword">if</span>(parent.color == <span class="string">"#ff0000"</span>)&#123;  </div><div class="line">                            parent.color = <span class="string">"#2699eb"</span>  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="修改翻译内容显示方式"><a href="#修改翻译内容显示方式" class="headerlink" title="修改翻译内容显示方式"></a>修改翻译内容显示方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TextEdit&#123;  </div><div class="line">            <span class="attr">id</span>: keywordsText  </div><div class="line">            width: parent.width  </div><div class="line">            <span class="comment">//anchors.verticalCenter: parent.verticalCenter  </span></div><div class="line">            selectByMouse: <span class="literal">true</span>  </div><div class="line">            readOnly: <span class="literal">true</span>  </div><div class="line">            text: translateInfo.text  </div><div class="line">            wrapMode: Text.WordWrap  </div><div class="line">            font.pixelSize: <span class="number">13</span>  </div><div class="line">            font.bold: <span class="literal">true</span>  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="在main-py所在文件夹下添加配置文件configuration-json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令"><a href="#在main-py所在文件夹下添加配置文件configuration-json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令" class="headerlink" title="在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令"></a>在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">  <span class="attr">"useTranslateModule"</span>: <span class="string">"true"</span>,  </div><div class="line">  <span class="attr">"savePath"</span>: <span class="string">"/home/ubuntu/Desktop"</span>,  </div><div class="line">  <span class="attr">"cmd"</span>: <span class="string">"translate -f en -t zh "</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="保存，直接运行main-py-youdao-dict-backend-py就行"><a href="#保存，直接运行main-py-youdao-dict-backend-py就行" class="headerlink" title="保存，直接运行main.py youdao-dict-backend.py就行"></a>保存，直接运行main.py youdao-dict-backend.py就行</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>直接利用youdao原有的事件处理，总体能用，但没有startdict或goldendict流畅，如果能直接修改startdict或goldendict的代码，利用它们的事件处理，估计会更稳定，不过最近比较忙,先凑合着用吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看英文文档比较多，但英语水平不咋地，需要借助翻译工具。在ubuntu下，有startdict、goldendict等字典，但字典毕竟是字典，解释太多，用着不太爽。平时喜欢用谷歌翻译，最近谷歌翻译的水平也的确提升了不少，可惜没有客户端，平时看个PDF啥的也用不了，gith
    
    </summary>
    
      <category term="有道字典修改" scheme="https://makeitpossible16.github.io/categories/%E6%9C%89%E9%81%93%E5%AD%97%E5%85%B8%E4%BF%AE%E6%94%B9/"/>
    
    
      <category term="python" scheme="https://makeitpossible16.github.io/tags/python/"/>
    
      <category term="ubuntu" scheme="https://makeitpossible16.github.io/tags/ubuntu/"/>
    
  </entry>
  
</feed>
