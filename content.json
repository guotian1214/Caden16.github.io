[{"title":"seaweedfs源码阅读记录1","date":"2016-11-22T00:00:00.000Z","path":"2016/11/22/seaweedfs源码阅读记录/","content":"接下来的日子都会抽出部分时间学习文件存储,目标是修改openstack-swift的源码,通过源码学习文件存储知识.目前学习对象:seaweedfs. 目标:学习seaweedfs 的文件合并存储文件合并后必然会带来的一堆问题待解决,比如文件索引,响应速率等. 学习方式: google + 调试github 上能找到项目的wiki文档,会介绍简单的使用.调试方案: IDEA/pycharm , 需要结合atom/vscode 的delve调试go程序,各有利弊,结合使用. 参考文章分布式存储Seaweedfs源码分析 tonybai的个人blog","tags":[{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"},{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"}]},{"title":"seaweedfs源码阅读记录2","date":"2016-11-22T00:00:00.000Z","path":"2016/11/22/seaweedfs源码阅读记录2/","content":"调试过程使用pycharm , 入口为weed.go, 根据参数调用command文件夹下的文件.","tags":[{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"},{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"}]},{"title":"nodeJS入门总结","date":"2016-11-20T00:00:00.000Z","path":"2016/11/20/nodeJS入门总结/","content":"刚做完nodeJS的课设,写了个小程序,总结一下 程序功能实现简单的电商网站,能登陆,注册,浏览商品,购物车操作. 使用技术 nodeJS + Express + ejs mongoDB + mongoose bootstrap + jquery (前端页面是在网上找的,随便改了一下) 实现代码github 有关mongoosemongoose实现了把mongodb中的数据进行映射,可以直接使用mongoose对数据库进行操作,比较方便.使用嵌套document时,需要创建多个Schema(类似于Java中的POJO吧).12345678910111213141516171819202122232425var contactInformationSchema = new Schema(&#123; address: String, phone: String&#125;)var alreadyPaidSchema = new Schema(&#123; productID: Schema.Types.ObjectId, price: Number, address: String, phone: String, userName: String&#125;)var unpaidSchema = new Schema(&#123; productID: Schema.Types.ObjectId, price: Number&#125;)var schema = new Schema(&#123; username: String, password: String, contactInformation: [contactInformationSchema], alreadyPaid: [alreadyPaidSchema], unpaid: [unpaidSchema]&#125;); 有关nodeJS最大的优点就是回调,实现网站的并发访问. 不过缺点也不少,可能是我经验不足,记录一下掉过的坑. 1. 回调,感觉就像是不负责任地甩锅.1234567var test;for (var i = 0; i &lt; array.length; i++) &#123; test = array[i]; mongooseModel.find(&#123;\"something\":test&#125;).exec(function(err,document)&#123; var test1 = test; //此时的test可能已经是下一循环的值 &#125;)&#125; 2. 回调,导致代码层层嵌套3. 单进程,一旦进程发生阻塞,这个程序都会阻塞123while (true) &#123; //整个程序陷入死循环&#125; 4. 还是回调,导致数据库跨collection查询困难5. Express 中的模板应谨慎使用.我在项目中大量使用了ejs模板,当初就是为了图方便,直接使用ejs,实际上模板只应在静态文件中使用,也就是能保证模板中的内容在多个页面中同时适用,对于内容变化比较的页面,还是乖乖地写接口,返回JSON数据比较靠谱. 总结项目总体还是比较失败,不过也能学点东西. 比如 nodeJS , mongodb, 还有一点前端知识","tags":[{"name":"nodeJS","slug":"nodeJS","permalink":"https://makeitpossible16.github.io/tags/nodeJS/"},{"name":"mongodb","slug":"mongodb","permalink":"https://makeitpossible16.github.io/tags/mongodb/"},{"name":"Express","slug":"Express","permalink":"https://makeitpossible16.github.io/tags/Express/"},{"name":"mongoose","slug":"mongoose","permalink":"https://makeitpossible16.github.io/tags/mongoose/"}]},{"title":"cloudstack 搭建总结","date":"2016-11-20T00:00:00.000Z","path":"2016/11/20/cloudstack搭建总结/","content":"按照官网的教程搭建cloudstack,稍不注意,就出现错误.总结一下. 子节点状态不对123[root@node3 ~]# service cloudstack-agent statuscloudstack-agent dead but subsys locked 解决：管理节点防火墙问题，正常状态下计算节点应通过NFS挂载主存储,管理节点应开放8250端口 执行完后把cloudstack-agent 重启一下，其状态应为running 系统VM 状态为Starting解决：在数据库中将这个虚拟机的状态由“Starting”更改成“Stopped”，重新启动虚拟机即可。 1MySQL -uroot -p -e \"update cloud.vm_instance set state='Stopped' where name=VMNAME 系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）防火墙问题 管理节点也用作计算节点，防火墙状态应为 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Generated by iptables-save v1.4.7 on Thu Jun 2 13:23:26 2016*nat:PREROUTING ACCEPT [187042:40599771]:POSTROUTING ACCEPT [36644:2281945]:OUTPUT ACCEPT [36644:2281945]COMMIT# Completed on Thu Jun 2 13:23:26 2016# Generated by iptables-save v1.4.7 on Thu Jun 2 13:23:26 2016*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [13422:54204084]:BF-cloud0 - [0:0]:BF-cloud0-IN - [0:0]:BF-cloud0-OUT - [0:0]-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5900 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5902 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 111 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 111 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 2049 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 32803 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 32769 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 892 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 892 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 875 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 875 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 662 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 662 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -o cloud0 -m physdev --physdev-is-bridged -j BF-cloud0-A FORWARD -i cloud0 -m physdev --physdev-is-bridged -j BF-cloud0-A FORWARD -o cloud0 -j DROP-A FORWARD -i cloud0 -j DROP-A FORWARD -j REJECT --reject-with icmp-host-prohibited-A BF-cloud0 -m state --state RELATED,ESTABLISHED -j ACCEPT-A BF-cloud0 -m physdev --physdev-is-in --physdev-is-bridged -j BF-cloud0-IN-A BF-cloud0 -m physdev --physdev-is-out --physdev-is-bridged -j BF-cloud0-OUT-A BF-cloud0 -m physdev --physdev-out vnet0 --physdev-is-bridged -j ACCEPTCOMMIT# Completed on Thu Jun 2 13:23:26 2016 计算节点防火墙状态 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*mangle:PREROUTING ACCEPT [654:130068]:INPUT ACCEPT [210:107800]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [143:8276]:POSTROUTING ACCEPT [143:8276]-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fillCOMMIT# Completed on Wed Jun 1 19:37:24 2016# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*nat:PREROUTING ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]COMMIT# Completed on Wed Jun 1 19:37:24 2016# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 5900 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -i virbr0 -o virbr0 -j ACCEPT-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachableCOMMIT# Completed on Wed Jun 1 19:37:24 2016 二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件注意看日志文件，里面有详细的输出说明","tags":[{"name":"cloudsatck","slug":"cloudsatck","permalink":"https://makeitpossible16.github.io/tags/cloudsatck/"}]},{"title":"ubuntu下如何优雅地使用翻译","date":"2016-10-26T00:00:00.000Z","path":"2016/10/26/ubuntu下如何优雅地使用翻译/","content":"最近看英文文档比较多，但英语水平不咋地，需要借助翻译工具。在ubuntu下，有startdict、goldendict等字典，但字典毕竟是字典，解释太多，用着不太爽。平时喜欢用谷歌翻译，最近谷歌翻译的水平也的确提升了不少，可惜没有客户端，平时看个PDF啥的也用不了，github 上的发现mtranslate模块，把网址改为中国的网址，得到结果还挺快. 本来想写个接口封装一下，直接用goldendict显示的，无奈网络延迟太大，谷歌翻译都没出结果，字典的弹框就出来了，能找到goldendict的源码，但看到那一坨代码，实在没有修改的欲望。偶然的机会，发现了某道有ubuntu的客户端，解压出来，居然是python的代码，还是python大法好，这样就来优雅地改一下代码吧。最后实现功能：在弹框中显示调用mtranslate模块显示的翻译信息 点击保存，将所翻译的单词保存到指定目录的translate.csv文件中 调整弹框显示，解决翻译文本过长导致弹框显示不全的问题 实现代码：下载mtranslate模块使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。下载.deb包，解压，参考文章http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html在dae/utils.py增加代码123456def get_conf(): import json import os with open('configuration.json', 'r') as f: conf = json.load(f) return conf 修改translate.py文件修改get_translate方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546def get_translate(self, text): data = &#123; \"keyfrom\" : \"deskdict.linux\", \"q\" : text.encode(\"utf-8\"), \"doctype\" : \"xml\", \"xmlVersion\" : 8.2, \"client\" : const.client, \"id\" : \"cee84504d9984f1b2\", \"vendor\": \"deskdict.linux\", \"in\" : \"YoudaoDict\", \"appVer\" : \"5.4.46.5554\", \"appZengqiang\" : 0, \"le\" : \"eng\", \"LTH\" : 40&#125; # self.clear_translate() # try: ret = requests.get(\"http://dict.youdao.com/search\", params=data).text ret = ret.encode('utf-8') pq = PyQuery(ret, parser=\"xml\") test_data = &#123;\"q\": text, \"type\": 1, \"pos\": -1, \"client\": const.client&#125; test_ret = json.loads(requests.get(\"http://dict.youdao.com/jsonresult\", params=test_data).text) self.translate_info.text = text text = str(text).replace('\\n',' ') from dae.utils import get_conf conf = get_conf() self.translate_info.webtrans = \"谷歌翻译:\\n\" if (str(conf['useTranslateModule']).upper() == 'TRUE' ): self.translate_info.webtrans = self.translate_info.webtrans + useTranslateComponent(text) + \"\\n\" # if self.translate_info.webtrans: self.translate_info.webtrans =self.translate_info.webtrans + \"有道:\\n\" self.translate_info.trans = '\\n'.join([PyQuery(l)(\"i\").text() for l in pq('trs l')]) self.translate_info.phonetic = test_ret.get(\"ussm\", \"\") self.translate_info.webtrans = self.translate_info.webtrans + self.wrap_web_trans(pq) # self.translate_info.lang = test_ret.get(\"lang\", \"\") # # except: # with open_offline_dict() as obj: # ret = obj.query(text) # if ret: # self.translate_info.text = text # self.translate_info.trans = ret[1].replace(\"\\\\n\", \"\\n\") # self.translate_info.phonetic = ret[0][1:-1] # self.translate_info.webtrans = \"抱歉，从网络获取结果失败，请检测网络重试\" # self.translate_info.lang = \"eng\" # self.translate_info.voices = get_voice_simple(text) # if not text: # return #self.clear_translate() #self.translate_info.text = text if not self.translate_info.webtrans: self.translate_info.webtrans = \"查询失败\" if self.translate_info.webtrans: self.translateFinished.emit() 在translate.py中添加代码：12345678def useTranslateComponent(text): import os from dae.utils import get_conf conf = get_conf() toLang = conf['toLang'] from mtranslate import translate translation = translate(text,toLang) return translation 在windows.py添加类：12345678910111213141516171819202122232425262728293031323334353637383940#@ 保存到文件 class saveToFile(QtCore.QObject): @QtCore.pyqtSlot(str, str) def saveToFile(self,fromText,toText): import os import csv from dae.utils import get_conf toText = str(toText).replace('谷歌翻译:','') toText = toText.split('有道:') firstText = '' if toText[0]: firstText = toText[0].strip('\\n') lastText = toText[1].replace('有道:','').strip('\\n').lstrip('w. ') if (firstText or lastText): if not firstText: firstText = ' ' if not lastText: lastText = ' ' conf = get_conf() savePath = str(conf['savePath']).rstrip('/') + '/translate.csv' if not os.path.exists(savePath): with open(savePath,'a+') as f: writer = csv.writer(f) writer.writerow(['翻译内容','谷歌翻译','有道词典']) writeData = [ fromText, firstText, lastText ] writer.writerow(writeData) f.close() return with open(savePath,'a+') as f: writer = csv.writer(f) writeData = [ fromText, firstText, lastText ] writer.writerow(writeData) f.close() return return 在window.py 的init()方法中添加代码123#@ 单词保存到文件 self.saveToFile = saveToFile() self.qml_context.setContextProperty(\"saveToFile\", self.saveToFile) #把saveToFile类暴露给qml文件 在TranslateContent.qml 添加TextEdit，位置自己看着办就行1234567891011121314151617181920212223242526TextEdit&#123; color: \"#ff0000\" anchors.verticalCenter: parent.verticalCenter text: \" 保存\" selectByMouse: true readOnly: true font.pixelSize: 15 MouseArea &#123; anchors.fill: parent hoverEnabled: true onExited: &#123; cursorShape = Qt.ArrowCursor &#125; onClicked: &#123; saveToFile.saveToFile(translateInfo.text, translateInfo.webtrans) if (parent.color == \"#2699eb\")&#123; parent.color = \"#ff0000\"; &#125; else&#123; if(parent.color == \"#ff0000\")&#123; parent.color = \"#2699eb\" &#125; &#125; &#125; &#125; &#125; 修改翻译内容显示方式1234567891011TextEdit&#123; id: keywordsText width: parent.width //anchors.verticalCenter: parent.verticalCenter selectByMouse: true readOnly: true text: translateInfo.text wrapMode: Text.WordWrap font.pixelSize: 13 font.bold: true &#125; 在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令12345&#123; \"useTranslateModule\": \"true\", \"savePath\": \"/home/ubuntu/Desktop\", \"cmd\": \"translate -f en -t zh \" &#125; 保存，直接运行main.py youdao-dict-backend.py就行总结直接利用youdao原有的事件处理，总体能用，但没有startdict或goldendict流畅，如果能直接修改startdict或goldendict的代码，利用它们的事件处理，估计会更稳定，不过最近比较忙,先凑合着用吧.","tags":[{"name":"python","slug":"python","permalink":"https://makeitpossible16.github.io/tags/python/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://makeitpossible16.github.io/tags/ubuntu/"}]}]