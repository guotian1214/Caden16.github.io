{"meta":{"title":"MakeItPossible16","subtitle":"寻找实习单位,详情请看个人简介","description":"闲着没事写点东西","author":"MakeItPossible16","url":"https://makeitpossible16.github.io"},"posts":[{"title":"ubuntu使用问题总结","slug":"ubuntu使用问题总结","date":"2017-02-16T00:00:00.000Z","updated":"2017-02-16T13:48:09.980Z","comments":true,"path":"ubuntu/ubuntu使用问题总结/","link":"","permalink":"https://makeitpossible16.github.io/ubuntu/ubuntu使用问题总结/","excerpt":"","text":"lightdm登录界面找不到登录用户名问题分析：直接修改/etc/passwd文件中的用户user id，想要用此方法提升普通用户权限为root权限，但把user id在/etc/passwd中重新改成不为原有user id（比如原有user id 为1000，改成0后，又改成1001）时，会导致系统找不到用户，这是再改成1000，系统也会找不到用户，因此在登录界面不显示。解决方法：使用userdel 删除用户，但不删除与用户相关配置文件，然后使用useradd添加同名用户，即可在登录页面显示。 系统登录不断循环问题分析：参考Ubuntu 14.04登陆界面无限循环的解决办法,其中提到，home目录空间满了，还有一种可能是：由于添加了同名用户，但用户的user id不一样，系统认为/home目录不属于当前登录用户，导致登录不进去。解决方法：常看当前用户的user id：1id -u &lt;username&gt; 使用ll命令查看当前用户的/home文件夹所有者的user id是否为当前用户的user id，如果不是，使用命令chown改变home目录的所有者。 无法执行/bin/bash，没有那个文件或目录问题分析：参考脚本格式之殇——/bin/bash^M: 没有那个文件或目录 ，修改过/etc/passwd文件，导致/bin/bash后面多加空格符解决方法：使用cat -A filename查看文件，把不规则的空格去掉","raw":null,"content":"<h2 id=\"lightdm登录界面找不到登录用户名\"><a href=\"#lightdm登录界面找不到登录用户名\" class=\"headerlink\" title=\"lightdm登录界面找不到登录用户名\"></a>lightdm登录界面找不到登录用户名</h2><p>问题分析：直接修改/etc/passwd文件中的用户user id，想要用此方法提升普通用户权限为root权限，但把user id在/etc/passwd中重新改成不为原有user id（比如原有user id 为1000，改成0后，又改成1001）时，会导致系统找不到用户，这是再改成1000，系统也会找不到用户，因此在登录界面不显示。<br>解决方法：使用userdel 删除用户，但不删除与用户相关配置文件，然后使用useradd添加同名用户，即可在登录页面显示。</p>\n<h2 id=\"系统登录不断循环\"><a href=\"#系统登录不断循环\" class=\"headerlink\" title=\"系统登录不断循环\"></a>系统登录不断循环</h2><p>问题分析：参考<a href=\"http://www.tuicool.com/articles/IBreErY\" target=\"_blank\" rel=\"external\">Ubuntu 14.04登陆界面无限循环的解决办法</a>,其中提到，home目录空间满了，还有一种可能是：由于添加了同名用户，但用户的user id不一样，系统认为/home目录不属于当前登录用户，导致登录不进去。<br>解决方法：常看当前用户的user id：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">id -u &lt;username&gt;</div></pre></td></tr></table></figure></p>\n<p>使用ll命令查看当前用户的/home文件夹所有者的user id是否为当前用户的user id，如果不是，使用命令chown改变home目录的所有者。</p>\n<h2 id=\"无法执行-bin-bash，没有那个文件或目录\"><a href=\"#无法执行-bin-bash，没有那个文件或目录\" class=\"headerlink\" title=\"无法执行/bin/bash，没有那个文件或目录\"></a>无法执行/bin/bash，没有那个文件或目录</h2><p><img src=\"/uploads/2017-02-16 19-46-51.png\" alt=\"\"><br>问题分析：参考<a href=\"https://my.oschina.net/u/2324376/blog/388412\" target=\"_blank\" rel=\"external\">脚本格式之殇——/bin/bash^M: 没有那个文件或目录</a> ，修改过/etc/passwd文件，导致/bin/bash后面多加空格符<br>解决方法：使用cat -A filename查看文件，把不规则的空格去掉</p>\n","categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://makeitpossible16.github.io/categories/ubuntu/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://makeitpossible16.github.io/tags/ubuntu/"}]},{"title":"openstack-swift源码阅读记录3-文件下载过程","slug":"openstack-swift源码阅读记录3-文件下载过程","date":"2017-02-15T00:00:00.000Z","updated":"2017-02-15T13:59:10.221Z","comments":true,"path":"对象存储/openstack-swift源码阅读记录3-文件下载过程/","link":"","permalink":"https://makeitpossible16.github.io/对象存储/openstack-swift源码阅读记录3-文件下载过程/","excerpt":"","text":"","raw":null,"content":"","categories":[{"name":"对象存储","slug":"对象存储","permalink":"https://makeitpossible16.github.io/categories/对象存储/"}],"tags":[{"name":"openstack-swift","slug":"openstack-swift","permalink":"https://makeitpossible16.github.io/tags/openstack-swift/"}]},{"title":"openstack源码阅读记录2-object metadata","slug":"openstack源码阅读记录2-object metadata","date":"2017-02-13T00:00:00.000Z","updated":"2017-02-13T09:06:16.572Z","comments":true,"path":"对象存储/openstack源码阅读记录2-object metadata/","link":"","permalink":"https://makeitpossible16.github.io/对象存储/openstack源码阅读记录2-object metadata/","excerpt":"","text":"通过调试,得到object metadata的格式:","raw":null,"content":"<p>通过调试,得到object metadata的格式:<br><img src=\"/uploads/2017-02-13 16-28-30.png\" alt=\"\"></p>\n","categories":[{"name":"对象存储","slug":"对象存储","permalink":"https://makeitpossible16.github.io/categories/对象存储/"}],"tags":[{"name":"openstack-swift","slug":"openstack-swift","permalink":"https://makeitpossible16.github.io/tags/openstack-swift/"}]},{"title":"openstack-swift源码阅读记录1-文件上传过程","slug":"openstack-swift源码阅读记录1-文件上传过程","date":"2017-02-12T00:00:00.000Z","updated":"2017-02-13T09:07:50.308Z","comments":true,"path":"对象存储/openstack-swift源码阅读记录1-文件上传过程/","link":"","permalink":"https://makeitpossible16.github.io/对象存储/openstack-swift源码阅读记录1-文件上传过程/","excerpt":"使用命令:1swift upload\n上传文件,openstack-swift调用过程\n入口函数","text":"使用命令:1swift upload 上传文件,openstack-swift调用过程 入口函数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556def HEAD(self, request): \"\"\"Handle HTTP HEAD requests for the Swift Object Server.\"\"\" device, partition, account, container, obj, policy = \\ get_name_and_placement(request, 5, 5, True) #从请求中获取相应信息,其中: #policy:根据request中的X-Backend-Storage-Policy-Index获得 #device, partition, account, container, obj根据request.path获得 frag_prefs = safe_json_loads( request.headers.get('X-Backend-Fragment-Preferences')) try: disk_file = self.get_diskfile( device, partition, account, container, obj, policy=policy, frag_prefs=frag_prefs) # disk_file:BaseDiskFile对象 except DiskFileDeviceUnavailable: return HTTPInsufficientStorage(drive=device, request=request) try: metadata = disk_file.read_metadata() #从object中读取metadata except DiskFileXattrNotSupported: return HTTPInsufficientStorage(drive=device, request=request) except (DiskFileNotExist, DiskFileQuarantined) as e: headers = &#123;&#125; if hasattr(e, 'timestamp'): headers['X-Backend-Timestamp'] = e.timestamp.internal return HTTPNotFound(request=request, headers=headers, conditional_response=True) conditional_etag = resolve_etag_is_at_header(request, metadata) response = Response(request=request, conditional_response=True, conditional_etag=conditional_etag) response.headers['Content-Type'] = metadata.get( 'Content-Type', 'application/octet-stream') for key, value in metadata.items(): if (is_sys_or_user_meta('object', key) or is_object_transient_sysmeta(key) or key.lower() in self.allowed_headers): response.headers[key] = value response.etag = metadata['ETag'] ts = Timestamp(metadata['X-Timestamp']) response.last_modified = math.ceil(float(ts)) # Needed for container sync feature response.headers['X-Timestamp'] = ts.normal response.headers['X-Backend-Timestamp'] = ts.internal response.headers['X-Backend-Data-Timestamp'] = \\ disk_file.data_timestamp.internal if disk_file.durable_timestamp: response.headers['X-Backend-Durable-Timestamp'] = \\ disk_file.durable_timestamp.internal response.headers['X-Backend-Fragments'] = \\ _make_backend_fragments_header(disk_file.fragments) response.content_length = int(metadata['Content-Length']) try: response.content_encoding = metadata['Content-Encoding'] except KeyError: pass return response 获取diskfile过程12345678# obj/server.py 中的get_diskfile,通过BaseDiskFileManager中的get_diskfile方法,返回BaseDiskFile对象# get_diskfile返回BaseDiskFile对象return self.diskfile_cls(self, dev_path, partition, account, container, obj, policy=policy, use_splice=self.use_splice, pipe_size=self.pipe_size, use_linkat=self.use_linkat, **kwargs) # diskfile_cls : BaseDiskFile","raw":null,"content":"<p>使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swift upload</div></pre></td></tr></table></figure></p>\n<p>上传文件,openstack-swift调用过程<br><img src=\"/uploads/2017-02-13 12-41-40.png\" alt=\"\"></p>\n<h2 id=\"入口函数\"><a href=\"#入口函数\" class=\"headerlink\" title=\"入口函数\"></a>入口函数</h2><a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HEAD</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Handle HTTP HEAD requests for the Swift Object Server.\"\"\"</span></div><div class=\"line\">        device, partition, account, container, obj, policy = \\</div><div class=\"line\">            get_name_and_placement(request, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"keyword\">True</span>)</div><div class=\"line\">            <span class=\"comment\">#从请求中获取相应信息,其中:</span></div><div class=\"line\">            <span class=\"comment\">#policy:根据request中的X-Backend-Storage-Policy-Index获得</span></div><div class=\"line\">            <span class=\"comment\">#device, partition, account, container, obj根据request.path获得</span></div><div class=\"line\">        frag_prefs = safe_json_loads(</div><div class=\"line\">            request.headers.get(<span class=\"string\">'X-Backend-Fragment-Preferences'</span>))</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            disk_file = self.get_diskfile(</div><div class=\"line\">                device, partition, account, container, obj,</div><div class=\"line\">                policy=policy, frag_prefs=frag_prefs)</div><div class=\"line\">                <span class=\"comment\"># disk_file:BaseDiskFile对象</span></div><div class=\"line\">        <span class=\"keyword\">except</span> DiskFileDeviceUnavailable:</div><div class=\"line\">            <span class=\"keyword\">return</span> HTTPInsufficientStorage(drive=device, request=request)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            metadata = disk_file.read_metadata()</div><div class=\"line\">            <span class=\"comment\">#从object中读取metadata</span></div><div class=\"line\">        <span class=\"keyword\">except</span> DiskFileXattrNotSupported:</div><div class=\"line\">            <span class=\"keyword\">return</span> HTTPInsufficientStorage(drive=device, request=request)</div><div class=\"line\">        <span class=\"keyword\">except</span> (DiskFileNotExist, DiskFileQuarantined) <span class=\"keyword\">as</span> e:</div><div class=\"line\">            headers = &#123;&#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> hasattr(e, <span class=\"string\">'timestamp'</span>):</div><div class=\"line\">                headers[<span class=\"string\">'X-Backend-Timestamp'</span>] = e.timestamp.internal</div><div class=\"line\">            <span class=\"keyword\">return</span> HTTPNotFound(request=request, headers=headers,</div><div class=\"line\">                                conditional_response=<span class=\"keyword\">True</span>)</div><div class=\"line\">        conditional_etag = resolve_etag_is_at_header(request, metadata)</div><div class=\"line\">        response = Response(request=request, conditional_response=<span class=\"keyword\">True</span>,</div><div class=\"line\">                            conditional_etag=conditional_etag)</div><div class=\"line\">        response.headers[<span class=\"string\">'Content-Type'</span>] = metadata.get(</div><div class=\"line\">            <span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/octet-stream'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> metadata.items():</div><div class=\"line\">            <span class=\"keyword\">if</span> (is_sys_or_user_meta(<span class=\"string\">'object'</span>, key) <span class=\"keyword\">or</span></div><div class=\"line\">                    is_object_transient_sysmeta(key) <span class=\"keyword\">or</span></div><div class=\"line\">                    key.lower() <span class=\"keyword\">in</span> self.allowed_headers):</div><div class=\"line\">                response.headers[key] = value</div><div class=\"line\">        response.etag = metadata[<span class=\"string\">'ETag'</span>]</div><div class=\"line\">        ts = Timestamp(metadata[<span class=\"string\">'X-Timestamp'</span>])</div><div class=\"line\">        response.last_modified = math.ceil(float(ts))</div><div class=\"line\">        <span class=\"comment\"># Needed for container sync feature</span></div><div class=\"line\">        response.headers[<span class=\"string\">'X-Timestamp'</span>] = ts.normal</div><div class=\"line\">        response.headers[<span class=\"string\">'X-Backend-Timestamp'</span>] = ts.internal</div><div class=\"line\">        response.headers[<span class=\"string\">'X-Backend-Data-Timestamp'</span>] = \\</div><div class=\"line\">            disk_file.data_timestamp.internal</div><div class=\"line\">        <span class=\"keyword\">if</span> disk_file.durable_timestamp:</div><div class=\"line\">            response.headers[<span class=\"string\">'X-Backend-Durable-Timestamp'</span>] = \\</div><div class=\"line\">                disk_file.durable_timestamp.internal</div><div class=\"line\">        response.headers[<span class=\"string\">'X-Backend-Fragments'</span>] = \\</div><div class=\"line\">            _make_backend_fragments_header(disk_file.fragments)</div><div class=\"line\">        response.content_length = int(metadata[<span class=\"string\">'Content-Length'</span>])</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            response.content_encoding = metadata[<span class=\"string\">'Content-Encoding'</span>]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">return</span> response</div></pre></td></tr></table></figure>\n<h2 id=\"获取diskfile过程\"><a href=\"#获取diskfile过程\" class=\"headerlink\" title=\"获取diskfile过程\"></a>获取diskfile过程</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># obj/server.py 中的get_diskfile,通过BaseDiskFileManager中的get_diskfile方法,返回BaseDiskFile对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># get_diskfile返回BaseDiskFile对象</span></div><div class=\"line\"><span class=\"keyword\">return</span> self.diskfile_cls(self, dev_path,</div><div class=\"line\">                         partition, account, container, obj,</div><div class=\"line\">                         policy=policy, use_splice=self.use_splice,</div><div class=\"line\">                         pipe_size=self.pipe_size,</div><div class=\"line\">                         use_linkat=self.use_linkat, **kwargs)  <span class=\"comment\"># diskfile_cls : BaseDiskFile</span></div></pre></td></tr></table></figure>\n","categories":[{"name":"对象存储","slug":"对象存储","permalink":"https://makeitpossible16.github.io/categories/对象存储/"}],"tags":[{"name":"openstack-swift","slug":"openstack-swift","permalink":"https://makeitpossible16.github.io/tags/openstack-swift/"}]},{"title":"文件合并存储与单个存储优劣势分析","slug":"文件系统(seaweedfs)与关系型数据库优劣势分析","date":"2017-02-08T00:00:00.000Z","updated":"2017-02-10T15:24:26.352Z","comments":true,"path":"文件系统/文件系统(seaweedfs)与关系型数据库优劣势分析/","link":"","permalink":"https://makeitpossible16.github.io/文件系统/文件系统(seaweedfs)与关系型数据库优劣势分析/","excerpt":"","text":"问题引入经过一段时间的学习，想要把openstack-swift与seaweedfs进行结合，单纯考虑文件存储效率，对比把openstack-swift与seaweedfs进行结合后的存储效率是否会高于openstack-swift.问题最后可以简化为文件合并存储与单个存储优劣势比较. 具体分析文件单个存储从Linux内核文件系统出发,以ext3为例,参考深入解析Linux内核I/O剖析（open,write实现）,do_filp_open函数,Ext3文件系统读写过程分析当用户执行文件读写操作时,首先需要open相应的文件，然后再进行读写操作。在open操作时，首先将用户空间的文件名参数复制到内核空间,Linux kernel会执行do_filp_open函数,在do_filp_open函数中,沿着要打开文件名的整个路径，一层层解析路径，最后得到文件的dentry和vfsmount对象，保存到一个nameidata结构中,根据获得的nameidata结构，初始化一个file对象描述这个文件,File对象和文件的dentry和inode对象建立联系，并且将ext3的文件操作方法、映射处理方法（address space）注册到file对象中。File数据结构是Linux用来描述文件的关键数据结构，该对象在一个文件被进程打开的时候被创建。当一个文件被关闭的时候，file对象也会被立即销毁。执行open的最终结果:将文件描述符fd与文件管理结构file对应起来 文件合并存储文件读写是,若文件没有关闭,只需进行一次open操作,直接以lseek为例,参考linux内核文件IO的系统调用实现分析(flseek&amp;close),使用lseek,设置文件开始读取的位置,当调用read或write时直接从该位置读取数据. 结论 存储方式 优势 劣势 文件单个存储 存储过程简单,进行读写时直接进行读取,不需要进行lseek 容易产生页面空洞,导致磁盘扇区利用率降低,大量的文件,会增加文件系统需要维护的inode及dentry,降低文件存储效率. 合并存储 多个文件合并存储,减少文件系统需要维护的inode及dentry,文件连续写入,提高扇区利用率 文件读写时,需要进行lseek,增加文件偏移量查找操作 总结对于大规模存储系统,若能把大文件与小文件进行分开存储,大文件采用单文件存储,小文件使用合并存储,理论上可以提高系统存储效率.可以把openstack-swift与seaweedfs的存储部分进行结合,优化openstack-swift对象存储效率.","raw":null,"content":"<h2 id=\"问题引入\"><a href=\"#问题引入\" class=\"headerlink\" title=\"问题引入\"></a>问题引入</h2><p>经过一段时间的学习，想要把openstack-swift与seaweedfs进行结合，单纯考虑文件存储效率，对比把openstack-swift与seaweedfs进行结合后的存储效率是否会高于openstack-swift.问题最后可以简化为文件合并存储与单个存储优劣势比较.</p>\n<h2 id=\"具体分析\"><a href=\"#具体分析\" class=\"headerlink\" title=\"具体分析\"></a>具体分析</h2><h3 id=\"文件单个存储\"><a href=\"#文件单个存储\" class=\"headerlink\" title=\"文件单个存储\"></a>文件单个存储</h3><p>从Linux内核文件系统出发,以ext3为例,参考<a href=\"http://www.cnblogs.com/zengyiwen/p/5755186.html\" target=\"_blank\" rel=\"external\">深入解析Linux内核I/O剖析（open,write实现）</a>,<a href=\"http://book.2cto.com/201312/38238.html\" target=\"_blank\" rel=\"external\">do_filp_open函数</a>,<a href=\"http://alanwu.blog.51cto.com/3652632/1106506/\" target=\"_blank\" rel=\"external\">Ext3文件系统读写过程分析</a>当用户执行文件读写操作时,首先需要open相应的文件，然后再进行读写操作。在open操作时，首先将用户空间的文件名参数复制到内核空间,Linux kernel会执行do_filp_open函数,在do_filp_open函数中,沿着要打开文件名的整个路径，一层层解析路径，最后得到文件的dentry和vfsmount对象，保存到一个nameidata结构中,根据获得的nameidata结构，初始化一个file对象描述这个文件,File对象和文件的dentry和inode对象建立联系，并且将ext3的文件操作方法、映射处理方法（address space）注册到file对象中。<br>File数据结构是Linux用来描述文件的关键数据结构，该对象在一个文件被进程打开的时候被创建。当一个文件被关闭的时候，file对象也会被立即销毁。<br>执行open的最终结果:将文件描述符fd与文件管理结构file对应起来</p>\n<h3 id=\"文件合并存储\"><a href=\"#文件合并存储\" class=\"headerlink\" title=\"文件合并存储\"></a>文件合并存储</h3><p>文件读写是,若文件没有关闭,只需进行一次open操作,直接以lseek为例,参考<a href=\"http://linux.chinaunix.net/techdoc/system/2009/04/30/1109611.shtml\" target=\"_blank\" rel=\"external\">linux内核文件IO的系统调用实现分析(flseek&amp;close)</a>,使用lseek,设置文件开始读取的位置,当调用read或write时直接从该位置读取数据.</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">存储方式</th>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">文件单个存储</td>\n<td>存储过程简单,进行读写时直接进行读取,不需要进行lseek</td>\n<td>容易产生页面空洞,导致磁盘扇区利用率降低,大量的文件,会增加文件系统需要维护的inode及dentry,降低文件存储效率.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">合并存储</td>\n<td>多个文件合并存储,减少文件系统需要维护的inode及dentry,文件连续写入,提高扇区利用率</td>\n<td>文件读写时,需要进行lseek,增加文件偏移量查找操作</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于大规模存储系统,若能把大文件与小文件进行分开存储,大文件采用单文件存储,小文件使用合并存储,理论上可以提高系统存储效率.可以把openstack-swift与seaweedfs的存储部分进行结合,优化openstack-swift对象存储效率.</p>\n","categories":[{"name":"文件系统","slug":"文件系统","permalink":"https://makeitpossible16.github.io/categories/文件系统/"}],"tags":[{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"},{"name":"文件系统","slug":"文件系统","permalink":"https://makeitpossible16.github.io/tags/文件系统/"}]},{"title":"数据结构","slug":"数据结构","date":"2017-02-07T00:00:00.000Z","updated":"2017-02-07T13:37:16.495Z","comments":true,"path":"数据结构/数据结构/","link":"","permalink":"https://makeitpossible16.github.io/数据结构/数据结构/","excerpt":"","text":"数据结构都忘得差不多了,记录一下 二叉树遍历数据结构（六）——二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归实现前序遍历：根节点-&gt;左子树-&gt;右子树中序遍历：左子树-&gt;根节点-&gt;右子树后序遍历：左子树-&gt;右子树-&gt;根节点","raw":null,"content":"<p>数据结构都忘得差不多了,记录一下</p>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><p><a href=\"http://blog.csdn.net/fansongy/article/details/6798278/\" target=\"_blank\" rel=\"external\">数据结构（六）——二叉树 前序、中序、后序、层次遍历及非递归实现 查找、统计个数、比较、求深度的递归实现</a><br>前序遍历：根节点-&gt;左子树-&gt;右子树<br>中序遍历：左子树-&gt;根节点-&gt;右子树<br>后序遍历：左子树-&gt;右子树-&gt;根节点</p>\n","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://makeitpossible16.github.io/categories/数据结构/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://makeitpossible16.github.io/tags/数据结构/"}]},{"title":"python语法记录","slug":"python语法记录","date":"2017-02-07T00:00:00.000Z","updated":"2017-02-13T08:36:26.483Z","comments":true,"path":"python语法/python语法记录/","link":"","permalink":"https://makeitpossible16.github.io/python语法/python语法记录/","excerpt":"","text":"记录一下忘记的Python语法 StringIO负责在内存中读写string,其中在openstack-swift的mem_diskfile.py中提到::param fp: StringIO in-memory representation objectStringIO和BytesIO os.fstat()os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。Python os.fstat() 方法","raw":null,"content":"<p>记录一下忘记的Python语法</p>\n<h2 id=\"StringIO\"><a href=\"#StringIO\" class=\"headerlink\" title=\"StringIO\"></a>StringIO</h2><p>负责在内存中读写string,其中在openstack-swift的mem_diskfile.py中提到::param fp: <code>StringIO</code> in-memory representation object<br><a href=\"StringIO和BytesIO\">StringIO和BytesIO</a></p>\n<h2 id=\"os-fstat\"><a href=\"#os-fstat\" class=\"headerlink\" title=\"os.fstat()\"></a>os.fstat()</h2><p>os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。<br><a href=\"http://www.runoob.com/python/os-fstat.html\" target=\"_blank\" rel=\"external\">Python os.fstat() 方法</a></p>\n","categories":[{"name":"python语法","slug":"python语法","permalink":"https://makeitpossible16.github.io/categories/python语法/"}],"tags":[{"name":"python","slug":"python","permalink":"https://makeitpossible16.github.io/tags/python/"}]},{"title":"ubuntu16.04搭建openstack-swift单机开发环境","slug":"ubuntu16.04搭建openstack-swift单机开发环境","date":"2017-01-30T00:00:00.000Z","updated":"2017-02-12T06:27:43.015Z","comments":true,"path":"对象存储/ubuntu16.04搭建openstack-swift单机开发环境/","link":"","permalink":"https://makeitpossible16.github.io/对象存储/ubuntu16.04搭建openstack-swift单机开发环境/","excerpt":"","text":"使用虚拟机进行远程调试电脑太卡，用着不爽，所以搭建单机板环境，按照SAIO搭建,在Ubuntu14.04上搭建没有啥问题，但在Ubuntu16.04上会出现问题，记录一下。 出现问题1123456789101112Traceback (most recent call last): File \"/usr/local/bin/swift-object-server\", line 6, in &lt;module&gt; exec(compile(open(__file__).read(), __file__, 'exec')) File \"/home/ubuntu/swift/bin/swift-object-server\", line 19, in &lt;module&gt; from swift.common.wsgi import run_wsgi File \"/home/ubuntu/swift/swift/common/wsgi.py\", line 41, in &lt;module&gt; from swift.common.storage_policy import BindPortsCache File \"/home/ubuntu/swift/swift/common/storage_policy.py\", line 25, in &lt;module&gt; from pyeclib.ec_iface import ECDriver, ECDriverError, VALID_EC_TYPES File \"/usr/local/lib/python2.7/dist-packages/pyeclib/ec_iface.py\", line 29, in &lt;module&gt; from pyeclib_c import check_backend_availableImportError: /usr/local/lib/python2.7/dist-packages/pyeclib_c.so: undefined symbol: liberasurecode_backend_available 系统找不到liberasurecode_backend_available。 解决方法参考openstack-swift bug反馈，得到解决方法:根据Alex Usov 的回答：Finally got it working. Had to compile liberasurecode from https://github.com/openstack/liberasurecode.git (https://github.com/openstack/liberasu…), add line /usr/local/lib to /etc/ld.so.conf, run ldconfig, and restart openstack-swift-proxy. 具体操作：1234567$ git clone https://github.com/openstack/liberasurecode.git$ cd liberasurecode$ ./autogen.sh$ ./configure$ make$ make test$ sudo make install 在 /etc/ld.so.conf中添加一行：/usr/local/lib运行 ldconfig 创建container失败错误提示: 404Container PUT failed: http://127.0.0.1:8080/v1/AUTH_test/test 404 Not Found [first 60 chars of response] Not FoundThe resource could not be found. 解决方法参考unable to create containers错误出现原因: 删除了相关存储文件夹,即/mnt/sdb1 或 /srv 中相关文件夹,按照SAIO - Swift All In One重新搭建环境即可","raw":null,"content":"<p>使用虚拟机进行远程调试电脑太卡，用着不爽，所以搭建单机板环境，按照<a href=\"http://docs.openstack.org/developer/swift/development_saio.html\" target=\"_blank\" rel=\"external\">SAIO</a>搭建,在Ubuntu14.04上搭建没有啥问题，但在Ubuntu16.04上会出现问题，记录一下。</p>\n<h2 id=\"出现问题1\"><a href=\"#出现问题1\" class=\"headerlink\" title=\"出现问题1\"></a>出现问题1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/bin/swift-object-server\"</span>, line 6, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    <span class=\"built_in\">exec</span>(compile(open(__file__).read(), __file__, <span class=\"string\">'exec'</span>))</div><div class=\"line\">  File <span class=\"string\">\"/home/ubuntu/swift/bin/swift-object-server\"</span>, line 19, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from swift.common.wsgi import run_wsgi</div><div class=\"line\">  File <span class=\"string\">\"/home/ubuntu/swift/swift/common/wsgi.py\"</span>, line 41, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from swift.common.storage_policy import BindPortsCache</div><div class=\"line\">  File <span class=\"string\">\"/home/ubuntu/swift/swift/common/storage_policy.py\"</span>, line 25, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from pyeclib.ec_iface import ECDriver, ECDriverError, VALID_EC_TYPES</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/pyeclib/ec_iface.py\"</span>, line 29, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from pyeclib_c import check_backend_available</div><div class=\"line\">ImportError: /usr/<span class=\"built_in\">local</span>/lib/python2.7/dist-packages/pyeclib_c.so: undefined symbol: liberasurecode_backend_available</div></pre></td></tr></table></figure>\n<p>系统找不到liberasurecode_backend_available。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>参考<a href=\"https://ask.openstack.org/en/question/93267/unable-to-start-swift-proxy-liberasurecode-missing-libshssso/\" target=\"_blank\" rel=\"external\">openstack-swift bug反馈</a>，得到解决方法:<br>根据Alex Usov 的回答：<br>Finally got it working. Had to compile liberasurecode from <a href=\"https://github.com/openstack/liberasurecode.git\" target=\"_blank\" rel=\"external\">https://github.com/openstack/liberasurecode.git</a> (<a href=\"https://github.com/openstack/liberasu\" target=\"_blank\" rel=\"external\">https://github.com/openstack/liberasu</a>…), add line /usr/local/lib to /etc/ld.so.conf, run ldconfig, and restart openstack-swift-proxy.</p>\n<p>具体操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/openstack/liberasurecode.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> liberasurecode</div><div class=\"line\">$ ./autogen.sh</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ make <span class=\"built_in\">test</span></div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure></p>\n<p>在 /etc/ld.so.conf中添加一行：/usr/local/lib<br>运行 ldconfig</p>\n<h2 id=\"创建container失败\"><a href=\"#创建container失败\" class=\"headerlink\" title=\"创建container失败\"></a>创建container失败</h2><p>错误提示: 404<br>Container PUT failed: <a href=\"http://127.0.0.1:8080/v1/AUTH_test/test\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8080/v1/AUTH_test/test</a> 404 Not Found  [first 60 chars of response] <html><h1>Not Found</h1><p>The resource could not be found.</p>\n<h3 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>参考<a href=\"https://answers.launchpad.net/swift/+question/235980\" target=\"_blank\" rel=\"external\">unable to create containers</a><br>错误出现原因: 删除了相关存储文件夹,即/mnt/sdb1 或 /srv 中相关文件夹,按照<a href=\"http://docs.openstack.org/developer/swift/development_saio.html\" target=\"_blank\" rel=\"external\">SAIO - Swift All In One</a>重新搭建环境即可</p>\n</html></p>","categories":[{"name":"对象存储","slug":"对象存储","permalink":"https://makeitpossible16.github.io/categories/对象存储/"}],"tags":[{"name":"openstack-swift","slug":"openstack-swift","permalink":"https://makeitpossible16.github.io/tags/openstack-swift/"}]},{"title":"linux文件存储机制","slug":"linux文件存储机制","date":"2017-01-21T00:00:00.000Z","updated":"2017-01-21T14:05:03.896Z","comments":true,"path":"文件存储/linux文件存储机制/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/linux文件存储机制/","excerpt":"","text":"Linux 内核的文件 Cache 管理机制介绍从内核文件系统看文件读写过程","raw":null,"content":"<p><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cache/\" target=\"_blank\" rel=\"external\">Linux 内核的文件 Cache 管理机制介绍</a><br><a href=\"http://www.cnblogs.com/huxiao-tee/p/4657851.html\" target=\"_blank\" rel=\"external\">从内核文件系统看文件读写过程</a></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://makeitpossible16.github.io/tags/linux/"},{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/tags/文件存储/"}]},{"title":"查找-数据结构学习","slug":"查找-数据结构学习","date":"2017-01-21T00:00:00.000Z","updated":"2017-02-14T04:08:27.481Z","comments":true,"path":"数据结构/查找-数据结构学习/","link":"","permalink":"https://makeitpossible16.github.io/数据结构/查找-数据结构学习/","excerpt":"","text":"简单清晰的B树、Trie树详解简单清晰的B树、Trie树详解","raw":null,"content":"<h2 id=\"简单清晰的B树、Trie树详解\"><a href=\"#简单清晰的B树、Trie树详解\" class=\"headerlink\" title=\"简单清晰的B树、Trie树详解\"></a>简单清晰的B树、Trie树详解</h2><p><a href=\"http://blog.csdn.net/yang_yulei/article/details/26104921\" target=\"_blank\" rel=\"external\">简单清晰的B树、Trie树详解</a></p>\n","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://makeitpossible16.github.io/categories/数据结构/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://makeitpossible16.github.io/tags/数据结构/"}]},{"title":"openstack-swift调试","slug":"openstack-swift调试","date":"2017-01-21T00:00:00.000Z","updated":"2017-01-29T14:29:46.391Z","comments":true,"path":"对象存储/openstack-swift调试/","link":"","permalink":"https://makeitpossible16.github.io/对象存储/openstack-swift调试/","excerpt":"","text":"最近在学习openstack-swift的源码，想通过调试的方式弄清楚它的运行方式，记录一下，提高一下效率。 启用调试按照swift all in one的方式搭建，没遇到啥问题。调试的方案有两种（都支持远程调试），一种是采用pydev,这种方式需要禁用swift的多线程；另一种采用winpdb，这种方式支持多线程。禁用多线程：1eventlet.patcher.monkey_patch(all=False, socket=True, time=True, thread=False) 使用pydevd调试 我主要采用pycharm + pydevd + NFS的方式远程调试，具体操作参照这两篇文章：openstack调试远程调试其实只要使用NFS把代码挂载到本地，在pycharm中设置远程调试，代码中加入断点即可。加入断点代码 12import pydevdpydevd.settrace(&lt;pycharm所在机子IP&gt;, 设置端口, stdoutToServer=True, stderrToServer=True) 使用winpdb调试在代码中加入断点 12import rpdb2rpdb2.start_embedded_debugger(&apos;12345&apos;,fAllowRemote=True) start_embedded_debugger第一个参数为密码，在winpdb中attach时输入，第二个参数启用远程调试，启用远程调试时，在远程调试的机子上启动winpdb，attach时输入密码，并输入swift部署机子IP即可。 总结我喜欢用方式一，可以把调试的信息直接标注在代码旁。方式二支持分布式调试，但太轻量化，只能看，不能添加，各有优缺点，按需选择。修改代码后需要重启swift才能生效。调试记录信息会放到github上，github地址","raw":null,"content":"<p>最近在学习openstack-swift的源码，想通过调试的方式弄清楚它的运行方式，记录一下，提高一下效率。</p>\n<h2 id=\"启用调试\"><a href=\"#启用调试\" class=\"headerlink\" title=\"启用调试\"></a>启用调试</h2><p>按照swift all in one的方式搭建，没遇到啥问题。<br>调试的方案有两种（都支持远程调试），一种是采用pydev,这种方式需要禁用swift的多线程；另一种采用winpdb，这种方式支持多线程。<br>禁用多线程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eventlet.patcher.monkey_patch(all=<span class=\"keyword\">False</span>, socket=<span class=\"keyword\">True</span>, time=<span class=\"keyword\">True</span>, thread=<span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用pydevd调试\"><a href=\"#使用pydevd调试\" class=\"headerlink\" title=\"使用pydevd调试\"></a>使用pydevd调试</h3><p> 我主要采用pycharm + pydevd + NFS的方式远程调试，具体操作参照这两篇文章：<a href=\"http://yikun.github.io/2016/02/23/%E4%BC%98%E9%9B%85%E5%9C%B0%E8%B0%83%E8%AF%95OpenStack/#4-_启动调试服务器\" target=\"_blank\" rel=\"external\">openstack调试</a><br><a href=\"http://debugopenstack.blogspot.com.tr/\" target=\"_blank\" rel=\"external\">远程调试</a><br>其实只要使用NFS把代码挂载到本地，在pycharm中设置远程调试，代码中加入断点即可。加入断点代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import pydevd</div><div class=\"line\">pydevd.settrace(&lt;pycharm所在机子IP&gt;, 设置端口, stdoutToServer=True, stderrToServer=True)</div></pre></td></tr></table></figure>\n<h3 id=\"使用winpdb调试\"><a href=\"#使用winpdb调试\" class=\"headerlink\" title=\"使用winpdb调试\"></a>使用winpdb调试</h3><p>在代码中加入断点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import rpdb2</div><div class=\"line\">rpdb2.start_embedded_debugger(&apos;12345&apos;,fAllowRemote=True)</div></pre></td></tr></table></figure>\n<p>start_embedded_debugger第一个参数为密码，在winpdb中attach时输入，第二个参数启用远程调试，启用远程调试时，在远程调试的机子上启动winpdb，attach时输入密码，并输入swift部署机子IP即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我喜欢用方式一，可以把调试的信息直接标注在代码旁。方式二支持分布式调试，但太轻量化，只能看，不能添加，各有优缺点，按需选择。<br>修改代码后需要重启swift才能生效。<br>调试记录信息会放到github上，<a href=\"https://github.com/MakeItPossible16/openstack-swift\" target=\"_blank\" rel=\"external\">github地址</a></p>\n","categories":[{"name":"对象存储","slug":"对象存储","permalink":"https://makeitpossible16.github.io/categories/对象存储/"}],"tags":[{"name":"openstack-swift","slug":"openstack-swift","permalink":"https://makeitpossible16.github.io/tags/openstack-swift/"}]},{"title":"kafka学习笔记","slug":"kafka学习笔记","date":"2017-01-11T00:00:00.000Z","updated":"2017-01-21T11:58:44.205Z","comments":true,"path":"kafka/kafka学习笔记/","link":"","permalink":"https://makeitpossible16.github.io/kafka/kafka学习笔记/","excerpt":"","text":"学习资源kafka入门介绍 学习目的构建日志流处理系统，初步实现使用logstash进行日志采集，kafka作为缓存队列，flink进行实时数据分析处理，seaweedfs作为后端存储。 笔记核心API类型应用程序使用 Producer API 发布消息到1个或多个topic（主题）。应用程序使用 Consumer API 来订阅一个或多个topic，并处理产生的消息。应用程序使用 Streams API 充当一个流处理器，从1个或多个topic消费输入流，并生产一个输出流到1个或多个输出topic，有效地将输入流转换到输出流。Connector API允许构建或运行可重复使用的生产者或消费者，将topic连接到现有的应用程序或数据系统。例如，一个关系数据库的连接器可捕获每一个变化。 基本术语Topic Kafka将消息种子(Feed)分门别类，每一类的消息称之为一个主题(Topic).Producer 发布消息的对象称之为主题生产者(Kafka topic producer)Consumer 订阅消息并处理发布的消息的种子的对象称之为主题消费者(consumers)Broker 已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理(Broker). 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。 消费者通常来讲，消息模型可以分为两种， 队列和发布-订阅式。 队列的处理方式是 一组消费者从服务器读取消息，一条消息只有其中的一个消费者来处理。在发布-订阅模型中，消息被广播给所有的消费者，接收到消息的消费者都可以处理此消息。Kafka为这两种模型提供了单一的消费者抽象模型： 消费者组 （consumer group）。 消费者用一个消费者组名标记自己。 一个发布在Topic上消息被分发给此消费者组中的一个消费者。 假如所有的消费者都在一个组中，那么这就变成了queue模型。 假如所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型。 kafka有比传统的消息系统更强的顺序保证如果多个消费者从队列消费，则服务器按存储的顺序发送消息，但是，尽管服务器按顺序发送，消息异步传递到消费者，因此消息可能乱序到达消费者。kafka通过并行topic的parition —— kafka提供了顺序保证和负载均衡。每个partition仅由同一个消费者组中的一个消费者消费到。并确保消费者是该partition的唯一消费者，并按顺序消费数据。每个topic有多个分区，则需要对多个消费者做负载均衡，但请注意，相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息。 kafka可作为存储系统","raw":null,"content":"<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><p><a href=\"http://www.orchome.com/5\" target=\"_blank\" rel=\"external\">kafka入门介绍</a></p>\n<h2 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的\"></a>学习目的</h2><p>构建日志流处理系统，初步实现使用logstash进行日志采集，kafka作为缓存队列，flink进行实时数据分析处理，seaweedfs作为后端存储。</p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><h3 id=\"核心API类型\"><a href=\"#核心API类型\" class=\"headerlink\" title=\"核心API类型\"></a>核心API类型</h3><p>应用程序使用 Producer API 发布消息到1个或多个topic（主题）。<br>应用程序使用 Consumer API 来订阅一个或多个topic，并处理产生的消息。<br>应用程序使用 Streams API 充当一个流处理器，从1个或多个topic消费输入流，并生产一个输出流到1个或多个输出topic，有效地将输入流转换到输出流。<br>Connector API允许构建或运行可重复使用的生产者或消费者，将topic连接到现有的应用程序或数据系统。例如，一个关系数据库的连接器可捕获每一个变化。</p>\n<h3 id=\"基本术语\"><a href=\"#基本术语\" class=\"headerlink\" title=\"基本术语\"></a>基本术语</h3><p>Topic<br>  Kafka将消息种子(Feed)分门别类，每一类的消息称之为一个主题(Topic).<br>Producer<br>  发布消息的对象称之为主题生产者(Kafka topic producer)<br>Consumer<br>  订阅消息并处理发布的消息的种子的对象称之为主题消费者(consumers)<br>Broker<br>  已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理(Broker). 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>通常来讲，消息模型可以分为两种， 队列和发布-订阅式。 队列的处理方式是 一组消费者从服务器读取消息，一条消息只有其中的一个消费者来处理。在发布-订阅模型中，消息被广播给所有的消费者，接收到消息的消费者都可以处理此消息。Kafka为这两种模型提供了单一的消费者抽象模型： 消费者组 （consumer group）。 消费者用一个消费者组名标记自己。 一个发布在Topic上消息被分发给此消费者组中的一个消费者。 假如所有的消费者都在一个组中，那么这就变成了queue模型。 假如所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型。</p>\n<h3 id=\"kafka有比传统的消息系统更强的顺序保证\"><a href=\"#kafka有比传统的消息系统更强的顺序保证\" class=\"headerlink\" title=\"kafka有比传统的消息系统更强的顺序保证\"></a>kafka有比传统的消息系统更强的顺序保证</h3><p>如果多个消费者从队列消费，则服务器按存储的顺序发送消息，但是，尽管服务器按顺序发送，消息异步传递到消费者，因此消息可能乱序到达消费者。<br>kafka通过并行topic的parition —— kafka提供了顺序保证和负载均衡。每个partition仅由同一个消费者组中的一个消费者消费到。并确保消费者是该partition的唯一消费者，并按顺序消费数据。每个topic有多个分区，则需要对多个消费者做负载均衡，但请注意，相同的消费者组中不能有比分区更多的消费者，否则多出的消费者一直处于空等待，不会收到消息。</p>\n<h3 id=\"kafka可作为存储系统\"><a href=\"#kafka可作为存储系统\" class=\"headerlink\" title=\"kafka可作为存储系统\"></a>kafka可作为存储系统</h3>","categories":[{"name":"kafka","slug":"kafka","permalink":"https://makeitpossible16.github.io/categories/kafka/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://makeitpossible16.github.io/tags/kafka/"}]},{"title":"linux内核学习-数据结构","slug":"linux内核学习-数据结构","date":"2017-01-04T00:00:00.000Z","updated":"2017-01-21T13:35:37.846Z","comments":true,"path":"linux内核/linux内核学习-数据结构/","link":"","permalink":"https://makeitpossible16.github.io/linux内核/linux内核学习-数据结构/","excerpt":"","text":"container_of用于从包含在某个结构中的指针获得结构本身的指针，通俗地讲就是通过结构体变量中某个成员的首地址进而获得整个结构体变量的首地址。Linux内核中的常用宏container_of其实很简单 linux内核Hash 链表Linux内核哈希表分析与应用 Hash应用:有一个庞大的字符串数组，然后给你一个单独的字符串，让你从这个数组中查找是否有这个字符串并找到它暴雪公司关于字符串匹配的hash算法 典型的应用场景(Hbase，Accumulo，Leveldb)：某些存储系统的设计中，会存在空查询缺陷：当查询一个不存在的key时，需要访问慢设备，导致效率低下。比如一个前端页面的缓存系统，可能这样设计：先查询某个页面在本地是否存在，如果存在就直接返回，如果不存在，就从后端获取。但是当频繁从缓存系统查询一个页面时，缓存系统将会频繁请求后端，把压力导入后端。这是只要增加一个bloom算法的服务，后端插入一个key时，在这个服务中设置一次需要查询后端时，先判断key在后端是否存在，这样就能避免后端的压力。布隆过滤器(Bloom Filter)详解算法学习 - Bloom Filter(布隆过滤器)学习实现(C++实现) RadixTree（基数树）应用：Linux radix树最广泛的用途是用于内存管理，结构address_space通过radix树跟踪绑定到地址映射上的核心页，该radix树允许内存管理代码快速查找标识为dirty或writeback的页。其使用的是数据类型unsigned long的固定长度输入的版本。每级代表了输入空间固定位数。Linux radix树的API函数在lib/radix-tree.c中实现。（把页指针和描述页状态的结构映射起来，使能快速查询一个页的信息。）RadixTree（基数树）","raw":null,"content":"<h2 id=\"container-of\"><a href=\"#container-of\" class=\"headerlink\" title=\"container_of\"></a>container_of</h2><p>用于从包含在某个结构中的指针获得结构本身的指针，通俗地讲就是通过结构体变量中某个成员的首地址进而获得整个结构体变量的首地址。<br><a href=\"http://blog.csdn.net/npy_lp/article/details/7010752\" target=\"_blank\" rel=\"external\">Linux内核中的常用宏container_of其实很简单</a></p>\n<h2 id=\"linux内核Hash-链表\"><a href=\"#linux内核Hash-链表\" class=\"headerlink\" title=\"linux内核Hash 链表\"></a>linux内核Hash 链表</h2><p><a href=\"http://blog.csdn.net/tigerjibo/article/details/8450995\" target=\"_blank\" rel=\"external\">Linux内核哈希表分析与应用</a></p>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><p>应用:<br>有一个庞大的字符串数组，然后给你一个单独的字符串，让你从这个数组中查找是否有这个字符串并找到它<br><a href=\"http://blog.csdn.net/shanzhizi/article/details/7736526#comments\" target=\"_blank\" rel=\"external\">暴雪公司关于字符串匹配的hash算法</a></p>\n<p>典型的应用场景(Hbase，Accumulo，Leveldb)：<br>某些存储系统的设计中，会存在空查询缺陷：当查询一个不存在的key时，需要访问慢设备，导致效率低下。<br>比如一个前端页面的缓存系统，可能这样设计：先查询某个页面在本地是否存在，如果存在就直接返回，如果不存在，就从后端获取。但是当频繁从缓存系统查询一个页面时，缓存系统将会频繁请求后端，把压力导入后端。<br>这是只要增加一个bloom算法的服务，后端插入一个key时，在这个服务中设置一次<br>需要查询后端时，先判断key在后端是否存在，这样就能避免后端的压力。<br><a href=\"http://www.cnblogs.com/liyulong1982/p/6013002.html\" target=\"_blank\" rel=\"external\">布隆过滤器(Bloom Filter)详解</a><br><a href=\"http://blog.csdn.net/alps1992/article/details/44610587\" target=\"_blank\" rel=\"external\">算法学习 - Bloom Filter(布隆过滤器)学习实现(C++实现)</a></p>\n<h2 id=\"RadixTree（基数树）\"><a href=\"#RadixTree（基数树）\" class=\"headerlink\" title=\"RadixTree（基数树）\"></a>RadixTree（基数树）</h2><p>应用：Linux radix树最广泛的用途是用于内存管理，结构address_space通过radix树跟踪绑定到地址映射上的核心页，该radix树允许内存管理代码快速查找标识为dirty或writeback的页。其使用的是数据类型unsigned long的固定长度输入的版本。每级代表了输入空间固定位数。Linux radix树的API函数在lib/radix-tree.c中实现。（把页指针和描述页状态的结构映射起来，使能快速查询一个页的信息。）<br><a href=\"http://blog.csdn.net/yang_yulei/article/details/46371975\" target=\"_blank\" rel=\"external\">RadixTree（基数树）</a></p>\n","categories":[{"name":"linux内核","slug":"linux内核","permalink":"https://makeitpossible16.github.io/categories/linux内核/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://makeitpossible16.github.io/tags/linux/"},{"name":"内核","slug":"内核","permalink":"https://makeitpossible16.github.io/tags/内核/"},{"name":"数据结构","slug":"数据结构","permalink":"https://makeitpossible16.github.io/tags/数据结构/"}]},{"title":"linux命令学习","slug":"linux命令学习","date":"2017-01-02T00:00:00.000Z","updated":"2017-01-03T12:52:27.902Z","comments":true,"path":"linux命令/linux命令学习/","link":"","permalink":"https://makeitpossible16.github.io/linux命令/linux命令学习/","excerpt":"","text":"虽然使用linux有很长一段时间,但对于一些平时用不到的命令,还是比较生疏,记录一下 awkAWK是一种处理文本文件的语言，是一个强大的文本分析工具。awk使用介绍awk print 学习 sort用于排序linux之sort用法 uniq报告或删除文件中重复的行。linux uniq 命令详解 tee读取标准输入的数据，并将其内容输出成文件linux tee 命令详解 /dev/null可以把/dev/null看作一个”黑洞”，它非常等价于一个只写文件，所有写入它的内容都会永远丢失。linux下/dev/null的用途Linux下” &gt;/dev/null 2&gt;&amp;1 “相关知识说明 nohup程序后台运行,如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令.命令格式 : nohup command &amp;linux nohup命令详解 screenscreen 算是 linux 运维一个中高级技巧。通过 screen 命令创建的环境下运行的终端命令，其父进程不是 sshd 登录会话，而是 screen 。这样就可以即避免用户退出进程消失的问题，又随时能重新接管回终端继续操作。创建独立的 screen 命令如下：screen -dmS elkscreen_1接管连入创建的 elkscreen_1 命令如下：screen -r elkscreen_1然后你可以看到一个一模一样的终端，运行 logstash 之后，不要按 Ctrl+C，而是按 Ctrl+A+D 键，断开环境。想重新接管，依然 screen -r elkscreen_1 即可。如果创建了多个 screen，查看列表命令如下：screen -list需要长期后台运行的大量程序,使用daemontools","raw":null,"content":"<p>虽然使用linux有很长一段时间,但对于一些平时用不到的命令,还是比较生疏,记录一下</p>\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。<br><a href=\"http://www.runoob.com/linux/linux-comm-awk.html\" target=\"_blank\" rel=\"external\">awk使用介绍</a><br><a href=\"http://blog.csdn.net/andyxm/article/details/5964071\" target=\"_blank\" rel=\"external\">awk print 学习</a></p>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h2><p>用于排序<br><a href=\"http://www.cnblogs.com/dong008259/archive/2011/12/08/2281214.html\" target=\"_blank\" rel=\"external\">linux之sort用法</a></p>\n<h2 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"uniq\"></a>uniq</h2><p>报告或删除文件中重复的行。<br><a href=\"http://blog.csdn.net/jesseen/article/details/8005056\" target=\"_blank\" rel=\"external\">linux uniq 命令详解</a></p>\n<h2 id=\"tee\"><a href=\"#tee\" class=\"headerlink\" title=\"tee\"></a>tee</h2><p>读取标准输入的数据，并将其内容输出成文件<br><a href=\"http://liubin.blog.51cto.com/282313/131298\" target=\"_blank\" rel=\"external\">linux tee 命令详解</a></p>\n<h2 id=\"dev-null\"><a href=\"#dev-null\" class=\"headerlink\" title=\"/dev/null\"></a>/dev/null</h2><p>可以把/dev/null看作一个”黑洞”，它非常等价于一个只写文件，所有写入它的内容都会永远丢失。<br><a href=\"http://www.2cto.com/os/201412/361275.html\" target=\"_blank\" rel=\"external\">linux下/dev/null的用途</a><br><a href=\"http://blog.csdn.net/sunrier/article/details/7695839/\" target=\"_blank\" rel=\"external\">Linux下” &gt;/dev/null 2&gt;&amp;1 “相关知识说明</a></p>\n<h2 id=\"nohup\"><a href=\"#nohup\" class=\"headerlink\" title=\"nohup\"></a>nohup</h2><p>程序后台运行,如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令.<br>命令格式 : nohup command &amp;<br><a href=\"http://www.2cto.com/os/201301/185701.html\" target=\"_blank\" rel=\"external\">linux nohup命令详解</a></p>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><p>screen 算是 linux 运维一个中高级技巧。通过 screen 命令创建的环境下运行的终端命令，其父进程不是 sshd 登录会话，而是 screen 。这样就可以即避免用户退出进程消失的问题，又随时能重新接管回终端继续操作。<br>创建独立的 screen 命令如下：<br>screen -dmS elkscreen_1<br>接管连入创建的 elkscreen_1 命令如下：<br>screen -r elkscreen_1<br>然后你可以看到一个一模一样的终端，运行 logstash 之后，不要按 Ctrl+C，而是按 Ctrl+A+D 键，断开环境。想重新接管，依然 screen -r elkscreen_1 即可。<br>如果创建了多个 screen，查看列表命令如下：<br>screen -list<br><a href=\"http://kibana.logstash.es/content/logstash/get-start/daemon.html\" target=\"_blank\" rel=\"external\">需要长期后台运行的大量程序</a>,使用daemontools</p>\n","categories":[{"name":"linux命令","slug":"linux命令","permalink":"https://makeitpossible16.github.io/categories/linux命令/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://makeitpossible16.github.io/tags/linux/"}]},{"title":"ELKStack搭建问题总结","slug":"ELKStack搭建问题总结","date":"2017-01-02T00:00:00.000Z","updated":"2017-01-02T15:58:17.559Z","comments":true,"path":"ELKStack/ELKStack搭建问题总结/","link":"","permalink":"https://makeitpossible16.github.io/ELKStack/ELKStack搭建问题总结/","excerpt":"","text":"使用Docker搭建ELKStack时,elasticsearch自动退出,使用1docker logs [dockerName] 问题查看日志, 日志输出为12ERROR: bootstrap checks failedmax virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 解决方案Elasticsearch5.0 安装问题集锦 切换到root用户修改配置sysctl.conf vi /etc/sysctl.conf 添加下面配置： vm.max_map_count=655360 并执行命令： sysctl -p 然后，重新启动elasticsearch，即可启动成功。","raw":null,"content":"<p>使用Docker搭建ELKStack时,elasticsearch自动退出,使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker logs [dockerName]</div></pre></td></tr></table></figure></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>查看日志, 日志输出为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR: bootstrap checks failed</div><div class=\"line\">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</div></pre></td></tr></table></figure></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p><a href=\"max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\">Elasticsearch5.0 安装问题集锦</a></p>\n<p>切换到root用户修改配置sysctl.conf</p>\n<p>vi /etc/sysctl.conf</p>\n<p>添加下面配置：</p>\n<p>vm.max_map_count=655360</p>\n<p>并执行命令：</p>\n<p>sysctl -p</p>\n<p>然后，重新启动elasticsearch，即可启动成功。</p>\n","categories":[{"name":"ELKStack","slug":"ELKStack","permalink":"https://makeitpossible16.github.io/categories/ELKStack/"}],"tags":[{"name":"ELKStack","slug":"ELKStack","permalink":"https://makeitpossible16.github.io/tags/ELKStack/"},{"name":"日志分析","slug":"日志分析","permalink":"https://makeitpossible16.github.io/tags/日志分析/"},{"name":"流处理","slug":"流处理","permalink":"https://makeitpossible16.github.io/tags/流处理/"}]},{"title":"linux学习-linux文件存储","slug":"linux学习-linux文件存储","date":"2017-01-01T00:00:00.000Z","updated":"2017-02-14T04:08:59.965Z","comments":true,"path":"文件存储/linux学习-linux文件存储/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/linux学习-linux文件存储/","excerpt":"","text":"linux文件存储一直对文件存储过程不太理解,估计是操作系统没学好,今天看了这篇文章Linux文件存储结构，包括目录项、inode、数据块,感觉思路一下子清晰了. 根据linux一切皆文件的思想,目录项也作为一个文件存储,存储的内容为inode和文件名. linux文件查找文件系统中的目录查找Linux中文件名解析处理源码分析","raw":null,"content":"<h2 id=\"linux文件存储\"><a href=\"#linux文件存储\" class=\"headerlink\" title=\"linux文件存储\"></a>linux文件存储</h2><p>一直对文件存储过程不太理解,估计是操作系统没学好,今天看了这篇文章<a href=\"http://c.biancheng.net/cpp/html/2780.html\" target=\"_blank\" rel=\"external\">Linux文件存储结构，包括目录项、inode、数据块</a>,感觉思路一下子清晰了. 根据linux一切皆文件的思想,目录项也作为一个文件存储,存储的内容为inode和文件名.</p>\n<h2 id=\"linux文件查找\"><a href=\"#linux文件查找\" class=\"headerlink\" title=\"linux文件查找\"></a>linux文件查找</h2><p><a href=\"http://www.cnblogs.com/cobbliu/p/4888751.html\" target=\"_blank\" rel=\"external\">文件系统中的目录查找</a><br><a href=\"http://alanwu.blog.51cto.com/3652632/1120652\" target=\"_blank\" rel=\"external\">Linux中文件名解析处理源码分析</a></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://makeitpossible16.github.io/tags/linux/"}]},{"title":"seaweedfs源码阅读记录9-生成fid过程","slug":"seaweedfs源码阅读记录9-生成fid过程","date":"2016-12-16T00:00:00.000Z","updated":"2016-12-16T14:27:23.010Z","comments":true,"path":"文件存储/seaweedfs源码阅读记录9-生成fid过程/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读记录9-生成fid过程/","excerpt":"","text":"使用命令 : curl -X POST http://localhost:9333/dir/assign 在topology.go 中12345678func (t *Topology) PickForWrite(count uint64, option *VolumeGrowOption) (string, uint64, *DataNode, error) &#123;truevid, count, datanodes, err := t.GetVolumeLayout(option.Collection, option.ReplicaPlacement, option.Ttl).PickForWrite(count, option)trueif err != nil || datanodes.Length() == 0 &#123;truetruereturn \"\", 0, nil, errors.New(\"No writable volumes available!\")true&#125;truefileId, count := t.Sequence.NextFileId(count) // fileId = 1050682, count = 1truereturn storage.NewFileId(*vid, fileId, rand.Uint32()).String(), count, datanodes.Head(), nil //调用file_id.go中的NewFileId函数&#125; 在file_id.go 中123456789type FileId struct &#123;trueVolumeId VolumeIdtrueKey uint64 // fileId = 1050682trueHashcode uint32 // rand.Uint32()&#125;func NewFileId(VolumeId VolumeId, Key uint64, Hashcode uint32) *FileId &#123;truereturn &amp;FileId&#123;VolumeId: VolumeId, Key: Key, Hashcode: Hashcode&#125;&#125; 使用memory_sequencer.go中的函数1234567func (m *MemorySequencer) NextFileId(count uint64) (uint64, uint64) &#123; // count = 1truem.sequenceLock.Lock()truedefer m.sequenceLock.Unlock()trueret := m.countertruem.counter += uint64(count)truereturn ret, count&#125; 调试信息1234(dlv) p m*github.com/chrislusf/seaweedfs/weed/sequence.MemorySequencer &#123;truecounter: 1050683,truesequenceLock: sync.Mutex &#123;state: 1, sema: 0&#125;,&#125; 在 master_server_handlers.go 中封装信息123456fid, count, dn, err := ms.Topo.PickForWrite(requestedCount, option)trueif err == nil &#123;truetruewriteJsonQuiet(w, r, http.StatusOK, operation.AssignResult&#123;Fid: fid, Url: dn.Url(), PublicUrl: dn.PublicUrl, Count: count&#125;)true&#125; else &#123;truetruewriteJsonQuiet(w, r, http.StatusNotAcceptable, operation.AssignResult&#123;Error: err.Error()&#125;)true&#125;","raw":null,"content":"<p>使用命令 : curl -X POST <a href=\"http://localhost:9333/dir/assign\" target=\"_blank\" rel=\"external\">http://localhost:9333/dir/assign</a></p>\n<p>在topology.go 中<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Topology)</span> <span class=\"title\">PickForWrite</span><span class=\"params\">(count <span class=\"keyword\">uint64</span>, option *VolumeGrowOption)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">uint64</span>, *DataNode, error)</span></span> &#123;</div><div class=\"line\">truevid, count, datanodes, err := t.GetVolumeLayout(option.Collection, option.ReplicaPlacement, option.Ttl).PickForWrite(count, option)</div><div class=\"line\">true<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> || datanodes.Length() == <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"No writable volumes available!\"</span>)</div><div class=\"line\">true&#125;</div><div class=\"line\">truefileId, count := t.Sequence.NextFileId(count)   <span class=\"comment\">// fileId = 1050682, count = 1</span></div><div class=\"line\">true<span class=\"keyword\">return</span> storage.NewFileId(*vid, fileId, rand.Uint32()).String(), count, datanodes.Head(), <span class=\"literal\">nil</span>  <span class=\"comment\">//调用file_id.go中的NewFileId函数</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在file_id.go 中<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> FileId <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueVolumeId VolumeId</div><div class=\"line\">trueKey      <span class=\"keyword\">uint64</span> <span class=\"comment\">// fileId = 1050682</span></div><div class=\"line\">trueHashcode <span class=\"keyword\">uint32</span> <span class=\"comment\">// rand.Uint32()</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFileId</span><span class=\"params\">(VolumeId VolumeId, Key <span class=\"keyword\">uint64</span>, Hashcode <span class=\"keyword\">uint32</span>)</span> *<span class=\"title\">FileId</span></span> &#123;</div><div class=\"line\">true<span class=\"keyword\">return</span> &amp;FileId&#123;VolumeId: VolumeId, Key: Key, Hashcode: Hashcode&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用memory_sequencer.go中的函数<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MemorySequencer)</span> <span class=\"title\">NextFileId</span><span class=\"params\">(count <span class=\"keyword\">uint64</span>)</span> <span class=\"params\">(<span class=\"keyword\">uint64</span>, <span class=\"keyword\">uint64</span>)</span></span> &#123;  <span class=\"comment\">// count = 1</span></div><div class=\"line\">truem.sequenceLock.Lock()</div><div class=\"line\">true<span class=\"keyword\">defer</span> m.sequenceLock.Unlock()</div><div class=\"line\">trueret := m.counter</div><div class=\"line\">truem.counter += <span class=\"keyword\">uint64</span>(count)</div><div class=\"line\">true<span class=\"keyword\">return</span> ret, count</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调试信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(dlv) p m</div><div class=\"line\">*github.com/chrislusf/seaweedfs/weed/sequence.MemorySequencer &#123;</div><div class=\"line\">truecounter: 1050683,</div><div class=\"line\">truesequenceLock: sync.Mutex &#123;state: 1, sema: 0&#125;,&#125;</div></pre></td></tr></table></figure></p>\n<p>在 master_server_handlers.go 中封装信息<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">fid, count, dn, err := ms.Topo.PickForWrite(requestedCount, option)</div><div class=\"line\">true<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruewriteJsonQuiet(w, r, http.StatusOK, operation.AssignResult&#123;Fid: fid, Url: dn.Url(), PublicUrl: dn.PublicUrl, Count: count&#125;)</div><div class=\"line\">true&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">truetruewriteJsonQuiet(w, r, http.StatusNotAcceptable, operation.AssignResult&#123;Error: err.Error()&#125;)</div><div class=\"line\">true&#125;</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读8-GET&HEAD获取文件过程","slug":"seaweedfs源码阅读8-GET&HEAD获取文件过程","date":"2016-12-15T00:00:00.000Z","updated":"2016-12-15T12:08:29.759Z","comments":true,"path":"文件存储/seaweedfs源码阅读8-GET&HEAD获取文件过程/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读8-GET&HEAD获取文件过程/","excerpt":"","text":"GET 文件请求1http://127.0.0.1:8080/27542,10088ee11dccb9 先生成一个新的needle,然后根据fid:10088ee11dccb9 , 其中,前8位使用16进制转换为uint64 ==&gt; key, 后6位使用16进制转换为uint32 ==&gt; hash,解析结果给新生成的needle赋值,n.Id=key, n.Cookie=hash 如果当前的volumeServer没有找到请求的volumeId123456789101112131415161718192021222324if !vs.store.HasVolume(volumeId) &#123;truetrueif !vs.ReadRedirect &#123;truetruetrueglog.V(2).Infoln(\"volume is not local:\", err, r.URL.Path)truetruetruew.WriteHeader(http.StatusNotFound)truetruetruereturntruetrue&#125;truetruelookupResult, err := operation.Lookup(vs.GetMasterNode(), volumeId.String())truetrueglog.V(2).Infoln(\"volume\", volumeId, \"found on\", lookupResult, \"error\", err)truetrueif err == nil &amp;&amp; len(lookupResult.Locations) &gt; 0 &#123;truetruetrueu, _ := url.Parse(util.NormalizeUrl(lookupResult.Locations[0].PublicUrl))truetruetrueu.Path = r.URL.Pathtruetruetruearg := url.Values&#123;&#125;truetruetrueif c := r.FormValue(\"collection\"); c != \"\" &#123;truetruetruetruearg.Set(\"collection\", c)truetruetrue&#125;truetruetrueu.RawQuery = arg.Encode()truetruetruehttp.Redirect(w, r, u.String(), http.StatusMovedPermanently)truetrue&#125; else &#123;truetruetrueglog.V(2).Infoln(\"lookup error:\", err, r.URL.Path)truetruetruew.WriteHeader(http.StatusNotFound)truetrue&#125;truetruereturntrue&#125; 在volume_read_write.go 中,调用readNeedle,通过已知的n.Id ,获取存储的needle信息,操作在needle_map_memory.go 中1234func (nm *NeedleMap) Get(key uint64) (element *NeedleValue, ok bool) &#123;trueelement, ok = nm.m.Get(Key(key))truereturn&#125; 12(dlv) p element*github.com/chrislusf/seaweedfs/weed/storage.NeedleValue &#123;Key: 1050766, Offset: 1, Size: 529810&#125; 与上传信息对比上传时返回信息:{“fid”:”27542,10088ee11dccb9”,”fileName”:”raft.pdf”,”fileUrl”:”127.0.0.1:8080/27542,10088ee11dccb9”,”size”:529766}此时信息{Key: 1050766, Offset: 1, Size: 529810}存储时以needle为单位,增加的大小为needle中其他数据的大小,如n.Id,n.Cookie 获取数据123456789101112131415161718192021222324252627func (n *Needle) ReadData(r *os.File, offset int64, size uint32, version Version) (err error) &#123;truebytes, block, err := ReadNeedleBlob(r, offset, size)trueif err != nil &#123;truetruereturn errtrue&#125;truen.rawBlock = blocktruen.ParseNeedleHeader(bytes)trueif n.Size != size &#123;truetruereturn fmt.Errorf(\"File Entry Not Found. Needle %d Memory %d\", n.Size, size)true&#125;trueswitch version &#123;truecase Version1:truetruen.Data = bytes[NeedleHeaderSize : NeedleHeaderSize+size]truecase Version2:truetruen.readNeedleDataVersion2(bytes[NeedleHeaderSize : NeedleHeaderSize+int(n.Size)]) // 从bytes中读取存储数据,并设置needle的属性true&#125;trueif size == 0 &#123;truetruereturn niltrue&#125;truechecksum := util.BytesToUint32(bytes[NeedleHeaderSize+size : NeedleHeaderSize+size+NeedleChecksumSize])truenewChecksum := NewCRC(n.Data)trueif checksum != newChecksum.Value() &#123;truetruereturn errors.New(\"CRC error! Data On Disk Corrupted\")true&#125;truen.Checksum = newChecksumtruereturn nil&#125; 123456789101112131415161718192021222324252627282930313233343536func (n *Needle) readNeedleDataVersion2(bytes []byte) &#123;trueindex, lenBytes := 0, len(bytes)trueif index &lt; lenBytes &#123;truetruen.DataSize = util.BytesToUint32(bytes[index : index+4])truetrueindex = index + 4truetrueif int(n.DataSize)+index &gt; lenBytes &#123;truetruetrue// this if clause is due to bug #87 and #93, fixed in v0.69truetruetrue// remove this clause latertruetruetruereturntruetrue&#125;truetruen.Data = bytes[index : index+int(n.DataSize)]truetrueindex = index + int(n.DataSize)truetruen.Flags = bytes[index]truetrueindex = index + 1true&#125;trueif index &lt; lenBytes &amp;&amp; n.HasName() &#123;truetruen.NameSize = uint8(bytes[index])truetrueindex = index + 1truetruen.Name = bytes[index : index+int(n.NameSize)]truetrueindex = index + int(n.NameSize)true&#125;trueif index &lt; lenBytes &amp;&amp; n.HasMime() &#123;truetruen.MimeSize = uint8(bytes[index])truetrueindex = index + 1truetruen.Mime = bytes[index : index+int(n.MimeSize)]truetrueindex = index + int(n.MimeSize)true&#125;trueif index &lt; lenBytes &amp;&amp; n.HasLastModifiedDate() &#123;truetruen.LastModified = util.BytesToUint64(bytes[index : index+LastModifiedBytesLength])truetrueindex = index + LastModifiedBytesLengthtrue&#125;trueif index &lt; lenBytes &amp;&amp; n.HasTtl() &#123;truetruen.Ttl = LoadTTLFromBytes(bytes[index : index+TtlBytesLength])truetrueindex = index + TtlBytesLengthtrue&#125;&#125; 总结根据请求URL中带有的fid, 解析,得到n.Id, n.Cookie,其中,n.Id 作为needle的唯一标识,在NeedleMapper中找到存储的needle信息,n.Cookie 作为数据验证信息,若找到的needle中的cookie于URL中的cookie不一致,返回错误信息.","raw":null,"content":"<p>GET 文件请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://127.0.0.1:8080/27542,10088ee11dccb9</div></pre></td></tr></table></figure></p>\n<p>先生成一个新的needle,然后根据fid:10088ee11dccb9 , 其中,前8位使用16进制转换为uint64 ==&gt; key, 后6位使用16进制转换为uint32 ==&gt; hash,解析结果给新生成的needle赋值,n.Id=key, n.Cookie=hash</p>\n<p>如果当前的volumeServer没有找到请求的volumeId<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> !vs.store.HasVolume(volumeId) &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> !vs.ReadRedirect &#123;</div><div class=\"line\">truetruetrueglog.V(<span class=\"number\">2</span>).Infoln(<span class=\"string\">\"volume is not local:\"</span>, err, r.URL.Path)</div><div class=\"line\">truetruetruew.WriteHeader(http.StatusNotFound)</div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetruelookupResult, err := operation.Lookup(vs.GetMasterNode(), volumeId.String())</div><div class=\"line\">truetrueglog.V(<span class=\"number\">2</span>).Infoln(<span class=\"string\">\"volume\"</span>, volumeId, <span class=\"string\">\"found on\"</span>, lookupResult, <span class=\"string\">\"error\"</span>, err)</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &amp;&amp; <span class=\"built_in\">len</span>(lookupResult.Locations) &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetruetrueu, _ := url.Parse(util.NormalizeUrl(lookupResult.Locations[<span class=\"number\">0</span>].PublicUrl))</div><div class=\"line\">truetruetrueu.Path = r.URL.Path</div><div class=\"line\">truetruetruearg := url.Values&#123;&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> c := r.FormValue(<span class=\"string\">\"collection\"</span>); c != <span class=\"string\">\"\"</span> &#123;</div><div class=\"line\">truetruetruetruearg.Set(<span class=\"string\">\"collection\"</span>, c)</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrueu.RawQuery = arg.Encode()</div><div class=\"line\">truetruetruehttp.Redirect(w, r, u.String(), http.StatusMovedPermanently)</div><div class=\"line\"></div><div class=\"line\">truetrue&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">truetruetrueglog.V(<span class=\"number\">2</span>).Infoln(<span class=\"string\">\"lookup error:\"</span>, err, r.URL.Path)</div><div class=\"line\">truetruetruew.WriteHeader(http.StatusNotFound)</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span></div><div class=\"line\">true&#125;</div></pre></td></tr></table></figure></p>\n<p>在volume_read_write.go 中,调用readNeedle,通过已知的n.Id ,获取存储的needle信息,操作在needle_map_memory.go 中<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(nm *NeedleMap)</span> <span class=\"title\">Get</span><span class=\"params\">(key <span class=\"keyword\">uint64</span>)</span> <span class=\"params\">(element *NeedleValue, ok <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\">trueelement, ok = nm.m.Get(Key(key))</div><div class=\"line\">true<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(dlv) p element</div><div class=\"line\">*github.com/chrislusf/seaweedfs/weed/storage.NeedleValue &#123;Key: 1050766, Offset: 1, Size: 529810&#125;</div></pre></td></tr></table></figure>\n<p>与上传信息对比<br>上传时返回信息:<br>{“fid”:”27542,10088ee11dccb9”,”fileName”:”raft.pdf”,”fileUrl”:”127.0.0.1:8080/27542,10088ee11dccb9”,”size”:529766}<br>此时信息<br>{Key: 1050766, Offset: 1, Size: 529810}<br>存储时以needle为单位,增加的大小为needle中其他数据的大小,如n.Id,n.Cookie</p>\n<p>获取数据<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n *Needle)</span> <span class=\"title\">ReadData</span><span class=\"params\">(r *os.File, offset <span class=\"keyword\">int64</span>, size <span class=\"keyword\">uint32</span>, version Version)</span> <span class=\"params\">(err error)</span></span> &#123;</div><div class=\"line\">truebytes, block, err := ReadNeedleBlob(r, offset, size)</div><div class=\"line\">true<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> err</div><div class=\"line\">true&#125;</div><div class=\"line\">truen.rawBlock = block</div><div class=\"line\">truen.ParseNeedleHeader(bytes)</div><div class=\"line\">true<span class=\"keyword\">if</span> n.Size != size &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"File Entry Not Found. Needle %d Memory %d\"</span>, n.Size, size)</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">switch</span> version &#123;</div><div class=\"line\">true<span class=\"keyword\">case</span> Version1:</div><div class=\"line\">truetruen.Data = bytes[NeedleHeaderSize : NeedleHeaderSize+size]</div><div class=\"line\">true<span class=\"keyword\">case</span> Version2:</div><div class=\"line\">truetruen.readNeedleDataVersion2(bytes[NeedleHeaderSize : NeedleHeaderSize+<span class=\"keyword\">int</span>(n.Size)])  <span class=\"comment\">// 从bytes中读取存储数据,并设置needle的属性</span></div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> size == <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">true&#125;</div><div class=\"line\">truechecksum := util.BytesToUint32(bytes[NeedleHeaderSize+size : NeedleHeaderSize+size+NeedleChecksumSize])</div><div class=\"line\">truenewChecksum := NewCRC(n.Data)</div><div class=\"line\">true<span class=\"keyword\">if</span> checksum != newChecksum.Value() &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"CRC error! Data On Disk Corrupted\"</span>)</div><div class=\"line\">true&#125;</div><div class=\"line\">truen.Checksum = newChecksum</div><div class=\"line\">true<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n *Needle)</span> <span class=\"title\">readNeedleDataVersion2</span><span class=\"params\">(bytes []<span class=\"keyword\">byte</span>)</span></span> &#123;</div><div class=\"line\">trueindex, lenBytes := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(bytes)</div><div class=\"line\">true<span class=\"keyword\">if</span> index &lt; lenBytes &#123;</div><div class=\"line\">truetruen.DataSize = util.BytesToUint32(bytes[index : index+<span class=\"number\">4</span>])</div><div class=\"line\">truetrueindex = index + <span class=\"number\">4</span></div><div class=\"line\">truetrue<span class=\"keyword\">if</span> <span class=\"keyword\">int</span>(n.DataSize)+index &gt; lenBytes &#123;</div><div class=\"line\">truetruetrue<span class=\"comment\">// this if clause is due to bug #87 and #93, fixed in v0.69</span></div><div class=\"line\">truetruetrue<span class=\"comment\">// remove this clause later</span></div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetruen.Data = bytes[index : index+<span class=\"keyword\">int</span>(n.DataSize)]</div><div class=\"line\">truetrueindex = index + <span class=\"keyword\">int</span>(n.DataSize)</div><div class=\"line\">truetruen.Flags = bytes[index]</div><div class=\"line\">truetrueindex = index + <span class=\"number\">1</span></div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> index &lt; lenBytes &amp;&amp; n.HasName() &#123;</div><div class=\"line\">truetruen.NameSize = <span class=\"keyword\">uint8</span>(bytes[index])</div><div class=\"line\">truetrueindex = index + <span class=\"number\">1</span></div><div class=\"line\">truetruen.Name = bytes[index : index+<span class=\"keyword\">int</span>(n.NameSize)]</div><div class=\"line\">truetrueindex = index + <span class=\"keyword\">int</span>(n.NameSize)</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> index &lt; lenBytes &amp;&amp; n.HasMime() &#123;</div><div class=\"line\">truetruen.MimeSize = <span class=\"keyword\">uint8</span>(bytes[index])</div><div class=\"line\">truetrueindex = index + <span class=\"number\">1</span></div><div class=\"line\">truetruen.Mime = bytes[index : index+<span class=\"keyword\">int</span>(n.MimeSize)]</div><div class=\"line\">truetrueindex = index + <span class=\"keyword\">int</span>(n.MimeSize)</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> index &lt; lenBytes &amp;&amp; n.HasLastModifiedDate() &#123;</div><div class=\"line\">truetruen.LastModified = util.BytesToUint64(bytes[index : index+LastModifiedBytesLength])</div><div class=\"line\">truetrueindex = index + LastModifiedBytesLength</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> index &lt; lenBytes &amp;&amp; n.HasTtl() &#123;</div><div class=\"line\">truetruen.Ttl = LoadTTLFromBytes(bytes[index : index+TtlBytesLength])</div><div class=\"line\">truetrueindex = index + TtlBytesLength</div><div class=\"line\">true&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据请求URL中带有的fid, 解析,得到n.Id, n.Cookie,其中,n.Id 作为needle的唯一标识,在NeedleMapper中找到存储的needle信息,n.Cookie 作为数据验证信息,若找到的needle中的cookie于URL中的cookie不一致,返回错误信息.</p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读7-文件存储过程","slug":"seaweedfs源码阅读7-文件存储过程","date":"2016-12-13T00:00:00.000Z","updated":"2016-12-15T03:13:10.345Z","comments":true,"path":"文件存储/seaweedfs源码阅读7-文件存储过程/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读7-文件存储过程/","excerpt":"","text":"文件在volume_server_handlers_write.go 中的topology.ReplicatedWrite中以needle的形式存储,在store.go 的Write方法中调用writeNeedle写入文件.写入时使用append的方法,在文件中追加123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111// needle_read_write.gofunc (n *Needle) Append(w io.Writer, version Version) (size uint32, err error) &#123;trueif s, ok := w.(io.Seeker); ok &#123;truetrueif end, e := s.Seek(0, 1); e == nil &#123;truetruetruedefer func(s io.Seeker, off int64) &#123;truetruetruetrueif err != nil &#123;truetruetruetruetrueif _, e = s.Seek(off, 0); e != nil &#123;truetruetruetruetruetrueglog.V(0).Infof(\"Failed to seek %s back to %d with error: %v\", w, off, e)truetruetruetruetrue&#125;truetruetruetrue&#125;truetruetrue&#125;(s, end)truetrue&#125; else &#123;truetruetrueerr = fmt.Errorf(\"Cannot Read Current Volume Position: %v\", e)truetruetruereturntruetrue&#125;true&#125;trueswitch version &#123;truecase Version1:truetrueheader := make([]byte, NeedleHeaderSize)truetrueutil.Uint32toBytes(header[0:4], n.Cookie)truetrueutil.Uint64toBytes(header[4:12], n.Id)truetruen.Size = uint32(len(n.Data))truetruesize = n.Sizetruetrueutil.Uint32toBytes(header[12:16], n.Size)truetrueif _, err = w.Write(header); err != nil &#123;truetruetruereturntruetrue&#125;truetrueif _, err = w.Write(n.Data); err != nil &#123;truetruetruereturntruetrue&#125;truetruepadding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)truetrueutil.Uint32toBytes(header[0:NeedleChecksumSize], n.Checksum.Value())truetrue_, err = w.Write(header[0 : NeedleChecksumSize+padding])truetruereturntruecase Version2:truetrueheader := make([]byte, NeedleHeaderSize)truetrueutil.Uint32toBytes(header[0:4], n.Cookie)truetrueutil.Uint64toBytes(header[4:12], n.Id)truetruen.DataSize, n.NameSize, n.MimeSize = uint32(len(n.Data)), uint8(len(n.Name)), uint8(len(n.Mime))truetrueif n.DataSize &gt; 0 &#123;truetruetruen.Size = 4 + n.DataSize + 1truetruetrueif n.HasName() &#123;truetruetruetruen.Size = n.Size + 1 + uint32(n.NameSize)truetruetrue&#125;truetruetrueif n.HasMime() &#123;truetruetruetruen.Size = n.Size + 1 + uint32(n.MimeSize)truetruetrue&#125;truetruetrueif n.HasLastModifiedDate() &#123;truetruetruetruen.Size = n.Size + LastModifiedBytesLengthtruetruetrue&#125;truetruetrueif n.HasTtl() &#123;truetruetruetruen.Size = n.Size + TtlBytesLengthtruetruetrue&#125;truetrue&#125; else &#123;truetruetruen.Size = 0truetrue&#125;truetruesize = n.DataSizetruetrueutil.Uint32toBytes(header[12:16], n.Size)truetrueif _, err = w.Write(header); err != nil &#123;truetruetruereturntruetrue&#125;truetrueif n.DataSize &gt; 0 &#123;truetruetrueutil.Uint32toBytes(header[0:4], n.DataSize)truetruetrueif _, err = w.Write(header[0:4]); err != nil &#123;truetruetruetruereturntruetruetrue&#125;truetruetrueif _, err = w.Write(n.Data); err != nil &#123;truetruetruetruereturntruetruetrue&#125;truetruetrueutil.Uint8toBytes(header[0:1], n.Flags)truetruetrueif _, err = w.Write(header[0:1]); err != nil &#123;truetruetruetruereturntruetruetrue&#125;truetruetrueif n.HasName() &#123;truetruetruetrueutil.Uint8toBytes(header[0:1], n.NameSize)truetruetruetrueif _, err = w.Write(header[0:1]); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetruetrueif _, err = w.Write(n.Name); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetrue&#125;truetruetrueif n.HasMime() &#123;truetruetruetrueutil.Uint8toBytes(header[0:1], n.MimeSize)truetruetruetrueif _, err = w.Write(header[0:1]); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetruetrueif _, err = w.Write(n.Mime); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetrue&#125;truetruetrueif n.HasLastModifiedDate() &#123;truetruetruetrueutil.Uint64toBytes(header[0:8], n.LastModified)truetruetruetrueif _, err = w.Write(header[8-LastModifiedBytesLength : 8]); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetrue&#125;truetruetrueif n.HasTtl() &amp;&amp; n.Ttl != nil &#123;truetruetruetruen.Ttl.ToBytes(header[0:TtlBytesLength])truetruetruetrueif _, err = w.Write(header[0:TtlBytesLength]); err != nil &#123;truetruetruetruetruereturntruetruetruetrue&#125;truetruetrue&#125;truetrue&#125;truetruepadding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)truetrueutil.Uint32toBytes(header[0:NeedleChecksumSize], n.Checksum.Value())truetrue_, err = w.Write(header[0 : NeedleChecksumSize+padding])truetruereturn n.DataSize, errtrue&#125;truereturn 0, fmt.Errorf(\"Unsupported Version! (%d)\", version)&#125;","raw":null,"content":"<p>文件在volume_server_handlers_write.go 中的topology.ReplicatedWrite中以needle的形式存储,在store.go 的Write方法中调用writeNeedle写入文件.<br>写入时使用append的方法,在文件中追加<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// needle_read_write.go</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(n *Needle)</span> <span class=\"title\">Append</span><span class=\"params\">(w io.Writer, version Version)</span> <span class=\"params\">(size <span class=\"keyword\">uint32</span>, err error)</span></span> &#123;</div><div class=\"line\">true<span class=\"keyword\">if</span> s, ok := w.(io.Seeker); ok &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> end, e := s.Seek(<span class=\"number\">0</span>, <span class=\"number\">1</span>); e == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s io.Seeker, off <span class=\"keyword\">int64</span>)</span></span> &#123;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">if</span> _, e = s.Seek(off, <span class=\"number\">0</span>); e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetruetrueglog.V(<span class=\"number\">0</span>).Infof(<span class=\"string\">\"Failed to seek %s back to %d with error: %v\"</span>, w, off, e)</div><div class=\"line\">truetruetruetruetrue&#125;</div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;(s, end)</div><div class=\"line\">truetrue&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">truetruetrueerr = fmt.Errorf(<span class=\"string\">\"Cannot Read Current Volume Position: %v\"</span>, e)</div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">switch</span> version &#123;</div><div class=\"line\">true<span class=\"keyword\">case</span> Version1:</div><div class=\"line\">truetrueheader := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, NeedleHeaderSize)</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">4</span>], n.Cookie)</div><div class=\"line\">truetrueutil.Uint64toBytes(header[<span class=\"number\">4</span>:<span class=\"number\">12</span>], n.Id)</div><div class=\"line\">truetruen.Size = <span class=\"keyword\">uint32</span>(<span class=\"built_in\">len</span>(n.Data))</div><div class=\"line\">truetruesize = n.Size</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">12</span>:<span class=\"number\">16</span>], n.Size)</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> _, err = w.Write(header); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> _, err = w.Write(n.Data); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetruepadding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">0</span>:NeedleChecksumSize], n.Checksum.Value())</div><div class=\"line\">truetrue_, err = w.Write(header[<span class=\"number\">0</span> : NeedleChecksumSize+padding])</div><div class=\"line\">truetrue<span class=\"keyword\">return</span></div><div class=\"line\">true<span class=\"keyword\">case</span> Version2:</div><div class=\"line\">truetrueheader := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, NeedleHeaderSize)</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">4</span>], n.Cookie)</div><div class=\"line\">truetrueutil.Uint64toBytes(header[<span class=\"number\">4</span>:<span class=\"number\">12</span>], n.Id)</div><div class=\"line\">truetruen.DataSize, n.NameSize, n.MimeSize = <span class=\"keyword\">uint32</span>(<span class=\"built_in\">len</span>(n.Data)), <span class=\"keyword\">uint8</span>(<span class=\"built_in\">len</span>(n.Name)), <span class=\"keyword\">uint8</span>(<span class=\"built_in\">len</span>(n.Mime))</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> n.DataSize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetruetruen.Size = <span class=\"number\">4</span> + n.DataSize + <span class=\"number\">1</span></div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasName() &#123;</div><div class=\"line\">truetruetruetruen.Size = n.Size + <span class=\"number\">1</span> + <span class=\"keyword\">uint32</span>(n.NameSize)</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasMime() &#123;</div><div class=\"line\">truetruetruetruen.Size = n.Size + <span class=\"number\">1</span> + <span class=\"keyword\">uint32</span>(n.MimeSize)</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasLastModifiedDate() &#123;</div><div class=\"line\">truetruetruetruen.Size = n.Size + LastModifiedBytesLength</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasTtl() &#123;</div><div class=\"line\">truetruetruetruen.Size = n.Size + TtlBytesLength</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetrue&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">truetruetruen.Size = <span class=\"number\">0</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetruesize = n.DataSize</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">12</span>:<span class=\"number\">16</span>], n.Size)</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> _, err = w.Write(header); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> n.DataSize &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetruetrueutil.Uint32toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">4</span>], n.DataSize)</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">0</span>:<span class=\"number\">4</span>]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> _, err = w.Write(n.Data); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrueutil.Uint8toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>], n.Flags)</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasName() &#123;</div><div class=\"line\">truetruetruetrueutil.Uint8toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>], n.NameSize)</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(n.Name); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasMime() &#123;</div><div class=\"line\">truetruetruetrueutil.Uint8toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>], n.MimeSize)</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">0</span>:<span class=\"number\">1</span>]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(n.Mime); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasLastModifiedDate() &#123;</div><div class=\"line\">truetruetruetrueutil.Uint64toBytes(header[<span class=\"number\">0</span>:<span class=\"number\">8</span>], n.LastModified)</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">8</span>-LastModifiedBytesLength : <span class=\"number\">8</span>]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetruetrue<span class=\"keyword\">if</span> n.HasTtl() &amp;&amp; n.Ttl != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruen.Ttl.ToBytes(header[<span class=\"number\">0</span>:TtlBytesLength])</div><div class=\"line\">truetruetruetrue<span class=\"keyword\">if</span> _, err = w.Write(header[<span class=\"number\">0</span>:TtlBytesLength]); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">return</span></div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">truetruepadding := NeedlePaddingSize - ((NeedleHeaderSize + n.Size + NeedleChecksumSize) % NeedlePaddingSize)</div><div class=\"line\">truetrueutil.Uint32toBytes(header[<span class=\"number\">0</span>:NeedleChecksumSize], n.Checksum.Value())</div><div class=\"line\">truetrue_, err = w.Write(header[<span class=\"number\">0</span> : NeedleChecksumSize+padding])</div><div class=\"line\">truetrue<span class=\"keyword\">return</span> n.DataSize, err</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">return</span> <span class=\"number\">0</span>, fmt.Errorf(<span class=\"string\">\"Unsupported Version! (%d)\"</span>, version)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读6-文件存储格式","slug":"seaweedfs源码阅读6-文件存储格式","date":"2016-12-12T00:00:00.000Z","updated":"2016-12-13T03:26:44.809Z","comments":true,"path":"文件存储/seaweedfs源码阅读6-文件存储格式/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读6-文件存储格式/","excerpt":"","text":"使用put 上传文件到seaweedfs , 具体显示结果 上传的所有文件都以单个文件进行存储,后缀为 .dat 和 .idx","raw":null,"content":"<p>使用put 上传文件到seaweedfs , 具体显示结果<br><img src=\"http://oh56h8a9l.bkt.clouddn.com/seaweedfs源码阅读6-20161212.png\" alt=\"seaweedfs源码阅读6-20161212\"></p>\n<p>上传的所有文件都以单个文件进行存储,后缀为 .dat 和 .idx<br><img src=\"http://oh56h8a9l.bkt.clouddn.com/seaweefs源码阅读6-2-20161212.png\" alt=\"seaweefs源码阅读6-2-20161212\"></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读5-文件PUT过程","slug":"seaweedfs源码阅读5-文件PUT过程","date":"2016-12-11T00:00:00.000Z","updated":"2016-12-11T13:30:05.384Z","comments":true,"path":"文件存储/seaweedfs源码阅读5-文件PUT过程/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读5-文件PUT过程/","excerpt":"","text":"使用命令1234&gt; curl -X POST http://localhost:9333/dir/assign&#123;\"count\":1,\"fid\":\"3,01637037d6\",\"url\":\"127.0.0.1:8080\",\"publicUrl\":\"localhost:8080\"&#125;&gt; curl -X PUT -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6&#123;\"size\": 43234&#125; 上传文件,程序调用volume_server_handlers_write.go 中的PostHandler进行处理,根据URL,提取vid,生成新的volumeId12vid, _, _, _, _ := parseURLPath(r.URL.Path) //vid 为3volumeId, ve := storage.NewVolumeId(vid) // volumeId : 7 根据请求参数,生成needle1needle, ne := storage.NewNeedle(r, vs.FixJpgOrientation) 使用multipartReader读取请求中的数据,有关multipart的介绍: golang的multipart包使用needle.go 中的ParseUpload方法解析请求,得到上传的文件名和数据;如果上传的数据类型是JPG或jpeg,调用 images.FixJpgOrientation(n.Data)对数据进行处理生成needle过程1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950func NewNeedle(r *http.Request, fixJpgOrientation bool) (n *Needle, e error) &#123;truefname, mimeType, isGzipped, isChunkedFile := \"\", \"\", false, falsetruen = new(Needle)truefname, n.Data, mimeType, isGzipped, n.LastModified, n.Ttl, isChunkedFile, e = ParseUpload(r)trueif e != nil &#123;truetruereturntrue&#125;trueif len(fname) &lt; 256 &#123;truetruen.Name = []byte(fname)truetruen.SetHasName()true&#125;trueif len(mimeType) &lt; 256 &#123;truetruen.Mime = []byte(mimeType)truetruen.SetHasMime()true&#125;trueif isGzipped &#123;truetruen.SetGzipped()true&#125;trueif n.LastModified == 0 &#123;truetruen.LastModified = uint64(time.Now().Unix())true&#125;truen.SetHasLastModifiedDate()trueif n.Ttl != EMPTY_TTL &#123;truetruen.SetHasTtl()true&#125;trueif isChunkedFile &#123;truetruen.SetIsChunkManifest()true&#125;trueif fixJpgOrientation &#123;truetrueloweredName := strings.ToLower(fname)truetrueif mimeType == \"image/jpeg\" || strings.HasSuffix(loweredName, \".jpg\") || strings.HasSuffix(loweredName, \".jpeg\") &#123;truetruetruen.Data = images.FixJpgOrientation(n.Data)truetrue&#125;true&#125;truen.Checksum = NewCRC(n.Data)truecommaSep := strings.LastIndex(r.URL.Path, \",\")truedotSep := strings.LastIndex(r.URL.Path, \".\")truefid := r.URL.Path[commaSep+1:]trueif dotSep &gt; 0 &#123;truetruefid = r.URL.Path[commaSep+1 : dotSep]true&#125;truee = n.ParsePath(fid)truereturn&#125; 把数据及needle相关属性填充完成后,同步到其他volumeServer中,已needle作为传输载体1size, errorStatus := topology.ReplicatedWrite(vs.GetMasterNode(),vs.store, volumeId, needle, r)","raw":null,"content":"<p>使用命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; curl -X POST http://localhost:9333/dir/assign</div><div class=\"line\">&#123;<span class=\"string\">\"count\"</span>:1,<span class=\"string\">\"fid\"</span>:<span class=\"string\">\"3,01637037d6\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"127.0.0.1:8080\"</span>,<span class=\"string\">\"publicUrl\"</span>:<span class=\"string\">\"localhost:8080\"</span>&#125;</div><div class=\"line\">&gt; curl -X PUT -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6</div><div class=\"line\">&#123;<span class=\"string\">\"size\"</span>: 43234&#125;</div></pre></td></tr></table></figure></p>\n<p>上传文件,程序调用volume_server_handlers_write.go 中的PostHandler进行处理,根据URL,提取vid,生成新的volumeId<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vid, _, _, _, _ := parseURLPath(r.URL.Path) <span class=\"comment\">//vid 为3</span></div><div class=\"line\">volumeId, ve := storage.NewVolumeId(vid) <span class=\"comment\">// volumeId : 7</span></div></pre></td></tr></table></figure></p>\n<p>根据请求参数,生成needle<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">needle, ne := storage.NewNeedle(r, vs.FixJpgOrientation)</div></pre></td></tr></table></figure></p>\n<p>使用multipartReader读取请求中的数据,有关multipart的介绍: <a href=\"http://wanlitian.github.io/2014/11/16/multipart_with_golang/\" target=\"_blank\" rel=\"external\">golang的multipart包</a><br>使用needle.go 中的ParseUpload方法解析请求,得到上传的文件名和数据;<br>如果上传的数据类型是JPG或jpeg,调用 images.FixJpgOrientation(n.Data)对数据进行处理<br>生成needle过程<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewNeedle</span><span class=\"params\">(r *http.Request, fixJpgOrientation <span class=\"keyword\">bool</span>)</span> <span class=\"params\">(n *Needle, e error)</span></span> &#123;</div><div class=\"line\">truefname, mimeType, isGzipped, isChunkedFile := <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span></div><div class=\"line\">truen = <span class=\"built_in\">new</span>(Needle)</div><div class=\"line\">truefname, n.Data, mimeType, isGzipped, n.LastModified, n.Ttl, isChunkedFile, e = ParseUpload(r)</div><div class=\"line\">true<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">truetrue<span class=\"keyword\">return</span></div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fname) &lt; <span class=\"number\">256</span> &#123;</div><div class=\"line\">truetruen.Name = []<span class=\"keyword\">byte</span>(fname)</div><div class=\"line\">truetruen.SetHasName()</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(mimeType) &lt; <span class=\"number\">256</span> &#123;</div><div class=\"line\">truetruen.Mime = []<span class=\"keyword\">byte</span>(mimeType)</div><div class=\"line\">truetruen.SetHasMime()</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> isGzipped &#123;</div><div class=\"line\">truetruen.SetGzipped()</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">if</span> n.LastModified == <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetruen.LastModified = <span class=\"keyword\">uint64</span>(time.Now().Unix())</div><div class=\"line\">true&#125;</div><div class=\"line\">truen.SetHasLastModifiedDate()</div><div class=\"line\">true<span class=\"keyword\">if</span> n.Ttl != EMPTY_TTL &#123;</div><div class=\"line\">truetruen.SetHasTtl()</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"keyword\">if</span> isChunkedFile &#123;</div><div class=\"line\">truetruen.SetIsChunkManifest()</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"keyword\">if</span> fixJpgOrientation &#123;</div><div class=\"line\">truetrueloweredName := strings.ToLower(fname)</div><div class=\"line\">truetrue<span class=\"keyword\">if</span> mimeType == <span class=\"string\">\"image/jpeg\"</span> || strings.HasSuffix(loweredName, <span class=\"string\">\".jpg\"</span>) || strings.HasSuffix(loweredName, <span class=\"string\">\".jpeg\"</span>) &#123;</div><div class=\"line\">truetruetruen.Data = images.FixJpgOrientation(n.Data)</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">truen.Checksum = NewCRC(n.Data)</div><div class=\"line\"></div><div class=\"line\">truecommaSep := strings.LastIndex(r.URL.Path, <span class=\"string\">\",\"</span>)</div><div class=\"line\">truedotSep := strings.LastIndex(r.URL.Path, <span class=\"string\">\".\"</span>)</div><div class=\"line\">truefid := r.URL.Path[commaSep+<span class=\"number\">1</span>:]</div><div class=\"line\">true<span class=\"keyword\">if</span> dotSep &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">truetruefid = r.URL.Path[commaSep+<span class=\"number\">1</span> : dotSep]</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">truee = n.ParsePath(fid)</div><div class=\"line\"></div><div class=\"line\">true<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>把数据及needle相关属性填充完成后,同步到其他volumeServer中,已needle作为传输载体<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">size, errorStatus := topology.ReplicatedWrite(vs.GetMasterNode(),vs.store, volumeId, needle, r)</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读4-volume启动过程","slug":"seaweedfs源码阅读4-volume启动","date":"2016-12-11T00:00:00.000Z","updated":"2017-02-08T12:23:41.872Z","comments":true,"path":"文件存储/seaweedfs源码阅读4-volume启动/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读4-volume启动/","excerpt":"","text":"根据文章使用delve调试Golang程序技巧使用go install -gcflags “-N -l” weed.go 对程序进行重新编译,方便调试 通过weed.go 调用volume.go ,参数处理完成后,生成一个ServeMux实例,有关go http ServeMux介绍,12345volumeMux := http.NewServeMux()publicVolumeMux := volumeMuxif isSeperatedPublicPort &#123;truepublicVolumeMux = http.NewServeMux()&#125; 根据参数VolumeServerOptions 中的 indexType,选择volume Needle Map 的存储位置,默认使用内存1234567volumeNeedleMapKind := storage.NeedleMapInMemoryswitch *v.indexType &#123;case \"leveldb\": volumeNeedleMapKind = storage.NeedleMapLevelDbcase \"boltdb\": volumeNeedleMapKind = storage.NeedleMapBoltDb&#125; 调试信息12(dlv) p *v.indexType\"memory\" 根据参数生成volumeServer,使用volume_server.go 中的NewVolumeServer 生成volumeServer在volume_server.go 中,设置masterNode ,store, guard1234vs.SetMasterNode(masterNode)vs.store = storage.NewStore(port, ip, publicUrl, folders, maxCounts, vs.needleMapKind)vs.guard = security.NewGuard(whiteList, \"\") 生成store时会加载已有的volume123456789101112// store.gofunc NewStore(port int, ip, publicUrl string, dirnames []string, maxVolumeCounts []int, needleMapKind NeedleMapType) (s *Store) &#123;trues = &amp;Store&#123;Port: port, Ip: ip, PublicUrl: publicUrl&#125;trues.Locations = make([]*DiskLocation, 0)truefor i := 0; i &lt; len(dirnames); i++ &#123;truetruelocation := NewDiskLocation(dirnames[i], maxVolumeCounts[i])truetruelocation.loadExistingVolumes(needleMapKind)truetrues.Locations = append(s.Locations, location)true&#125;truereturn&#125;","raw":null,"content":"<p>根据文章<a href=\"http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">使用delve调试Golang程序技巧</a><br>使用go install -gcflags “-N -l” weed.go 对程序进行重新编译,方便调试</p>\n<p>通过weed.go 调用volume.go ,参数处理完成后,生成一个ServeMux实例,有关<a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/03.4.md\" target=\"_blank\" rel=\"external\">go http ServeMux介绍</a>,<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">volumeMux := http.NewServeMux()</div><div class=\"line\">publicVolumeMux := volumeMux</div><div class=\"line\"><span class=\"keyword\">if</span> isSeperatedPublicPort &#123;</div><div class=\"line\">truepublicVolumeMux = http.NewServeMux()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据参数VolumeServerOptions 中的 indexType,选择volume Needle Map 的存储位置,默认使用内存<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">volumeNeedleMapKind := storage.NeedleMapInMemory</div><div class=\"line\"><span class=\"keyword\">switch</span> *v.indexType &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"leveldb\"</span>:</div><div class=\"line\">  volumeNeedleMapKind = storage.NeedleMapLevelDb</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"boltdb\"</span>:</div><div class=\"line\">  volumeNeedleMapKind = storage.NeedleMapBoltDb</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调试信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(dlv) p *v.indexType</div><div class=\"line\"><span class=\"string\">\"memory\"</span></div></pre></td></tr></table></figure></p>\n<p>根据参数生成volumeServer,使用volume_server.go 中的NewVolumeServer 生成volumeServer<br>在volume_server.go 中,设置masterNode ,store, guard<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vs.SetMasterNode(masterNode)</div><div class=\"line\">vs.store = storage.NewStore(port, ip, publicUrl, folders, maxCounts, vs.needleMapKind)</div><div class=\"line\"></div><div class=\"line\">vs.guard = security.NewGuard(whiteList, <span class=\"string\">\"\"</span>)</div></pre></td></tr></table></figure></p>\n<p>生成store时会加载已有的volume<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// store.go</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStore</span><span class=\"params\">(port <span class=\"keyword\">int</span>, ip, publicUrl <span class=\"keyword\">string</span>, dirnames []<span class=\"keyword\">string</span>, maxVolumeCounts []<span class=\"keyword\">int</span>, needleMapKind NeedleMapType)</span> <span class=\"params\">(s *Store)</span></span> &#123;</div><div class=\"line\">trues = &amp;Store&#123;Port: port, Ip: ip, PublicUrl: publicUrl&#125;</div><div class=\"line\">trues.Locations = <span class=\"built_in\">make</span>([]*DiskLocation, <span class=\"number\">0</span>)</div><div class=\"line\">true<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(dirnames); i++ &#123;</div><div class=\"line\">truetruelocation := NewDiskLocation(dirnames[i], maxVolumeCounts[i])</div><div class=\"line\">truetruelocation.loadExistingVolumes(needleMapKind)</div><div class=\"line\">truetrues.Locations = <span class=\"built_in\">append</span>(s.Locations, location)</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"golang调试技巧","slug":"golang调试技巧","date":"2016-12-10T00:00:00.000Z","updated":"2016-12-11T02:52:49.574Z","comments":true,"path":"go/golang调试技巧/","link":"","permalink":"https://makeitpossible16.github.io/go/golang调试技巧/","excerpt":"","text":"在阅读seaweedfs过程中,发现对于复杂程序,跟踪调试相当困难,不过,在看了使用delve调试Golang程序技巧这篇文章后,调试问题得到很好的改善. 首先,liteIDE简直让人眼前一亮,使用它并结合delve实现图形化界面调试,使用命令行多少有点不太方便,特别是当你想在源码中加入注释的时候. 具体实现 安装delve,liteIDE 加入参数关闭编译器优化,如 go install -gcflags “-N -l” 程序名称 按照文章使用delve调试Golang程序技巧, 调试外部程序 调试启动后,可在Console设置断点, 命令为 : b packageName.functionName 或 b lineNum 使用命令c ,运行到断点停止,进行操作,具体命令可参照delve 还不清楚liteIDE能不能使用delve 进行图形化attach,如果可以就非常完美","raw":null,"content":"<p>在阅读seaweedfs过程中,发现对于复杂程序,跟踪调试相当困难,不过,在看了<a href=\"http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">使用delve调试Golang程序技巧</a>这篇文章后,调试问题得到很好的改善.</p>\n<p>首先,liteIDE简直让人眼前一亮,使用它并结合delve实现图形化界面调试,使用命令行多少有点不太方便,特别是当你想在源码中加入注释的时候.</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li><p>安装delve,liteIDE</p>\n</li>\n<li><p>加入参数关闭编译器优化,如 go install -gcflags “-N -l” 程序名称</p>\n</li>\n<li><p>按照文章<a href=\"http://www.cppblog.com/sunicdavy/archive/2016/09/03/214254.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">使用delve调试Golang程序技巧</a>, 调试外部程序</p>\n</li>\n<li><p>调试启动后,可在Console设置断点, 命令为 : b packageName.functionName 或 b lineNum</p>\n</li>\n<li><p>使用命令c ,运行到断点停止,进行操作,具体命令可参照delve</p>\n</li>\n</ol>\n<p>还不清楚liteIDE能不能使用delve 进行图形化attach,如果可以就非常完美</p>\n","categories":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"}]},{"title":"golang 反射机制","slug":"golang 反射机制","date":"2016-12-02T00:00:00.000Z","updated":"2016-12-04T07:55:20.022Z","comments":true,"path":"go/golang 反射机制/","link":"","permalink":"https://makeitpossible16.github.io/go/golang 反射机制/","excerpt":"","text":"在阅读seaweedfs过程中,当程序在运行过程中,想要进行跟踪调试不好实现,目前也没找到很好的解决方案,只能跟踪程序的启动过程.不过回归最原始的方法,使用printf倒是可以查看变量的值,因此打算编写程序,把struct中的变量转化为json,发送给搭建的服务器,实现查看struct变量的方法.其中就了解到go的反射机制. laws-of-reflectionGolang之反射reflect包 使用反射可以得到struct中的变量及变量的值,前提是该变量是export的,即首字母大写,类似java中的public.","raw":null,"content":"<p>在阅读seaweedfs过程中,当程序在运行过程中,想要进行跟踪调试不好实现,目前也没找到很好的解决方案,只能跟踪程序的启动过程.不过回归最原始的方法,使用printf倒是可以查看变量的值,因此打算编写程序,把struct中的变量转化为json,发送给搭建的服务器,实现查看struct变量的方法.其中就了解到go的反射机制.</p>\n<p><a href=\"https://blog.golang.org/laws-of-reflection\" target=\"_blank\" rel=\"external\">laws-of-reflection</a><br><a href=\"http://blog.csdn.net/liuxinmingcode/article/details/50480097\" target=\"_blank\" rel=\"external\">Golang之反射reflect包</a></p>\n<p>使用反射可以得到struct中的变量及变量的值,前提是该变量是export的,即首字母大写,类似java中的public.    </p>\n","categories":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"}]},{"title":"golang学习","slug":"golang学习","date":"2016-11-29T00:00:00.000Z","updated":"2016-12-15T03:15:17.470Z","comments":true,"path":"go/golang学习/","link":"","permalink":"https://makeitpossible16.github.io/go/golang学习/","excerpt":"","text":"在看seaweedfs过程中遇到的go 语法,不会的记录一下. interface: 是一组method的组合,通过interface来定义对象的一组行为.12345type Sequencer interface &#123;trueNextFileId(count uint64) (uint64, uint64)trueSetMax(uint64)truePeek() uint64&#125; go map1t.children = make(map[NodeId]Node) // NodeId --&gt; Node go sync.RWMutex和sync.Mutexgolang中sync包实现了两种锁Mutex （互斥锁）和RWMutex（读写锁），其中RWMutex是基于Mutex实现的，只读锁的实现使用类似引用计数器的功能．1234type Mutex func (m *Mutex) Lock() func (m *Mutex) Unlock() Mutex为互斥锁，Lock()加锁，Unlock()解锁，使用Lock()加锁后，便不能再次对其进行加锁，直到利用Unlock()解锁对其解锁后，才能再次加锁．适用于读写不确定场景，即读写次数没有明显的区别，并且只允许只有一个读或者写的场景，所以该锁也叫做全局锁． 123456type RWMutex func (rw *RWMutex) Lock() func (rw *RWMutex) RLock() func (rw *RWMutex) RLocker() Locker func (rw *RWMutex) RUnlock() func (rw *RWMutex) Unlock() func (rw RWMutex) Lock() 写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定 func (rw RWMutex) Unlock() 写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误． func (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景 func (rw *RWMutex)RUnlock() 读锁解锁，RUnlock 撤销单次 RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。 go Routine和Channelgo学习笔记_Routine和Channel上 goroutine 类似开辟进程、线程做法语法： 1. 定义一个函数functionName，要异步调用时使用语句go functionName即可。 2. 使用匿名函数，用法为go func(参数列表){函数执行体}()，说明最后一个()作用就是让该函数执行。 代码： 123456789101112131415/////////第一种示例代码：///////////func sayHello(name string)&#123; fmt.Println(\"hello\"+name)&#125;//主程序入口func main()&#123; go sayHello(\"PMST\")&#125;/////////第二种示例代码：////////////主程序入口func main()&#123; go func()&#123; fmt.Println(\"hello world\") &#125;() //别忘记这里的()&#125; 一旦将go放在函数之前，意味分配一个子routine让这个函数自个玩去(有点自身自灭的感觉),而主routine则继续该干嘛干嘛。 channelgoroutine 之间进行数据通信方式： 共用内存内存空间。 Go语言推荐的通信机制channel。 通过make来创建channel,例如无缓存ci := make(chan int),指定缓存cib := make(chan int,2)。给这个通道分类了2个缓存空间 通道的接收和发送都是阻塞的，除非与之对应的一端已经准备好阻塞状态： 数据写入channel（或缓存已满）却没读出 channel中没有数据，读channel会阻塞。 go反引号参考文章:GoLang获取struct的tag123456789type AppendEntriesRequest struct &#123;trueTerm *uint64 `protobuf:\"varint,1,req\" json:\"Term,omitempty\"`truePrevLogIndex *uint64 `protobuf:\"varint,2,req\" json:\"PrevLogIndex,omitempty\"`truePrevLogTerm *uint64 `protobuf:\"varint,3,req\" json:\"PrevLogTerm,omitempty\"`trueCommitIndex *uint64 `protobuf:\"varint,4,req\" json:\"CommitIndex,omitempty\"`trueLeaderName *string `protobuf:\"bytes,5,req\" json:\"LeaderName,omitempty\"`trueEntries []*LogEntry `protobuf:\"bytes,6,rep\" json:\"Entries,omitempty\"`trueXXX_unrecognized []byte `json:\"-\"`&#125; 其中,反引号表示字符串,struct后面的字符串用于reflect,具体用法s := AppendEntriesRequest{}st := reflect.TypeOf(s)field := st.Field(0)field.Tag.Get(“protobuf”) // varint,1,reqfield.Tag.Get(“json”) // Term,omitempty go get 安装程序错误错误提示:123unrecognized import path \"code.google.com/p/goprotobuf/proto\"parse https://code.google.com/p/goprotobuf?go-get=1: no go-import meta tags 错误原因:依赖包已从code.google.com移除, 已重定向到github.com/golang/protobuf/proto,修改程序中的代码即可 strconv.ParseInt(s string, base int, bitSize int) (i int64, err error) 或strconv.ParseUint把字符串转换为整数,参数1 数字的字符串形式 参数2 数字字符串的进制 比如二进制 八进制 十进制 十六进制 参数3 返回结果的bit大小 也就是int8 int16 int32 int64","raw":null,"content":"<p>在看seaweedfs过程中遇到的go 语法,不会的记录一下.</p>\n<h2 id=\"interface-是一组method的组合-通过interface来定义对象的一组行为\"><a href=\"#interface-是一组method的组合-通过interface来定义对象的一组行为\" class=\"headerlink\" title=\"interface: 是一组method的组合,通过interface来定义对象的一组行为.\"></a>interface: 是一组method的组合,通过interface来定义对象的一组行为.</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Sequencer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">trueNextFileId(count <span class=\"keyword\">uint64</span>) (<span class=\"keyword\">uint64</span>, <span class=\"keyword\">uint64</span>)</div><div class=\"line\">trueSetMax(<span class=\"keyword\">uint64</span>)</div><div class=\"line\">truePeek() <span class=\"keyword\">uint64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"go-map\"><a href=\"#go-map\" class=\"headerlink\" title=\"go map\"></a>go map</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">t.children = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[NodeId]Node)  <span class=\"comment\">// NodeId --&gt; Node</span></div></pre></td></tr></table></figure>\n<h2 id=\"go-sync-RWMutex和sync-Mutex\"><a href=\"#go-sync-RWMutex和sync-Mutex\" class=\"headerlink\" title=\"go sync.RWMutex和sync.Mutex\"></a>go <a href=\"http://studygolang.com/articles/3373\" target=\"_blank\" rel=\"external\">sync.RWMutex和sync.Mutex</a></h2><p>golang中sync包实现了两种锁Mutex （互斥锁）和RWMutex（读写锁），其中RWMutex是基于Mutex实现的，只读锁的实现使用类似引用计数器的功能．<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Mutex</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"title\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></div></pre></td></tr></table></figure></p>\n<p>Mutex为互斥锁，Lock()加锁，Unlock()解锁，使用Lock()加锁后，便不能再次对其进行加锁，直到利用Unlock()解锁对其解锁后，才能再次加锁．适用于读写不确定场景，即读写次数没有明显的区别，并且只允许只有一个读或者写的场景，所以该锁也叫做全局锁．</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RWMutex</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLock</span><span class=\"params\">()</span></div><div class=\"line\">    <span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLocker</span><span class=\"params\">()</span> <span class=\"title\">Locker</span></div><div class=\"line\">    <span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RUnlock</span><span class=\"params\">()</span></div><div class=\"line\">    <span class=\"title\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></div></pre></td></tr></table></figure>\n<p>func (rw <em>RWMutex) Lock()　　写锁，如果在添加写锁之前已经有其他的读锁和写锁，则lock就会阻塞直到该锁可用，为确保该锁最终可用，已阻塞的 Lock 调用会从获得的锁中排除新的读取器，即写锁权限高于读锁，有写锁时优先进行写锁定<br> func (rw </em>RWMutex) Unlock()　写锁解锁，如果没有进行写锁定，则就会引起一个运行时错误．<br> func (rw *RWMutex) RLock() 读锁，当有写锁时，无法加载读锁，当只有读锁或者没有锁时，可以加载读锁，读锁可以加载多个，所以适用于＂读多写少＂的场景</p>\n<p>func (rw *RWMutex)RUnlock()　读锁解锁，RUnlock 撤销单次 RLock 调用，它对于其它同时存在的读取器则没有效果。若 rw 并没有为读取而锁定，调用 RUnlock 就会引发一个运行时错误(注：这种说法在go1.3版本中是不对的，例如下面这个例子)。</p>\n<h2 id=\"go-Routine和Channel\"><a href=\"#go-Routine和Channel\" class=\"headerlink\" title=\"go Routine和Channel\"></a>go Routine和Channel</h2><p><a href=\"http://blog.csdn.net/colouful987/article/details/45190319\" target=\"_blank\" rel=\"external\">go学习笔记_Routine和Channel上</a></p>\n<p>goroutine 类似开辟进程、线程做法<br>语法：</p>\n<pre><code>1. 定义一个函数functionName，要异步调用时使用语句go functionName即可。\n\n2. 使用匿名函数，用法为go func(参数列表){函数执行体}()，说明最后一个()作用就是让该函数执行。\n</code></pre><p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/////////第一种示例代码：///////////</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sayHello</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span>&#123;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"hello\"</span>+name)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//主程序入口</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> sayHello(<span class=\"string\">\"PMST\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/////////第二种示例代码：//////////</span></div><div class=\"line\"><span class=\"comment\">//主程序入口</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"hello world\"</span>)</div><div class=\"line\">    &#125;()     <span class=\"comment\">//别忘记这里的()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一旦将go放在函数之前，意味分配一个子routine让这个函数自个玩去(有点自身自灭的感觉),而主routine则继续该干嘛干嘛。</p>\n<p>channel<br>goroutine 之间进行数据通信方式：</p>\n<ol>\n<li>共用内存内存空间。</li>\n<li>Go语言推荐的通信机制channel。</li>\n</ol>\n<p>通过make来创建channel,例如<br>无缓存ci := make(chan int),<br>指定缓存cib := make(chan int,2)。给这个通道分类了2个缓存空间</p>\n<p>通道的接收和发送都是阻塞的，除非与之对应的一端已经准备好<br>阻塞状态：</p>\n<ol>\n<li>数据写入channel（或缓存已满）却没读出</li>\n<li>channel中没有数据，读channel会阻塞。</li>\n</ol>\n<h2 id=\"go反引号\"><a href=\"#go反引号\" class=\"headerlink\" title=\"go反引号\"></a>go反引号</h2><p>参考文章:<a href=\"http://studygolang.com/articles/2553\" target=\"_blank\" rel=\"external\">GoLang获取struct的tag</a><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesRequest <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueTerm             *<span class=\"keyword\">uint64</span>     <span class=\"string\">`protobuf:\"varint,1,req\" json:\"Term,omitempty\"`</span></div><div class=\"line\">truePrevLogIndex     *<span class=\"keyword\">uint64</span>     <span class=\"string\">`protobuf:\"varint,2,req\" json:\"PrevLogIndex,omitempty\"`</span></div><div class=\"line\">truePrevLogTerm      *<span class=\"keyword\">uint64</span>     <span class=\"string\">`protobuf:\"varint,3,req\" json:\"PrevLogTerm,omitempty\"`</span></div><div class=\"line\">trueCommitIndex      *<span class=\"keyword\">uint64</span>     <span class=\"string\">`protobuf:\"varint,4,req\" json:\"CommitIndex,omitempty\"`</span></div><div class=\"line\">trueLeaderName       *<span class=\"keyword\">string</span>     <span class=\"string\">`protobuf:\"bytes,5,req\" json:\"LeaderName,omitempty\"`</span></div><div class=\"line\">trueEntries          []*LogEntry <span class=\"string\">`protobuf:\"bytes,6,rep\" json:\"Entries,omitempty\"`</span></div><div class=\"line\">trueXXX_unrecognized []<span class=\"keyword\">byte</span>      <span class=\"string\">`json:\"-\"`</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中,反引号表示字符串,struct后面的字符串用于reflect,具体用法<br>s := AppendEntriesRequest{}<br>st := reflect.TypeOf(s)<br>field := st.Field(0)<br>field.Tag.Get(“protobuf”) // varint,1,req<br>field.Tag.Get(“json”) // Term,omitempty</p>\n<h2 id=\"go-get-安装程序错误\"><a href=\"#go-get-安装程序错误\" class=\"headerlink\" title=\"go get 安装程序错误\"></a>go get 安装程序错误</h2><p>错误提示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unrecognized import path <span class=\"string\">\"code.google.com/p/goprotobuf/proto\"</span></div><div class=\"line\"></div><div class=\"line\">parse https://code.google.com/p/goprotobuf?go-get=1: no go-import meta tags</div></pre></td></tr></table></figure></p>\n<p>错误原因:依赖包已从code.google.com移除, 已重定向到github.com/golang/protobuf/proto,修改程序中的代码即可</p>\n<h2 id=\"strconv-ParseInt-s-string-base-int-bitSize-int-i-int64-err-error-或strconv-ParseUint\"><a href=\"#strconv-ParseInt-s-string-base-int-bitSize-int-i-int64-err-error-或strconv-ParseUint\" class=\"headerlink\" title=\"strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)  或strconv.ParseUint\"></a>strconv.ParseInt(s string, base int, bitSize int) (i int64, err error)  或strconv.ParseUint</h2><p>把字符串转换为整数,<br>参数1 数字的字符串形式</p>\n<p>参数2 数字字符串的进制 比如二进制 八进制 十进制 十六进制</p>\n<p>参数3 返回结果的bit大小 也就是int8 int16 int32 int64</p>\n","categories":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"}]},{"title":"seaweedfs源码阅读记录3-raft协议理解","slug":"seaweedfs源码阅读记录3-raft协议理解","date":"2016-11-28T00:00:00.000Z","updated":"2016-12-03T15:29:42.344Z","comments":true,"path":"文件存储/seaweedfs源码阅读记录3-raft协议理解/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读记录3-raft协议理解/","excerpt":"","text":"raft用于seaweedfs的多个master server间进行leader选举,选出leader对其他master server进行管理. 参考文章Raft一致性算法raft动画演示raft介绍go-raft源码解析go-raft文档goraft的简单实现 阅读记录本文按照参考文章中的go-raft源码解析中的文章阅读,记录阅读过程.12345678910111213141516// The request sent to a server to append entries to the log.type AppendEntriesRequest struct &#123;trueTerm uint64truePrevLogIndex uint64truePrevLogTerm uint64trueCommitIndex uint64trueLeaderName stringtrueEntries []*protobuf.LogEntry // 定义在protobuf中的LogEntry&#125;// The response returned from a server appending entries to the log.type AppendEntriesResponse struct &#123;truepb *protobuf.AppendEntriesResponsetruepeer stringtrueappend bool&#125;","raw":null,"content":"<p>raft用于seaweedfs的多个master server间进行leader选举,选出leader对其他master server进行管理.</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://blog.csdn.net/cszhouwei/article/details/38374603\" target=\"_blank\" rel=\"external\">Raft一致性算法</a><br><a href=\"http://thesecretlivesofdata.com/raft/\" target=\"_blank\" rel=\"external\">raft动画演示</a><br><a href=\"https://raft.github.io/\" target=\"_blank\" rel=\"external\">raft介绍</a><br><a href=\"https://ayende.com/blog/165858/reviewing-go-raft-part-i\" target=\"_blank\" rel=\"external\">go-raft源码解析</a><br><a href=\"https://godoc.org/github.com/coreos/etcd/raft\" target=\"_blank\" rel=\"external\">go-raft文档</a><br><a href=\"https://github.com/goraft/raftd\" target=\"_blank\" rel=\"external\">goraft的简单实现</a></p>\n<h2 id=\"阅读记录\"><a href=\"#阅读记录\" class=\"headerlink\" title=\"阅读记录\"></a>阅读记录</h2><p>本文按照参考文章中的go-raft源码解析中的文章阅读,记录阅读过程.<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// The request sent to a server to append entries to the log.</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesRequest <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueTerm         <span class=\"keyword\">uint64</span></div><div class=\"line\">truePrevLogIndex <span class=\"keyword\">uint64</span></div><div class=\"line\">truePrevLogTerm  <span class=\"keyword\">uint64</span></div><div class=\"line\">trueCommitIndex  <span class=\"keyword\">uint64</span></div><div class=\"line\">trueLeaderName   <span class=\"keyword\">string</span></div><div class=\"line\">trueEntries      []*protobuf.LogEntry  <span class=\"comment\">// 定义在protobuf中的LogEntry</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The response returned from a server appending entries to the log.</span></div><div class=\"line\"><span class=\"keyword\">type</span> AppendEntriesResponse <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">truepb     *protobuf.AppendEntriesResponse</div><div class=\"line\">truepeer   <span class=\"keyword\">string</span></div><div class=\"line\">true<span class=\"built_in\">append</span> <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"},{"name":"raft","slug":"raft","permalink":"https://makeitpossible16.github.io/tags/raft/"}]},{"title":"seaweedfs源码阅读记录2","slug":"seaweedfs源码阅读记录2","date":"2016-11-22T00:00:00.000Z","updated":"2016-11-28T11:57:03.000Z","comments":true,"path":"文件存储/seaweedfs源码阅读记录2/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读记录2/","excerpt":"","text":"master启动过程使用pycharm , 入口为weed.go, 根据参数调用command文件夹下的文件.opology 核心模块，主要包括 【DataCenter, Rack, DataNode】 三层拓扑结构,参考文章： weed-fs 源码解读 12345type Sequencer interface &#123;trueNextFileId(count uint64) (uint64, uint64)trueSetMax(uint64)truePeek() uint64&#125; topology中包含Sequencer , sequence 负责FileID的全局有序生成 12345678910111213141516171819type Topology struct &#123;trueNodeImpl //指向NodeImpl对象，即Topology和node相互指向truecollectionMap *util.ConcurrentReadMaptruepulse int64truevolumeSizeLimit uint64trueSequence sequence.SequencertruechanDeadDataNodes chan *DataNodetruechanRecoveredDataNodes chan *DataNodetruechanFullVolumes chan storage.VolumeInfotrueconfiguration *ConfigurationtrueRaftServer raft.Server&#125; NodeImpl结构1234567891011121314type NodeImpl struct &#123;trueid NodeIdtruevolumeCount inttrueactiveVolumeCount inttruemaxVolumeCount inttrueparent Nodetruesync.RWMutex // lock childrentruechildren map[NodeId]NodetruemaxVolumeId storage.VolumeIdtrue//for rack, data center, topologytruenodeType stringtruevalue interface&#123;&#125; //指向Topology对象，即Topology和node相互指向&#125; DataNode数据结构123456789type DataNode struct &#123;trueNodeImpltruevolumes map[storage.VolumeId]storage.VolumeInfotrueIp stringtruePort inttruePublicUrl stringtrueLastSeen int64 // unix time in secondstrueDead bool&#125; 123456789101112type VolumeInfo struct &#123;trueId VolumeIdtrueSize uint64trueReplicaPlacement *ReplicaPlacementtrueTtl *TTLtrueCollection stringtrueVersion VersiontrueFileCount inttrueDeleteCount inttrueDeletedByteCount uint64trueReadOnly bool&#125; 通过RaftServer的raft协议，完成多个weedmaster间投票选leader的事情,当启动多个ServerMaster时，它们之间会进行通信，通过raft协议选举出一个Leader，对所有的master进行管理。weed-fs中，通过使用raftServer完成上述选举过程；而raftServer则是用到了第三方资源，即goRaft（参照http://ayende.com/blog/165858/reviewing-go-raft-part-i）。12345678type RaftServer struct &#123;truepeers []string // initial peers to join withtrueraftServer raft.Server //使用goraft //type Server interface 包含实现raft的方法truedataDir stringtruehttpAddr stringtruerouter *mux.Routertruetopo *topology.Topology&#125;","raw":null,"content":"<h2 id=\"master启动过程\"><a href=\"#master启动过程\" class=\"headerlink\" title=\"master启动过程\"></a>master启动过程</h2><p>使用pycharm , 入口为weed.go, 根据参数调用command文件夹下的文件.<br>opology 核心模块，主要包括 【DataCenter, Rack, DataNode】 三层拓扑结构,<br>参考文章： <a href=\"http://blog.csdn.net/baogang409/article/details/42105367\" target=\"_blank\" rel=\"external\">weed-fs 源码解读</a></p>\n<p><img src=\"http://oh56h8a9l.bkt.clouddn.com/master启动-20161128.svg\" alt=\"master启动-20161128\"><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Sequencer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">trueNextFileId(count <span class=\"keyword\">uint64</span>) (<span class=\"keyword\">uint64</span>, <span class=\"keyword\">uint64</span>)</div><div class=\"line\">trueSetMax(<span class=\"keyword\">uint64</span>)</div><div class=\"line\">truePeek() <span class=\"keyword\">uint64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>topology中包含Sequencer , sequence 负责FileID的全局有序生成</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Topology <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueNodeImpl   <span class=\"comment\">//指向NodeImpl对象，即Topology和node相互指向</span></div><div class=\"line\"></div><div class=\"line\">truecollectionMap *util.ConcurrentReadMap</div><div class=\"line\"></div><div class=\"line\">truepulse <span class=\"keyword\">int64</span></div><div class=\"line\"></div><div class=\"line\">truevolumeSizeLimit <span class=\"keyword\">uint64</span></div><div class=\"line\"></div><div class=\"line\">trueSequence sequence.Sequencer</div><div class=\"line\"></div><div class=\"line\">truechanDeadDataNodes      <span class=\"keyword\">chan</span> *DataNode</div><div class=\"line\">truechanRecoveredDataNodes <span class=\"keyword\">chan</span> *DataNode</div><div class=\"line\">truechanFullVolumes        <span class=\"keyword\">chan</span> storage.VolumeInfo</div><div class=\"line\"></div><div class=\"line\">trueconfiguration *Configuration</div><div class=\"line\"></div><div class=\"line\">trueRaftServer raft.Server</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>NodeImpl结构<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> NodeImpl <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueid                NodeId</div><div class=\"line\">truevolumeCount       <span class=\"keyword\">int</span></div><div class=\"line\">trueactiveVolumeCount <span class=\"keyword\">int</span></div><div class=\"line\">truemaxVolumeCount    <span class=\"keyword\">int</span></div><div class=\"line\">trueparent            Node</div><div class=\"line\">truesync.RWMutex      <span class=\"comment\">// lock children</span></div><div class=\"line\">truechildren          <span class=\"keyword\">map</span>[NodeId]Node</div><div class=\"line\">truemaxVolumeId       storage.VolumeId</div><div class=\"line\"></div><div class=\"line\">true<span class=\"comment\">//for rack, data center, topology</span></div><div class=\"line\">truenodeType <span class=\"keyword\">string</span></div><div class=\"line\">truevalue    <span class=\"keyword\">interface</span>&#123;&#125;  <span class=\"comment\">//指向Topology对象，即Topology和node相互指向</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DataNode数据结构<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> DataNode <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueNodeImpl</div><div class=\"line\">truevolumes   <span class=\"keyword\">map</span>[storage.VolumeId]storage.VolumeInfo</div><div class=\"line\">trueIp        <span class=\"keyword\">string</span></div><div class=\"line\">truePort      <span class=\"keyword\">int</span></div><div class=\"line\">truePublicUrl <span class=\"keyword\">string</span></div><div class=\"line\">trueLastSeen  <span class=\"keyword\">int64</span> <span class=\"comment\">// unix time in seconds</span></div><div class=\"line\">trueDead      <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> VolumeInfo <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">trueId               VolumeId</div><div class=\"line\">trueSize             <span class=\"keyword\">uint64</span></div><div class=\"line\">trueReplicaPlacement *ReplicaPlacement</div><div class=\"line\">trueTtl              *TTL</div><div class=\"line\">trueCollection       <span class=\"keyword\">string</span></div><div class=\"line\">trueVersion          Version</div><div class=\"line\">trueFileCount        <span class=\"keyword\">int</span></div><div class=\"line\">trueDeleteCount      <span class=\"keyword\">int</span></div><div class=\"line\">trueDeletedByteCount <span class=\"keyword\">uint64</span></div><div class=\"line\">trueReadOnly         <span class=\"keyword\">bool</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过RaftServer的raft协议，完成多个weedmaster间投票选leader的事情,<br>当启动多个ServerMaster时，它们之间会进行通信，通过raft协议选举出一个Leader，对所有的master进行管理。<br>weed-fs中，通过使用raftServer完成上述选举过程；而raftServer则是用到了第三方资源，即goRaft（参照<a href=\"http://ayende.com/blog/165858/reviewing-go-raft-part-i）。\" target=\"_blank\" rel=\"external\">http://ayende.com/blog/165858/reviewing-go-raft-part-i）。</a><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> RaftServer <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">truepeers      []<span class=\"keyword\">string</span> <span class=\"comment\">// initial peers to join with</span></div><div class=\"line\">trueraftServer raft.Server  <span class=\"comment\">//使用goraft //type Server interface 包含实现raft的方法</span></div><div class=\"line\">truedataDir    <span class=\"keyword\">string</span></div><div class=\"line\">truehttpAddr   <span class=\"keyword\">string</span></div><div class=\"line\">truerouter     *mux.Router</div><div class=\"line\">truetopo       *topology.Topology</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"seaweedfs源码阅读记录1","slug":"seaweedfs源码阅读记录","date":"2016-11-22T00:00:00.000Z","updated":"2016-12-26T14:43:32.666Z","comments":true,"path":"文件存储/seaweedfs源码阅读记录/","link":"","permalink":"https://makeitpossible16.github.io/文件存储/seaweedfs源码阅读记录/","excerpt":"","text":"接下来的日子都会抽出部分时间学习文件存储,目标是修改openstack-swift的源码,通过源码学习文件存储知识.目前学习对象:seaweedfs. 目标:学习seaweedfs 的文件合并存储文件合并后必然会带来的一堆问题待解决,比如文件索引,响应速率等. 学习方式: google + 调试github 上能找到项目的wiki文档,会介绍简单的使用.调试方案: IDEA/pycharm , 需要结合atom/vscode 的delve调试go程序,各有利弊,结合使用. 测试用命令启动:master : weed master -mdir=/home/ubuntu/weedfsvolume : weed volume -dir=”/home/ubuntu/weedfs/data1” -mserver=”localhost:9333” -port=8080使用:curl -X POST http://localhost:9333/dir/assign 获取fid 参考文章分布式存储Seaweedfs源码分析 tonybai的个人blog weed-fs 源码解读—分布式处理过程 weed-fs 源码解读","raw":null,"content":"<p>接下来的日子都会抽出部分时间学习文件存储,目标是修改openstack-swift的源码,通过源码学习文件存储知识.目前学习对象:<a href=\"https://github.com/chrislusf/seaweedfs\" target=\"_blank\" rel=\"external\">seaweedfs</a>.</p>\n<h2 id=\"目标-学习seaweedfs-的文件合并存储\"><a href=\"#目标-学习seaweedfs-的文件合并存储\" class=\"headerlink\" title=\"目标:学习seaweedfs 的文件合并存储\"></a>目标:学习seaweedfs 的文件合并存储</h2><p>文件合并后必然会带来的一堆问题待解决,比如文件索引,响应速率等.</p>\n<h2 id=\"学习方式-google-调试\"><a href=\"#学习方式-google-调试\" class=\"headerlink\" title=\"学习方式: google + 调试\"></a>学习方式: google + 调试</h2><p>github 上能找到项目的wiki文档,会介绍简单的使用.调试方案: IDEA/pycharm , 需要结合atom/vscode 的delve调试go程序,各有利弊,结合使用.</p>\n<h2 id=\"测试用命令\"><a href=\"#测试用命令\" class=\"headerlink\" title=\"测试用命令\"></a>测试用命令</h2><p>启动:<br>master : weed master -mdir=/home/ubuntu/weedfs<br>volume : weed volume -dir=”/home/ubuntu/weedfs/data1” -mserver=”localhost:9333”  -port=8080<br>使用:<br>curl -X POST <a href=\"http://localhost:9333/dir/assign\" target=\"_blank\" rel=\"external\">http://localhost:9333/dir/assign</a> 获取fid</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://yanyiwu.com/work/2015/01/09/weed-fs-source-analysis.html\" target=\"_blank\" rel=\"external\">分布式存储Seaweedfs源码分析</a></p>\n<p><a href=\"http://tonybai.com/2015/08/22/intro-of-using-weedfs/\" target=\"_blank\" rel=\"external\">tonybai的个人blog</a></p>\n<p><a href=\"http://www.tuicool.com/articles/yyUr2e\" target=\"_blank\" rel=\"external\">weed-fs 源码解读—分布式处理过程</a></p>\n<p><a href=\"http://blog.csdn.net/baogang409/article/details/42105367\" target=\"_blank\" rel=\"external\">weed-fs 源码解读</a></p>\n","categories":[{"name":"文件存储","slug":"文件存储","permalink":"https://makeitpossible16.github.io/categories/文件存储/"}],"tags":[{"name":"go","slug":"go","permalink":"https://makeitpossible16.github.io/tags/go/"},{"name":"seaweedfs","slug":"seaweedfs","permalink":"https://makeitpossible16.github.io/tags/seaweedfs/"}]},{"title":"cloudstack 搭建总结","slug":"cloudstack搭建总结","date":"2016-11-20T00:00:00.000Z","updated":"2017-02-14T04:09:05.448Z","comments":true,"path":"cloudsatck搭建/cloudstack搭建总结/","link":"","permalink":"https://makeitpossible16.github.io/cloudsatck搭建/cloudstack搭建总结/","excerpt":"","text":"按照官网的教程搭建cloudstack,稍不注意,就出现错误.总结一下. 子节点状态不对123[root@node3 ~]# service cloudstack-agent statuscloudstack-agent dead but subsys locked 解决：管理节点防火墙问题，正常状态下计算节点应通过NFS挂载主存储,管理节点应开放8250端口 执行完后把cloudstack-agent 重启一下，其状态应为running 系统VM 状态为Starting解决：在数据库中将这个虚拟机的状态由“Starting”更改成“Stopped”，重新启动虚拟机即可。 1MySQL -uroot -p -e \"update cloud.vm_instance set state='Stopped' where name=VMNAME 系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）防火墙问题 管理节点也用作计算节点，防火墙状态应为 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Generated by iptables-save v1.4.7 on Thu Jun 2 13:23:26 2016*nat:PREROUTING ACCEPT [187042:40599771]:POSTROUTING ACCEPT [36644:2281945]:OUTPUT ACCEPT [36644:2281945]COMMIT# Completed on Thu Jun 2 13:23:26 2016# Generated by iptables-save v1.4.7 on Thu Jun 2 13:23:26 2016*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [13422:54204084]:BF-cloud0 - [0:0]:BF-cloud0-IN - [0:0]:BF-cloud0-OUT - [0:0]-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5900 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5902 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 111 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 111 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 2049 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 32803 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 32769 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 892 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 892 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 875 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 875 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 662 -j ACCEPT-A INPUT -s 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 662 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -o cloud0 -m physdev --physdev-is-bridged -j BF-cloud0-A FORWARD -i cloud0 -m physdev --physdev-is-bridged -j BF-cloud0-A FORWARD -o cloud0 -j DROP-A FORWARD -i cloud0 -j DROP-A FORWARD -j REJECT --reject-with icmp-host-prohibited-A BF-cloud0 -m state --state RELATED,ESTABLISHED -j ACCEPT-A BF-cloud0 -m physdev --physdev-is-in --physdev-is-bridged -j BF-cloud0-IN-A BF-cloud0 -m physdev --physdev-is-out --physdev-is-bridged -j BF-cloud0-OUT-A BF-cloud0 -m physdev --physdev-out vnet0 --physdev-is-bridged -j ACCEPTCOMMIT# Completed on Thu Jun 2 13:23:26 2016 计算节点防火墙状态 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*mangle:PREROUTING ACCEPT [654:130068]:INPUT ACCEPT [210:107800]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [143:8276]:POSTROUTING ACCEPT [143:8276]-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fillCOMMIT# Completed on Wed Jun 1 19:37:24 2016# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*nat:PREROUTING ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:OUTPUT ACCEPT [0:0]COMMIT# Completed on Wed Jun 1 19:37:24 2016# Generated by iptables-save v1.4.7 on Wed Jun 1 19:37:24 2016*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 5900 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -i virbr0 -o virbr0 -j ACCEPT-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachableCOMMIT# Completed on Wed Jun 1 19:37:24 2016 二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件注意看日志文件，里面有详细的输出说明","raw":null,"content":"<p>按照官网的教程搭建<a href=\"http://docs.cloudstack.apache.org/projects/cloudstack-installation/en/4.8/overview/index.html\" target=\"_blank\" rel=\"external\">cloudstack</a>,稍不注意,就出现错误.总结一下.</p>\n<h2 id=\"子节点状态不对\"><a href=\"#子节点状态不对\" class=\"headerlink\" title=\"子节点状态不对\"></a>子节点状态不对</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@node3 ~]<span class=\"comment\"># service cloudstack-agent status</span></div><div class=\"line\"></div><div class=\"line\">cloudstack-agent dead but subsys locked</div></pre></td></tr></table></figure>\n<p>解决：管理节点防火墙问题，正常状态下计算节点应通过NFS挂载主存储,管理节点应开放8250端口</p>\n<p>执行完后把cloudstack-agent 重启一下，其状态应为running</p>\n<h2 id=\"系统VM-状态为Starting\"><a href=\"#系统VM-状态为Starting\" class=\"headerlink\" title=\"系统VM 状态为Starting\"></a>系统VM 状态为Starting</h2><p>解决：在数据库中将这个虚拟机的状态由“Starting”更改成“Stopped”，重新启动虚拟机即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL -uroot -p -e \"<span class=\"keyword\">update</span> cloud.vm_instance <span class=\"keyword\">set</span> state=<span class=\"string\">'Stopped'</span> <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=VMNAME</div></pre></td></tr></table></figure>\n<h2 id=\"系统VM-状态为Running-代理状态为空（centos6-5-图形化界面下的防火墙重启会清空iptables-文件下的规则）\"><a href=\"#系统VM-状态为Running-代理状态为空（centos6-5-图形化界面下的防火墙重启会清空iptables-文件下的规则）\" class=\"headerlink\" title=\"系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）\"></a>系统VM 状态为Running , 代理状态为空（centos6.5 图形化界面下的防火墙重启会清空iptables 文件下的规则）</h2><p>防火墙问题</p>\n<p>管理节点也用作计算节点，防火墙状态应为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Generated by iptables-save v1.4.7 on Thu Jun  2 13:23:26 2016</span></div><div class=\"line\">*nat</div><div class=\"line\">:PREROUTING ACCEPT [187042:40599771]</div><div class=\"line\">:POSTROUTING ACCEPT [36644:2281945]</div><div class=\"line\">:OUTPUT ACCEPT [36644:2281945]</div><div class=\"line\">COMMIT</div><div class=\"line\"><span class=\"comment\"># Completed on Thu Jun  2 13:23:26 2016</span></div><div class=\"line\"><span class=\"comment\"># Generated by iptables-save v1.4.7 on Thu Jun  2 13:23:26 2016</span></div><div class=\"line\">*filter</div><div class=\"line\">:INPUT ACCEPT [0:0]</div><div class=\"line\">:FORWARD ACCEPT [0:0]</div><div class=\"line\">:OUTPUT ACCEPT [13422:54204084]</div><div class=\"line\">:BF-cloud0 - [0:0]</div><div class=\"line\">:BF-cloud0-IN - [0:0]</div><div class=\"line\">:BF-cloud0-OUT - [0:0]</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</div><div class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class=\"line\">-A INPUT -p icmp -j ACCEPT</div><div class=\"line\">-A INPUT -i lo -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5900 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5902 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 111 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 111 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 2049 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 32803 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 32769 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 892 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 892 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 875 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 875 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p tcp -m state --state NEW -m tcp --dport 662 -j ACCEPT</div><div class=\"line\">-A INPUT <span class=\"_\">-s</span> 172.31.156.0/24 -p udp -m state --state NEW -m udp --dport 662 -j ACCEPT</div><div class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class=\"line\">-A FORWARD -o cloud0 -m physdev --physdev-is-bridged -j BF-cloud0</div><div class=\"line\">-A FORWARD -i cloud0 -m physdev --physdev-is-bridged -j BF-cloud0</div><div class=\"line\">-A FORWARD -o cloud0 -j DROP</div><div class=\"line\">-A FORWARD -i cloud0 -j DROP</div><div class=\"line\">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</div><div class=\"line\">-A BF-cloud0 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class=\"line\">-A BF-cloud0 -m physdev --physdev-is-in --physdev-is-bridged -j BF-cloud0-IN</div><div class=\"line\">-A BF-cloud0 -m physdev --physdev-is-out --physdev-is-bridged -j BF-cloud0-OUT</div><div class=\"line\">-A BF-cloud0 -m physdev --physdev-out vnet0 --physdev-is-bridged -j ACCEPT</div><div class=\"line\">COMMIT</div><div class=\"line\"><span class=\"comment\"># Completed on Thu Jun  2 13:23:26 2016</span></div></pre></td></tr></table></figure>\n<p>计算节点防火墙状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class=\"line\">*mangle</div><div class=\"line\">:PREROUTING ACCEPT [654:130068]</div><div class=\"line\">:INPUT ACCEPT [210:107800]</div><div class=\"line\">:FORWARD ACCEPT [0:0]</div><div class=\"line\">:OUTPUT ACCEPT [143:8276]</div><div class=\"line\">:POSTROUTING ACCEPT [143:8276]</div><div class=\"line\">-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill</div><div class=\"line\">-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill</div><div class=\"line\">COMMIT</div><div class=\"line\"><span class=\"comment\"># Completed on Wed Jun  1 19:37:24 2016</span></div><div class=\"line\"><span class=\"comment\"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class=\"line\">*nat</div><div class=\"line\">:PREROUTING ACCEPT [0:0]</div><div class=\"line\">:POSTROUTING ACCEPT [0:0]</div><div class=\"line\">:OUTPUT ACCEPT [0:0]</div><div class=\"line\">COMMIT</div><div class=\"line\"><span class=\"comment\"># Completed on Wed Jun  1 19:37:24 2016</span></div><div class=\"line\"><span class=\"comment\"># Generated by iptables-save v1.4.7 on Wed Jun  1 19:37:24 2016</span></div><div class=\"line\">*filter</div><div class=\"line\">:INPUT ACCEPT [0:0]</div><div class=\"line\">:FORWARD ACCEPT [0:0]</div><div class=\"line\">:OUTPUT ACCEPT [0:0]</div><div class=\"line\">-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class=\"line\">-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 49152:49216 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 5900:6100 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 16509 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 1798 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</div><div class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class=\"line\">-A INPUT -p icmp -j ACCEPT</div><div class=\"line\">-A INPUT -i lo -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</div><div class=\"line\">-A INPUT -p udp -m state --state NEW -m udp --dport 5900 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5901 -j ACCEPT</div><div class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8250 -j ACCEPT</div><div class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class=\"line\">-A FORWARD -i virbr0 -o virbr0 -j ACCEPT</div><div class=\"line\">-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable</div><div class=\"line\">-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable</div><div class=\"line\">COMMIT</div><div class=\"line\"><span class=\"comment\"># Completed on Wed Jun  1 19:37:24 2016</span></div></pre></td></tr></table></figure>\n<h2 id=\"二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件\"><a href=\"#二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件\" class=\"headerlink\" title=\"二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件\"></a>二级存储及主存储路径需要设置权限，否则二级存储虽能挂载，但无法写入文件</h2><h2 id=\"注意看日志文件，里面有详细的输出说明\"><a href=\"#注意看日志文件，里面有详细的输出说明\" class=\"headerlink\" title=\"注意看日志文件，里面有详细的输出说明\"></a>注意看日志文件，里面有详细的输出说明</h2>","categories":[{"name":"cloudsatck搭建","slug":"cloudsatck搭建","permalink":"https://makeitpossible16.github.io/categories/cloudsatck搭建/"}],"tags":[{"name":"cloudsatck","slug":"cloudsatck","permalink":"https://makeitpossible16.github.io/tags/cloudsatck/"}]},{"title":"nodeJS入门总结","slug":"nodeJS入门总结","date":"2016-11-20T00:00:00.000Z","updated":"2016-11-24T14:55:44.836Z","comments":true,"path":"网站相关/nodeJS入门总结/","link":"","permalink":"https://makeitpossible16.github.io/网站相关/nodeJS入门总结/","excerpt":"","text":"刚做完nodeJS的课设,写了个小程序,总结一下 程序功能实现简单的电商网站,能登陆,注册,浏览商品,购物车操作. 使用技术 nodeJS + Express + ejs mongoDB + mongoose bootstrap + jquery (前端页面是在网上找的,随便改了一下) 实现代码github 有关mongoosemongoose实现了把mongodb中的数据进行映射,可以直接使用mongoose对数据库进行操作,比较方便.使用嵌套document时,需要创建多个Schema(类似于Java中的POJO吧).12345678910111213141516171819202122232425var contactInformationSchema = new Schema(&#123; address: String, phone: String&#125;)var alreadyPaidSchema = new Schema(&#123; productID: Schema.Types.ObjectId, price: Number, address: String, phone: String, userName: String&#125;)var unpaidSchema = new Schema(&#123; productID: Schema.Types.ObjectId, price: Number&#125;)var schema = new Schema(&#123; username: String, password: String, contactInformation: [contactInformationSchema], alreadyPaid: [alreadyPaidSchema], unpaid: [unpaidSchema]&#125;); 有关nodeJS最大的优点就是回调,实现网站的并发访问. 不过缺点也不少,可能是我经验不足,记录一下掉过的坑. 1. 回调,感觉就像是不负责任地甩锅.1234567var test;for (var i = 0; i &lt; array.length; i++) &#123; test = array[i]; mongooseModel.find(&#123;\"something\":test&#125;).exec(function(err,document)&#123; var test1 = test; //此时的test可能已经是下一循环的值 &#125;)&#125; 2. 回调,导致代码层层嵌套3. 单进程,一旦进程发生阻塞,这个程序都会阻塞123while (true) &#123; //整个程序陷入死循环&#125; 4. 还是回调,导致数据库跨collection查询困难5. Express 中的模板应谨慎使用.我在项目中大量使用了ejs模板,当初就是为了图方便,直接使用ejs,实际上模板只应在静态文件中使用,也就是能保证模板中的内容在多个页面中同时适用,对于内容变化比较的页面,还是乖乖地写接口,返回JSON数据比较靠谱. 总结项目总体还是比较失败,不过也能学点东西. 比如 nodeJS , mongodb, 还有一点前端知识","raw":null,"content":"<p>刚做完nodeJS的课设,写了个小程序,总结一下</p>\n<h2 id=\"程序功能\"><a href=\"#程序功能\" class=\"headerlink\" title=\"程序功能\"></a>程序功能</h2><p>实现简单的电商网站,能登陆,注册,浏览商品,购物车操作.</p>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><ol>\n<li>nodeJS + Express + ejs</li>\n<li>mongoDB + mongoose</li>\n<li>bootstrap + jquery (前端页面是在网上找的,随便改了一下)</li>\n</ol>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><p><a href=\"https://github.com/MakeItPossible16/washingMachine.git\" target=\"_blank\" rel=\"external\">github</a></p>\n<h2 id=\"有关mongoose\"><a href=\"#有关mongoose\" class=\"headerlink\" title=\"有关mongoose\"></a>有关mongoose</h2><p>mongoose实现了把mongodb中的数据进行映射,可以直接使用mongoose对数据库进行操作,比较方便.使用嵌套document时,需要创建多个Schema(类似于Java中的POJO吧).<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> contactInformationSchema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">address</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"built_in\">String</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> alreadyPaidSchema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">productID</span>: Schema.Types.ObjectId,</div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"attr\">address</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">userName</span>: <span class=\"built_in\">String</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> unpaidSchema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">productID</span>: Schema.Types.ObjectId,</div><div class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">Number</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"attr\">contactInformation</span>: [contactInformationSchema],</div><div class=\"line\">    <span class=\"attr\">alreadyPaid</span>: [alreadyPaidSchema],</div><div class=\"line\">    <span class=\"attr\">unpaid</span>: [unpaidSchema]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"有关nodeJS\"><a href=\"#有关nodeJS\" class=\"headerlink\" title=\"有关nodeJS\"></a>有关nodeJS</h2><p>最大的优点就是回调,实现网站的并发访问. 不过缺点也不少,可能是我经验不足,记录一下掉过的坑.</p>\n<h3 id=\"1-回调-感觉就像是不负责任地甩锅\"><a href=\"#1-回调-感觉就像是不负责任地甩锅\" class=\"headerlink\" title=\"1. 回调,感觉就像是不负责任地甩锅.\"></a>1. 回调,感觉就像是不负责任地甩锅.</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">  test = array[i];</div><div class=\"line\">  mongooseModel.find(&#123;<span class=\"string\">\"something\"</span>:test&#125;).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,document</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> test1 = test; <span class=\"comment\">//此时的test可能已经是下一循环的值</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-回调-导致代码层层嵌套\"><a href=\"#2-回调-导致代码层层嵌套\" class=\"headerlink\" title=\"2. 回调,导致代码层层嵌套\"></a>2. 回调,导致代码层层嵌套</h3><h3 id=\"3-单进程-一旦进程发生阻塞-这个程序都会阻塞\"><a href=\"#3-单进程-一旦进程发生阻塞-这个程序都会阻塞\" class=\"headerlink\" title=\"3. 单进程,一旦进程发生阻塞,这个程序都会阻塞\"></a>3. 单进程,一旦进程发生阻塞,这个程序都会阻塞</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">//整个程序陷入死循环</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-还是回调-导致数据库跨collection查询困难\"><a href=\"#4-还是回调-导致数据库跨collection查询困难\" class=\"headerlink\" title=\"4. 还是回调,导致数据库跨collection查询困难\"></a>4. 还是回调,导致数据库跨collection查询困难</h3><h3 id=\"5-Express-中的模板应谨慎使用\"><a href=\"#5-Express-中的模板应谨慎使用\" class=\"headerlink\" title=\"5. Express 中的模板应谨慎使用.\"></a>5. Express 中的模板应谨慎使用.</h3><p>我在项目中大量使用了ejs模板,当初就是为了图方便,直接使用ejs,实际上模板只应在静态文件中使用,也就是能保证模板中的内容在多个页面中同时适用,对于内容变化比较的页面,还是乖乖地写接口,返回JSON数据比较靠谱.</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>项目总体还是比较失败,不过也能学点东西. 比如 nodeJS , mongodb, 还有一点前端知识</p>\n","categories":[{"name":"网站相关","slug":"网站相关","permalink":"https://makeitpossible16.github.io/categories/网站相关/"}],"tags":[{"name":"nodeJS","slug":"nodeJS","permalink":"https://makeitpossible16.github.io/tags/nodeJS/"},{"name":"mongodb","slug":"mongodb","permalink":"https://makeitpossible16.github.io/tags/mongodb/"},{"name":"Express","slug":"Express","permalink":"https://makeitpossible16.github.io/tags/Express/"},{"name":"mongoose","slug":"mongoose","permalink":"https://makeitpossible16.github.io/tags/mongoose/"}]},{"title":"ubuntu下如何优雅地使用翻译","slug":"ubuntu下如何优雅地使用翻译","date":"2016-10-26T00:00:00.000Z","updated":"2016-11-26T15:39:42.885Z","comments":true,"path":"有道字典修改/ubuntu下如何优雅地使用翻译/","link":"","permalink":"https://makeitpossible16.github.io/有道字典修改/ubuntu下如何优雅地使用翻译/","excerpt":"","text":"最近看英文文档比较多，但英语水平不咋地，需要借助翻译工具。在ubuntu下，有startdict、goldendict等字典，但字典毕竟是字典，解释太多，用着不太爽。平时喜欢用谷歌翻译，最近谷歌翻译的水平也的确提升了不少，可惜没有客户端，平时看个PDF啥的也用不了，github 上的发现mtranslate模块，把网址改为中国的网址，得到结果还挺快. 本来想写个接口封装一下，直接用goldendict显示的，无奈网络延迟太大，谷歌翻译都没出结果，字典的弹框就出来了，能找到goldendict的源码，但看到那一坨代码，实在没有修改的欲望。偶然的机会，发现了某道有ubuntu的客户端，解压出来，居然是python的代码，还是python大法好，这样就来优雅地改一下代码吧。最后实现功能：在弹框中显示调用mtranslate模块显示的翻译信息 点击保存，将所翻译的单词保存到指定目录的translate.csv文件中 调整弹框显示，解决翻译文本过长导致弹框显示不全的问题 实现代码：下载mtranslate模块使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。下载.deb包，解压，参考文章http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html在dae/utils.py增加代码123456def get_conf(): import json import os with open('configuration.json', 'r') as f: conf = json.load(f) return conf 修改translate.py文件修改get_translate方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546def get_translate(self, text): data = &#123; \"keyfrom\" : \"deskdict.linux\", \"q\" : text.encode(\"utf-8\"), \"doctype\" : \"xml\", \"xmlVersion\" : 8.2, \"client\" : const.client, \"id\" : \"cee84504d9984f1b2\", \"vendor\": \"deskdict.linux\", \"in\" : \"YoudaoDict\", \"appVer\" : \"5.4.46.5554\", \"appZengqiang\" : 0, \"le\" : \"eng\", \"LTH\" : 40&#125; # self.clear_translate() # try: ret = requests.get(\"http://dict.youdao.com/search\", params=data).text ret = ret.encode('utf-8') pq = PyQuery(ret, parser=\"xml\") test_data = &#123;\"q\": text, \"type\": 1, \"pos\": -1, \"client\": const.client&#125; test_ret = json.loads(requests.get(\"http://dict.youdao.com/jsonresult\", params=test_data).text) self.translate_info.text = text text = str(text).replace('\\n',' ') from dae.utils import get_conf conf = get_conf() self.translate_info.webtrans = \"谷歌翻译:\\n\" if (str(conf['useTranslateModule']).upper() == 'TRUE' ): self.translate_info.webtrans = self.translate_info.webtrans + useTranslateComponent(text) + \"\\n\" # if self.translate_info.webtrans: self.translate_info.webtrans =self.translate_info.webtrans + \"有道:\\n\" self.translate_info.trans = '\\n'.join([PyQuery(l)(\"i\").text() for l in pq('trs l')]) self.translate_info.phonetic = test_ret.get(\"ussm\", \"\") self.translate_info.webtrans = self.translate_info.webtrans + self.wrap_web_trans(pq) # self.translate_info.lang = test_ret.get(\"lang\", \"\") # # except: # with open_offline_dict() as obj: # ret = obj.query(text) # if ret: # self.translate_info.text = text # self.translate_info.trans = ret[1].replace(\"\\\\n\", \"\\n\") # self.translate_info.phonetic = ret[0][1:-1] # self.translate_info.webtrans = \"抱歉，从网络获取结果失败，请检测网络重试\" # self.translate_info.lang = \"eng\" # self.translate_info.voices = get_voice_simple(text) # if not text: # return #self.clear_translate() #self.translate_info.text = text if not self.translate_info.webtrans: self.translate_info.webtrans = \"查询失败\" if self.translate_info.webtrans: self.translateFinished.emit() 在translate.py中添加代码：12345678def useTranslateComponent(text): import os from dae.utils import get_conf conf = get_conf() toLang = conf['toLang'] from mtranslate import translate translation = translate(text,toLang) return translation 在windows.py添加类：12345678910111213141516171819202122232425262728293031323334353637383940#@ 保存到文件 class saveToFile(QtCore.QObject): @QtCore.pyqtSlot(str, str) def saveToFile(self,fromText,toText): import os import csv from dae.utils import get_conf toText = str(toText).replace('谷歌翻译:','') toText = toText.split('有道:') firstText = '' if toText[0]: firstText = toText[0].strip('\\n') lastText = toText[1].replace('有道:','').strip('\\n').lstrip('w. ') if (firstText or lastText): if not firstText: firstText = ' ' if not lastText: lastText = ' ' conf = get_conf() savePath = str(conf['savePath']).rstrip('/') + '/translate.csv' if not os.path.exists(savePath): with open(savePath,'a+') as f: writer = csv.writer(f) writer.writerow(['翻译内容','谷歌翻译','有道词典']) writeData = [ fromText, firstText, lastText ] writer.writerow(writeData) f.close() return with open(savePath,'a+') as f: writer = csv.writer(f) writeData = [ fromText, firstText, lastText ] writer.writerow(writeData) f.close() return return 在window.py 的init()方法中添加代码123#@ 单词保存到文件 self.saveToFile = saveToFile() self.qml_context.setContextProperty(\"saveToFile\", self.saveToFile) #把saveToFile类暴露给qml文件 在TranslateContent.qml 添加TextEdit，位置自己看着办就行1234567891011121314151617181920212223242526TextEdit&#123; color: \"#ff0000\" anchors.verticalCenter: parent.verticalCenter text: \" 保存\" selectByMouse: true readOnly: true font.pixelSize: 15 MouseArea &#123; anchors.fill: parent hoverEnabled: true onExited: &#123; cursorShape = Qt.ArrowCursor &#125; onClicked: &#123; saveToFile.saveToFile(translateInfo.text, translateInfo.webtrans) if (parent.color == \"#2699eb\")&#123; parent.color = \"#ff0000\"; &#125; else&#123; if(parent.color == \"#ff0000\")&#123; parent.color = \"#2699eb\" &#125; &#125; &#125; &#125; &#125; 修改翻译内容显示方式1234567891011TextEdit&#123; id: keywordsText width: parent.width //anchors.verticalCenter: parent.verticalCenter selectByMouse: true readOnly: true text: translateInfo.text wrapMode: Text.WordWrap font.pixelSize: 13 font.bold: true &#125; 在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令12345&#123; \"useTranslateModule\": \"true\", \"savePath\": \"/home/ubuntu/Desktop\", \"cmd\": \"translate -f en -t zh \" &#125; 保存，直接运行main.py youdao-dict-backend.py就行总结直接利用youdao原有的事件处理，总体能用，但没有startdict或goldendict流畅，如果能直接修改startdict或goldendict的代码，利用它们的事件处理，估计会更稳定，不过最近比较忙,先凑合着用吧.","raw":null,"content":"<p>最近看英文文档比较多，但英语水平不咋地，需要借助翻译工具。在ubuntu下，有startdict、goldendict等字典，但字典毕竟是字典，解释太多，用着不太爽。平时喜欢用谷歌翻译，最近谷歌翻译的水平也的确提升了不少，可惜没有客户端，平时看个PDF啥的也用不了，github 上的发现mtranslate模块，把网址改为中国的网址，得到结果还挺快.</p>\n<p>本来想写个接口封装一下，直接用goldendict显示的，无奈网络延迟太大，谷歌翻译都没出结果，字典的弹框就出来了，能找到goldendict的源码，但看到那一坨代码，实在没有修改的欲望。偶然的机会，发现了某道有ubuntu的客户端，解压出来，居然是python的代码，还是python大法好，这样就来优雅地改一下代码吧。<br>最后实现功能：<br>在弹框中显示调用mtranslate模块显示的翻译信息</p>\n<p><img src=\"http://store-10069044.cos.myqcloud.com/myblogImage/20161017145304097youdao.png\" alt=\"\"></p>\n<p>点击保存，将所翻译的单词保存到指定目录的translate.csv文件中</p>\n<p><img src=\"http://store-10069044.cos.myqcloud.com/myblogImage/20161017145415567youdaoSave.png\" alt=\"\"></p>\n<p>调整弹框显示，解决翻译文本过长导致弹框显示不全的问题</p>\n<h1 id=\"实现代码：\"><a href=\"#实现代码：\" class=\"headerlink\" title=\"实现代码：\"></a>实现代码：</h1><h2 id=\"下载mtranslate模块\"><a href=\"#下载mtranslate模块\" class=\"headerlink\" title=\"下载mtranslate模块\"></a>下载<a href=\"https://github.com/mouuff/mtranslate\" target=\"_blank\" rel=\"external\">mtranslate</a>模块</h2><h2 id=\"使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。\"><a href=\"#使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。\" class=\"headerlink\" title=\"使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。\"></a>使用python3，先安装youdao的客户端，解决依赖关系，然后把youdao卸载。</h2><h2 id=\"下载-deb包，解压，参考文章http-www-cnblogs-com-scplee-archive-2016-05-13-5489024-html\"><a href=\"#下载-deb包，解压，参考文章http-www-cnblogs-com-scplee-archive-2016-05-13-5489024-html\" class=\"headerlink\" title=\"下载.deb包，解压，参考文章http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html\"></a>下载.deb包，解压，参考文章<a href=\"http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html</a></h2><h2 id=\"在dae-utils-py增加代码\"><a href=\"#在dae-utils-py增加代码\" class=\"headerlink\" title=\"在dae/utils.py增加代码\"></a>在dae/utils.py增加代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_conf</span><span class=\"params\">()</span>:</span>  </div><div class=\"line\">    <span class=\"keyword\">import</span>  json  </div><div class=\"line\">    <span class=\"keyword\">import</span> os  </div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'configuration.json'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:  </div><div class=\"line\">        conf = json.load(f)  </div><div class=\"line\">    <span class=\"keyword\">return</span> conf</div></pre></td></tr></table></figure>\n<h2 id=\"修改translate-py文件\"><a href=\"#修改translate-py文件\" class=\"headerlink\" title=\"修改translate.py文件\"></a>修改translate.py文件</h2><p>修改get_translate方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_translate</span><span class=\"params\">(self, text)</span>:</span>  </div><div class=\"line\">    data = &#123; <span class=\"string\">\"keyfrom\"</span> : <span class=\"string\">\"deskdict.linux\"</span>, <span class=\"string\">\"q\"</span> : text.encode(<span class=\"string\">\"utf-8\"</span>), <span class=\"string\">\"doctype\"</span> : <span class=\"string\">\"xml\"</span>, <span class=\"string\">\"xmlVersion\"</span> : <span class=\"number\">8.2</span>,  </div><div class=\"line\">             <span class=\"string\">\"client\"</span> : const.client, <span class=\"string\">\"id\"</span> : <span class=\"string\">\"cee84504d9984f1b2\"</span>, <span class=\"string\">\"vendor\"</span>: <span class=\"string\">\"deskdict.linux\"</span>,  </div><div class=\"line\">             <span class=\"string\">\"in\"</span> : <span class=\"string\">\"YoudaoDict\"</span>, <span class=\"string\">\"appVer\"</span> : <span class=\"string\">\"5.4.46.5554\"</span>, <span class=\"string\">\"appZengqiang\"</span> : <span class=\"number\">0</span>, <span class=\"string\">\"le\"</span> : <span class=\"string\">\"eng\"</span>, <span class=\"string\">\"LTH\"</span> : <span class=\"number\">40</span>&#125;  </div><div class=\"line\">    <span class=\"comment\"># self.clear_translate()  </span></div><div class=\"line\">    <span class=\"comment\"># try:  </span></div><div class=\"line\">    ret = requests.get(<span class=\"string\">\"http://dict.youdao.com/search\"</span>, params=data).text  </div><div class=\"line\">    ret = ret.encode(<span class=\"string\">'utf-8'</span>)  </div><div class=\"line\">    pq = PyQuery(ret, parser=<span class=\"string\">\"xml\"</span>)  </div><div class=\"line\">    test_data = &#123;<span class=\"string\">\"q\"</span>: text, <span class=\"string\">\"type\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"pos\"</span>: <span class=\"number\">-1</span>, <span class=\"string\">\"client\"</span>: const.client&#125;  </div><div class=\"line\">    test_ret = json.loads(requests.get(<span class=\"string\">\"http://dict.youdao.com/jsonresult\"</span>, params=test_data).text)  </div><div class=\"line\">    self.translate_info.text = text  </div><div class=\"line\">    text = str(text).replace(<span class=\"string\">'\\n'</span>,<span class=\"string\">' '</span>)  </div><div class=\"line\">    <span class=\"keyword\">from</span> dae.utils <span class=\"keyword\">import</span> get_conf  </div><div class=\"line\">    conf = get_conf()  </div><div class=\"line\">    self.translate_info.webtrans = <span class=\"string\">\"谷歌翻译:\\n\"</span>  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (str(conf[<span class=\"string\">'useTranslateModule'</span>]).upper() == <span class=\"string\">'TRUE'</span> ):  </div><div class=\"line\">        self.translate_info.webtrans = self.translate_info.webtrans + useTranslateComponent(text) + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">    <span class=\"comment\"># if self.translate_info.webtrans:  </span></div><div class=\"line\">    self.translate_info.webtrans =self.translate_info.webtrans + <span class=\"string\">\"有道:\\n\"</span>  </div><div class=\"line\">    self.translate_info.trans = <span class=\"string\">'\\n'</span>.join([PyQuery(l)(<span class=\"string\">\"i\"</span>).text() <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> pq(<span class=\"string\">'trs l'</span>)])  </div><div class=\"line\">    self.translate_info.phonetic = test_ret.get(<span class=\"string\">\"ussm\"</span>, <span class=\"string\">\"\"</span>)  </div><div class=\"line\">    self.translate_info.webtrans = self.translate_info.webtrans + self.wrap_web_trans(pq)  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#     self.translate_info.lang = test_ret.get(\"lang\", \"\")  </span></div><div class=\"line\">    <span class=\"comment\">#  </span></div><div class=\"line\">    <span class=\"comment\"># except:  </span></div><div class=\"line\">    <span class=\"comment\">#     with open_offline_dict() as obj:  </span></div><div class=\"line\">    <span class=\"comment\">#         ret = obj.query(text)  </span></div><div class=\"line\">    <span class=\"comment\">#         if ret:  </span></div><div class=\"line\">    <span class=\"comment\">#             self.translate_info.text = text  </span></div><div class=\"line\">    <span class=\"comment\">#             self.translate_info.trans = ret[1].replace(\"\\\\n\", \"\\n\")  </span></div><div class=\"line\">    <span class=\"comment\">#             self.translate_info.phonetic = ret[0][1:-1]  </span></div><div class=\"line\">    <span class=\"comment\">#             self.translate_info.webtrans = \"抱歉，从网络获取结果失败，请检测网络重试\"  </span></div><div class=\"line\">    <span class=\"comment\">#             self.translate_info.lang = \"eng\"  </span></div><div class=\"line\">    <span class=\"comment\"># self.translate_info.voices = get_voice_simple(text)  </span></div><div class=\"line\">    <span class=\"comment\"># if not text:  </span></div><div class=\"line\">    <span class=\"comment\">#     return  </span></div><div class=\"line\">    <span class=\"comment\">#self.clear_translate()  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#self.translate_info.text = text  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.translate_info.webtrans:  </div><div class=\"line\">        self.translate_info.webtrans = <span class=\"string\">\"查询失败\"</span>  </div><div class=\"line\">    <span class=\"keyword\">if</span> self.translate_info.webtrans:  </div><div class=\"line\">        self.translateFinished.emit()</div></pre></td></tr></table></figure></p>\n<h2 id=\"在translate-py中添加代码：\"><a href=\"#在translate-py中添加代码：\" class=\"headerlink\" title=\"在translate.py中添加代码：\"></a>在translate.py中添加代码：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">useTranslateComponent</span><span class=\"params\">(text)</span>:</span>  </div><div class=\"line\">    <span class=\"keyword\">import</span> os</div><div class=\"line\">    <span class=\"keyword\">from</span> dae.utils <span class=\"keyword\">import</span> get_conf</div><div class=\"line\">    conf = get_conf()</div><div class=\"line\">    toLang = conf[<span class=\"string\">'toLang'</span>]</div><div class=\"line\">    <span class=\"keyword\">from</span> mtranslate <span class=\"keyword\">import</span> translate</div><div class=\"line\">    translation = translate(text,toLang)</div><div class=\"line\">    <span class=\"keyword\">return</span> translation</div></pre></td></tr></table></figure>\n<h2 id=\"在windows-py添加类：\"><a href=\"#在windows-py添加类：\" class=\"headerlink\" title=\"在windows.py添加类：\"></a>在windows.py添加类：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#@ 保存到文件  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">saveToFile</span><span class=\"params\">(QtCore.QObject)</span>:</span>  </div><div class=\"line\"><span class=\"meta\">    @QtCore.pyqtSlot(str, str)  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveToFile</span><span class=\"params\">(self,fromText,toText)</span>:</span>  </div><div class=\"line\">        <span class=\"keyword\">import</span> os  </div><div class=\"line\">        <span class=\"keyword\">import</span> csv  </div><div class=\"line\">        <span class=\"keyword\">from</span> dae.utils <span class=\"keyword\">import</span> get_conf  </div><div class=\"line\">        toText = str(toText).replace(<span class=\"string\">'谷歌翻译:'</span>,<span class=\"string\">''</span>)  </div><div class=\"line\">        toText = toText.split(<span class=\"string\">'有道:'</span>)  </div><div class=\"line\">        firstText = <span class=\"string\">''</span>  </div><div class=\"line\">        <span class=\"keyword\">if</span> toText[<span class=\"number\">0</span>]:  </div><div class=\"line\">            firstText = toText[<span class=\"number\">0</span>].strip(<span class=\"string\">'\\n'</span>)  </div><div class=\"line\">        lastText = toText[<span class=\"number\">1</span>].replace(<span class=\"string\">'有道:'</span>,<span class=\"string\">''</span>).strip(<span class=\"string\">'\\n'</span>).lstrip(<span class=\"string\">'w. '</span>)  </div><div class=\"line\">        <span class=\"keyword\">if</span> (firstText <span class=\"keyword\">or</span> lastText):  </div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> firstText:  </div><div class=\"line\">                firstText = <span class=\"string\">' '</span>  </div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> lastText:  </div><div class=\"line\">                lastText = <span class=\"string\">' '</span>  </div><div class=\"line\">            conf = get_conf()  </div><div class=\"line\">            savePath = str(conf[<span class=\"string\">'savePath'</span>]).rstrip(<span class=\"string\">'/'</span>) + <span class=\"string\">'/translate.csv'</span>  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(savePath):  </div><div class=\"line\">                <span class=\"keyword\">with</span> open(savePath,<span class=\"string\">'a+'</span>) <span class=\"keyword\">as</span> f:  </div><div class=\"line\">                    writer = csv.writer(f)  </div><div class=\"line\">                    writer.writerow([<span class=\"string\">'翻译内容'</span>,<span class=\"string\">'谷歌翻译'</span>,<span class=\"string\">'有道词典'</span>])  </div><div class=\"line\">                    writeData = [  </div><div class=\"line\">                        fromText, firstText, lastText  </div><div class=\"line\">                    ]  </div><div class=\"line\">                    writer.writerow(writeData)  </div><div class=\"line\">                    f.close()  </div><div class=\"line\">                <span class=\"keyword\">return</span>  </div><div class=\"line\">            <span class=\"keyword\">with</span> open(savePath,<span class=\"string\">'a+'</span>) <span class=\"keyword\">as</span> f:  </div><div class=\"line\">                writer = csv.writer(f)  </div><div class=\"line\">                writeData = [  </div><div class=\"line\">                    fromText, firstText, lastText  </div><div class=\"line\">                ]  </div><div class=\"line\">                writer.writerow(writeData)  </div><div class=\"line\">                f.close()  </div><div class=\"line\">            <span class=\"keyword\">return</span>  </div><div class=\"line\">        <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n<h2 id=\"在window-py-的init-方法中添加代码\"><a href=\"#在window-py-的init-方法中添加代码\" class=\"headerlink\" title=\"在window.py 的init()方法中添加代码\"></a>在window.py 的<strong>init</strong>()方法中添加代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#@ 单词保存到文件  </span></div><div class=\"line\">        self.saveToFile = saveToFile()  </div><div class=\"line\">        self.qml_context.setContextProperty(<span class=\"string\">\"saveToFile\"</span>, self.saveToFile) <span class=\"comment\">#把saveToFile类暴露给qml文件</span></div></pre></td></tr></table></figure>\n<h2 id=\"在TranslateContent-qml-添加TextEdit，位置自己看着办就行\"><a href=\"#在TranslateContent-qml-添加TextEdit，位置自己看着办就行\" class=\"headerlink\" title=\"在TranslateContent.qml 添加TextEdit，位置自己看着办就行\"></a>在TranslateContent.qml 添加TextEdit，位置自己看着办就行</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextEdit&#123;  </div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">\"#ff0000\"</span>  </div><div class=\"line\">            anchors.verticalCenter: parent.verticalCenter  </div><div class=\"line\">            text: <span class=\"string\">\" 保存\"</span>  </div><div class=\"line\">            selectByMouse: <span class=\"literal\">true</span>  </div><div class=\"line\">            readOnly: <span class=\"literal\">true</span>  </div><div class=\"line\">            font.pixelSize: <span class=\"number\">15</span>  </div><div class=\"line\">            MouseArea &#123;  </div><div class=\"line\">                anchors.fill: parent  </div><div class=\"line\">                hoverEnabled: <span class=\"literal\">true</span>  </div><div class=\"line\">                onExited: &#123;  </div><div class=\"line\">                    cursorShape = Qt.ArrowCursor  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                onClicked: &#123;  </div><div class=\"line\">                    saveToFile.saveToFile(translateInfo.text, translateInfo.webtrans)  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (parent.color == <span class=\"string\">\"#2699eb\"</span>)&#123;  </div><div class=\"line\">                        parent.color = <span class=\"string\">\"#ff0000\"</span>;  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    <span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">                        <span class=\"keyword\">if</span>(parent.color == <span class=\"string\">\"#ff0000\"</span>)&#123;  </div><div class=\"line\">                            parent.color = <span class=\"string\">\"#2699eb\"</span>  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"修改翻译内容显示方式\"><a href=\"#修改翻译内容显示方式\" class=\"headerlink\" title=\"修改翻译内容显示方式\"></a>修改翻译内容显示方式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextEdit&#123;  </div><div class=\"line\">            <span class=\"attr\">id</span>: keywordsText  </div><div class=\"line\">            width: parent.width  </div><div class=\"line\">            <span class=\"comment\">//anchors.verticalCenter: parent.verticalCenter  </span></div><div class=\"line\">            selectByMouse: <span class=\"literal\">true</span>  </div><div class=\"line\">            readOnly: <span class=\"literal\">true</span>  </div><div class=\"line\">            text: translateInfo.text  </div><div class=\"line\">            wrapMode: Text.WordWrap  </div><div class=\"line\">            font.pixelSize: <span class=\"number\">13</span>  </div><div class=\"line\">            font.bold: <span class=\"literal\">true</span>  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在main-py所在文件夹下添加配置文件configuration-json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令\"><a href=\"#在main-py所在文件夹下添加配置文件configuration-json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令\" class=\"headerlink\" title=\"在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令\"></a>在main.py所在文件夹下添加配置文件configuration.json，配置文件，可以选择是否启用translate模块，配置保存翻译信息文件位置，使用translate时系统调用的命令</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  </div><div class=\"line\">  <span class=\"attr\">\"useTranslateModule\"</span>: <span class=\"string\">\"true\"</span>,  </div><div class=\"line\">  <span class=\"attr\">\"savePath\"</span>: <span class=\"string\">\"/home/ubuntu/Desktop\"</span>,  </div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"translate -f en -t zh \"</span>  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"保存，直接运行main-py-youdao-dict-backend-py就行\"><a href=\"#保存，直接运行main-py-youdao-dict-backend-py就行\" class=\"headerlink\" title=\"保存，直接运行main.py youdao-dict-backend.py就行\"></a>保存，直接运行main.py youdao-dict-backend.py就行</h2><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>直接利用youdao原有的事件处理，总体能用，但没有startdict或goldendict流畅，如果能直接修改startdict或goldendict的代码，利用它们的事件处理，估计会更稳定，不过最近比较忙,先凑合着用吧.</p>\n","categories":[{"name":"有道字典修改","slug":"有道字典修改","permalink":"https://makeitpossible16.github.io/categories/有道字典修改/"}],"tags":[{"name":"python","slug":"python","permalink":"https://makeitpossible16.github.io/tags/python/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://makeitpossible16.github.io/tags/ubuntu/"}]},{"title":"github目录","slug":"README","date":"2016-01-01T00:00:00.000Z","updated":"2017-02-15T04:29:12.971Z","comments":true,"path":"uncategorized/README/","link":"","permalink":"https://makeitpossible16.github.io/uncategorized/README/","excerpt":"","text":"blogMarkdownFile寻找实习单位,个人简介myblogELKStack搭建问题总结cloudstack搭建总结golang 反射机制golang学习golang调试技巧kafka学习笔记linux内核学习-数据结构linux命令学习linux学习-linux文件存储linux文件存储机制nodeJS入门总结openstack-swift源码阅读记录1-文件上传过程openstack-swift调试openstack源码阅读记录2-object metadatapython语法记录seaweedfs源码阅读4-volume启动seaweedfs源码阅读5-文件PUT过程seaweedfs源码阅读6-文件存储格式seaweedfs源码阅读7-文件存储过程seaweedfs源码阅读8-GET&amp;HEAD获取文件过程seaweedfs源码阅读记录seaweedfs源码阅读记录2seaweedfs源码阅读记录3-raft协议理解seaweedfs源码阅读记录9-生成fid过程ubuntu下如何优雅地使用翻译数据结构文件系统(seaweedfs)与关系型数据库优劣势分析与关系型数据库优劣势分析.md)查找-数据结构学习","raw":null,"content":"<h2 id=\"blogMarkdownFile\"><a href=\"#blogMarkdownFile\" class=\"headerlink\" title=\"blogMarkdownFile\"></a>blogMarkdownFile</h2><h2 id=\"寻找实习单位-个人简介\"><a href=\"#寻找实习单位-个人简介\" class=\"headerlink\" title=\"寻找实习单位,个人简介\"></a>寻找实习单位,<a href=\"https://makeitpossible16.github.io/about/\">个人简介</a></h2><h2 id=\"myblog\"><a href=\"#myblog\" class=\"headerlink\" title=\"myblog\"></a><a href=\"https://www.makeitpossible16.github.io\" target=\"_blank\" rel=\"external\">myblog</a></h2><h3 id=\"ELKStack搭建问题总结\"><a href=\"#ELKStack搭建问题总结\" class=\"headerlink\" title=\"ELKStack搭建问题总结\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/ELKStack搭建问题总结.md\" target=\"_blank\" rel=\"external\">ELKStack搭建问题总结</a></h3><h3 id=\"cloudstack搭建总结\"><a href=\"#cloudstack搭建总结\" class=\"headerlink\" title=\"cloudstack搭建总结\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/cloudstack搭建总结.md\" target=\"_blank\" rel=\"external\">cloudstack搭建总结</a></h3><h3 id=\"golang-反射机制\"><a href=\"#golang-反射机制\" class=\"headerlink\" title=\"golang 反射机制\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/golang 反射机制.md\" target=\"_blank\" rel=\"external\">golang 反射机制</a></h3><h3 id=\"golang学习\"><a href=\"#golang学习\" class=\"headerlink\" title=\"golang学习\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/golang学习.md\" target=\"_blank\" rel=\"external\">golang学习</a></h3><h3 id=\"golang调试技巧\"><a href=\"#golang调试技巧\" class=\"headerlink\" title=\"golang调试技巧\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/golang调试技巧.md\" target=\"_blank\" rel=\"external\">golang调试技巧</a></h3><h3 id=\"kafka学习笔记\"><a href=\"#kafka学习笔记\" class=\"headerlink\" title=\"kafka学习笔记\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/kafka学习笔记.md\" target=\"_blank\" rel=\"external\">kafka学习笔记</a></h3><h3 id=\"linux内核学习-数据结构\"><a href=\"#linux内核学习-数据结构\" class=\"headerlink\" title=\"linux内核学习-数据结构\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/linux内核学习-数据结构.md\" target=\"_blank\" rel=\"external\">linux内核学习-数据结构</a></h3><h3 id=\"linux命令学习\"><a href=\"#linux命令学习\" class=\"headerlink\" title=\"linux命令学习\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/linux命令学习.md\" target=\"_blank\" rel=\"external\">linux命令学习</a></h3><h3 id=\"linux学习-linux文件存储\"><a href=\"#linux学习-linux文件存储\" class=\"headerlink\" title=\"linux学习-linux文件存储\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/linux学习-linux文件存储.md\" target=\"_blank\" rel=\"external\">linux学习-linux文件存储</a></h3><h3 id=\"linux文件存储机制\"><a href=\"#linux文件存储机制\" class=\"headerlink\" title=\"linux文件存储机制\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/linux文件存储机制.md\" target=\"_blank\" rel=\"external\">linux文件存储机制</a></h3><h3 id=\"nodeJS入门总结\"><a href=\"#nodeJS入门总结\" class=\"headerlink\" title=\"nodeJS入门总结\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/nodeJS入门总结.md\" target=\"_blank\" rel=\"external\">nodeJS入门总结</a></h3><h3 id=\"openstack-swift源码阅读记录1-文件上传过程\"><a href=\"#openstack-swift源码阅读记录1-文件上传过程\" class=\"headerlink\" title=\"openstack-swift源码阅读记录1-文件上传过程\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/openstack-swift源码阅读记录1-文件上传过程.md\" target=\"_blank\" rel=\"external\">openstack-swift源码阅读记录1-文件上传过程</a></h3><h3 id=\"openstack-swift调试\"><a href=\"#openstack-swift调试\" class=\"headerlink\" title=\"openstack-swift调试\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/openstack-swift调试.md\" target=\"_blank\" rel=\"external\">openstack-swift调试</a></h3><h3 id=\"openstack源码阅读记录2-object-metadata\"><a href=\"#openstack源码阅读记录2-object-metadata\" class=\"headerlink\" title=\"openstack源码阅读记录2-object metadata\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/openstack源码阅读记录2-object metadata.md\" target=\"_blank\" rel=\"external\">openstack源码阅读记录2-object metadata</a></h3><h3 id=\"python语法记录\"><a href=\"#python语法记录\" class=\"headerlink\" title=\"python语法记录\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/python语法记录.md\" target=\"_blank\" rel=\"external\">python语法记录</a></h3><h3 id=\"seaweedfs源码阅读4-volume启动\"><a href=\"#seaweedfs源码阅读4-volume启动\" class=\"headerlink\" title=\"seaweedfs源码阅读4-volume启动\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读4-volume启动.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读4-volume启动</a></h3><h3 id=\"seaweedfs源码阅读5-文件PUT过程\"><a href=\"#seaweedfs源码阅读5-文件PUT过程\" class=\"headerlink\" title=\"seaweedfs源码阅读5-文件PUT过程\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读5-文件PUT过程.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读5-文件PUT过程</a></h3><h3 id=\"seaweedfs源码阅读6-文件存储格式\"><a href=\"#seaweedfs源码阅读6-文件存储格式\" class=\"headerlink\" title=\"seaweedfs源码阅读6-文件存储格式\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读6-文件存储格式.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读6-文件存储格式</a></h3><h3 id=\"seaweedfs源码阅读7-文件存储过程\"><a href=\"#seaweedfs源码阅读7-文件存储过程\" class=\"headerlink\" title=\"seaweedfs源码阅读7-文件存储过程\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读7-文件存储过程.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读7-文件存储过程</a></h3><h3 id=\"seaweedfs源码阅读8-GET-amp-HEAD获取文件过程\"><a href=\"#seaweedfs源码阅读8-GET-amp-HEAD获取文件过程\" class=\"headerlink\" title=\"seaweedfs源码阅读8-GET&amp;HEAD获取文件过程\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读8-GET&amp;HEAD获取文件过程.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读8-GET&amp;HEAD获取文件过程</a></h3><h3 id=\"seaweedfs源码阅读记录\"><a href=\"#seaweedfs源码阅读记录\" class=\"headerlink\" title=\"seaweedfs源码阅读记录\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读记录.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读记录</a></h3><h3 id=\"seaweedfs源码阅读记录2\"><a href=\"#seaweedfs源码阅读记录2\" class=\"headerlink\" title=\"seaweedfs源码阅读记录2\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读记录2.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读记录2</a></h3><h3 id=\"seaweedfs源码阅读记录3-raft协议理解\"><a href=\"#seaweedfs源码阅读记录3-raft协议理解\" class=\"headerlink\" title=\"seaweedfs源码阅读记录3-raft协议理解\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读记录3-raft协议理解.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读记录3-raft协议理解</a></h3><h3 id=\"seaweedfs源码阅读记录9-生成fid过程\"><a href=\"#seaweedfs源码阅读记录9-生成fid过程\" class=\"headerlink\" title=\"seaweedfs源码阅读记录9-生成fid过程\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/seaweedfs源码阅读记录9-生成fid过程.md\" target=\"_blank\" rel=\"external\">seaweedfs源码阅读记录9-生成fid过程</a></h3><h3 id=\"ubuntu下如何优雅地使用翻译\"><a href=\"#ubuntu下如何优雅地使用翻译\" class=\"headerlink\" title=\"ubuntu下如何优雅地使用翻译\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/ubuntu下如何优雅地使用翻译.md\" target=\"_blank\" rel=\"external\">ubuntu下如何优雅地使用翻译</a></h3><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/数据结构.md\" target=\"_blank\" rel=\"external\">数据结构</a></h3><h3 id=\"文件系统-seaweedfs-与关系型数据库优劣势分析与关系型数据库优劣势分析-md\"><a href=\"#文件系统-seaweedfs-与关系型数据库优劣势分析与关系型数据库优劣势分析-md\" class=\"headerlink\" title=\"文件系统(seaweedfs)与关系型数据库优劣势分析与关系型数据库优劣势分析.md)\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/文件系统(seaweedfs\" target=\"_blank\" rel=\"external\">文件系统(seaweedfs)与关系型数据库优劣势分析</a>与关系型数据库优劣势分析.md)</h3><h3 id=\"查找-数据结构学习\"><a href=\"#查找-数据结构学习\" class=\"headerlink\" title=\"查找-数据结构学习\"></a><a href=\"https://github.com/MakeItPossible16/blogMarkdownFile/blob/master/查找-数据结构学习.md\" target=\"_blank\" rel=\"external\">查找-数据结构学习</a></h3>","categories":[],"tags":[]}]}